# See the NOTICE file distributed with this work for additional information
# regarding copyright ownership.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# GitLab CI/CD for Python

variables:
  PYTHON_IMAGE: python:3.9
  RUN_DIR: ./.gitlab/runtime
  USER: $GITLAB_USER_LOGIN
  # Configure mysql environment variables (https://hub.docker.com/_/mysql/)
  MYSQL_ROOT_PASSWORD: root

workflow:
  auto_cancel:
    on_new_commit: interruptible

default:
  image: $PYTHON_IMAGE
  interruptible: true
  tags:
    - docker

stages:
  - build
  - test
  - deploy

# Build stage

## Prepare and load the Python virtual environment

python:prepare_venv:
  stage: build
  artifacts:
    paths:
      - $RUN_DIR
  before_script:
    - python --version  # for debugging
    - python -m venv $RUN_DIR/venv
    - source $RUN_DIR/venv/bin/activate
  script:
    - pip install -e .[cicd]
  rules:
    - changes:
      - .gitlab-ci.yml
      - pyproject.toml
      - src/ensembl/**/*.py
      - tests/**/*.py

# Test stage

.python:test:
  stage: test
  before_script:
    - source $RUN_DIR/venv/bin/activate
  needs: ['python:prepare_venv']

## Linting, type checking and formatting

### pylint
.python:pylint:
  extends: .python:test
  variables:
    PYLINT_CMD: pylint --rcfile pyproject.toml

python:pylint:src:
  extends: .python:pylint
  script:
    - $PYLINT_CMD src/python/ensembl

python:pylint:tests:
  extends: .python:pylint
  script:
    - $PYLINT_CMD --recursive=y src/python/tests

### mypy
.python:mypy:
  extends: .python:test
  variables:
    MYPY_CMD: mypy --config-file pyproject.toml

python:mypy:src:
  extends: .python:mypy
  script:
    - $MYPY_CMD src/python/ensembl

python:mypy:tests:
  extends: .python:mypy
  allow_failure: true
  script:
    - $MYPY_CMD src/python/tests

### black
python:black:
  extends: .python:test
  allow_failure: true
  script:
    - black --config pyproject.toml --check .

## Unit tests and coverage

python:pytest:
  extends: .python:test
  services:
  - mysql:5.7
  tags:
    - dind
  script:
    - coverage run -m pytest --server=mysql://${MYSQL_ROOT_USER}:${MYSQL_ROOT_PASSWORD}@mysql:3306/?local_infile=1 --junitxml=$RUN_DIR/junit_reports.xml
    - coverage html -d $RUN_DIR/coverage
    - coverage xml -o $RUN_DIR/coverage.xml
    - genbadge coverage -i $RUN_DIR/coverage.xml -o $RUN_DIR/coverage/coverage-badge.svg
    - coverage report
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    when: always
    reports:
      junit: $RUN_DIR/junit_reports.xml
    paths:
      - $RUN_DIR/coverage

## License-related checks: NOTICE file and license headers

.license:
  stage: test
  variables:
    CMD: python .gitlab/scripts/check_license.py

license:notice:
  extends: .license
  script:
    - $CMD notice

license:header:
  extends: .license
  script:
    - $CMD header

# Deploy stage

## Generate GitLab pages with HTML coverage report

pages:
  stage: deploy
  interruptible: false
  script:
    - mv $RUN_DIR/coverage/ public/
  artifacts:
    paths:
      - public
  only:
    refs:
      - main
