{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Ensembl Python Base Library","text":"<p>Centralise generic Python code use across all other project within Ensembl, more particularly database access layers and ORMs, reusable eHive components, etc.</p>"},{"location":"#contents","title":"Contents","text":"<p>Check out installation section for further information on how to install the project.</p> <ol> <li>Install</li> <li>Code of Conduct</li> <li>Coverage report</li> <li>Code reference</li> </ol>"},{"location":"#license","title":"License","text":"<p>Software as part of Ensembl Python Base Library is distributed under the Apache-2.0 License.</p>"},{"location":"code_of_conduct/","title":"Code of Conduct","text":"<p>The Ensembl project is built on a foundation of collaboration, mutual respect and equality with a diverse and global community. We do not condone discrimination or abusive behaviour of any form. We encourage participation and engagement for everyone, in a professional manner, and wish all members of our community to adhere to the same principles.</p>"},{"location":"install/","title":"How to install this repository","text":"<p>This Python library only requires Python 3.10+ to work. However, it is likely most functionalities and modules will still be Python 3.9 compatible.</p>"},{"location":"install/#basic-installation","title":"Basic installation","text":"<p>To install it, just run the following command:</p> <pre><code>pip3 install git+https://github.com/Ensembl/ensembl-py.git\n</code></pre>"},{"location":"install/#development-oriented-installation","title":"Development-oriented installation","text":"<p>To perform a development installation it is advised to use a Python virtual environment (and activate it):</p> <pre><code>python3 -m venv path/to/virtual_env\nsource path/to/virtual_env/bin/activate\n</code></pre> <p>And then clone the GitHub repository and install it in edit mode:</p> <pre><code>git clone https://github.com/Ensembl/ensembl-py.git\npip3 install -e ensembl-py/.[cicd,dev,docs]\n</code></pre> <p>Documentation generated using mkdocs. For full information visit mkdocs.org.</p>"},{"location":"reference/summary/","title":"Summary","text":"<ul> <li>python<ul> <li>ensembl<ul> <li>core<ul> <li>models</li> </ul> </li> <li>ncbi_taxonomy<ul> <li>api<ul> <li>utils</li> </ul> </li> <li>models</li> </ul> </li> <li>xrefs<ul> <li>xref_source_db_model</li> <li>xref_update_db_model</li> </ul> </li> </ul> </li> <li>tests<ul> <li>core<ul> <li>compare_core_model</li> <li>test_core</li> </ul> </li> <li>ncbi_taxonomy<ul> <li>test_ncbi_taxonomy</li> </ul> </li> <li>xrefs<ul> <li>test_xref_source</li> <li>test_xref_update</li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/python/ensembl/core/","title":"core","text":""},{"location":"reference/python/ensembl/core/#python.ensembl.core","title":"<code>python.ensembl.core</code>","text":""},{"location":"reference/python/ensembl/core/models/","title":"models","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models","title":"<code>python.ensembl.core.models</code>","text":"<p>Ensembl Core database ORM.</p>"},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Base","title":"<code>Base = declarative_base()</code>  <code>module-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.metadata","title":"<code>metadata = Base.metadata</code>  <code>module-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.t_alt_allele_attrib","title":"<code>t_alt_allele_attrib = Table('alt_allele_attrib', metadata, Column('alt_allele_id', ForeignKey('alt_allele.alt_allele_id')), Column('attrib', Enum('IS_REPRESENTATIVE', 'IS_MOST_COMMON_ALLELE', 'IN_CORRECTED_ASSEMBLY', 'HAS_CODING_POTENTIAL', 'IN_ARTIFICIALLY_DUPLICATED_ASSEMBLY', 'IN_SYNTENIC_REGION', 'HAS_SAME_UNDERLYING_DNA_SEQUENCE', 'IN_BROKEN_ASSEMBLY_REGION', 'IS_VALID_ALTERNATE', 'SAME_AS_REPRESENTATIVE', 'SAME_AS_ANOTHER_ALLELE', 'MANUALLY_ASSIGNED', 'AUTOMATICALLY_ASSIGNED')), Index('aa_idx', 'alt_allele_id', 'attrib'))</code>  <code>module-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.t_gene_archive","title":"<code>t_gene_archive = Table('gene_archive', metadata, Column('gene_stable_id', String(128), nullable=False), Column('gene_version', SMALLINT(6), nullable=False, server_default=(text(\"'1'\"))), Column('transcript_stable_id', String(128), nullable=False), Column('transcript_version', SMALLINT(6), nullable=False, server_default=(text(\"'1'\"))), Column('translation_stable_id', String(128)), Column('translation_version', SMALLINT(6), nullable=False, server_default=(text(\"'1'\"))), Column('peptide_archive_id', ForeignKey('peptide_archive.peptide_archive_id'), index=True), Column('mapping_session_id', ForeignKey('mapping_session.mapping_session_id'), nullable=False, index=True), Index('transcript_idx', 'transcript_stable_id', 'transcript_version'), Index('translation_idx', 'translation_stable_id', 'translation_version'), Index('gene_idx', 'gene_stable_id', 'gene_version'))</code>  <code>module-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.t_interpro","title":"<code>t_interpro = Table('interpro', metadata, Column('interpro_ac', String(40), nullable=False), Column('id', VARCHAR(40), nullable=False, index=True), Index('accession_idx', 'interpro_ac', 'id', unique=True))</code>  <code>module-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.t_misc_feature_misc_set","title":"<code>t_misc_feature_misc_set = Table('misc_feature_misc_set', metadata, Column('misc_feature_id', ForeignKey('misc_feature.misc_feature_id'), primary_key=True, nullable=False, server_default=(text(\"'0'\"))), Column('misc_set_id', ForeignKey('misc_set.misc_set_id'), primary_key=True, nullable=False, server_default=(text(\"'0'\"))), Index('reverse_idx', 'misc_set_id', 'misc_feature_id'))</code>  <code>module-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.t_operon_transcript_gene","title":"<code>t_operon_transcript_gene = Table('operon_transcript_gene', metadata, Column('operon_transcript_id', ForeignKey('operon_transcript.operon_transcript_id')), Column('gene_id', ForeignKey('gene.gene_id'), index=True), Index('operon_transcript_gene_idx', 'operon_transcript_id', 'gene_id'))</code>  <code>module-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.t_seq_region_mapping","title":"<code>t_seq_region_mapping = Table('seq_region_mapping', metadata, Column('external_seq_region_id', INTEGER(10), nullable=False), Column('internal_seq_region_id', ForeignKey('seq_region.seq_region_id'), nullable=False, index=True), Column('mapping_set_id', ForeignKey('mapping_set.mapping_set_id'), nullable=False, index=True))</code>  <code>module-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.AltAllele","title":"<code>AltAllele</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/core/models.py</code> <pre><code>class AltAllele(Base):\n    __tablename__ = \"alt_allele\"\n    __table_args__ = (Index(\"alt_allele_gene_id_idx\", \"gene_id\", \"alt_allele_group_id\"),)\n\n    alt_allele_id: Column = Column(INTEGER(10), primary_key=True)\n    alt_allele_group_id: Column = Column(\n        ForeignKey(\"alt_allele_group.alt_allele_group_id\"),\n        nullable=False,\n        index=True,\n    )\n    gene_id: Column = Column(\n        ForeignKey(\"gene.gene_id\"),\n        nullable=False,\n        unique=True,\n    )\n\n    alt_allele_group = relationship(\n        \"AltAlleleGroup\",\n        primaryjoin=\"AltAllele.alt_allele_group_id == AltAlleleGroup.alt_allele_group_id\",\n    )\n    gene = relationship(\"Gene\", primaryjoin=\"AltAllele.gene_id == Gene.gene_id\")\n</code></pre>"},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.AltAllele.alt_allele_group","title":"<code>alt_allele_group = relationship('AltAlleleGroup', primaryjoin='AltAllele.alt_allele_group_id == AltAlleleGroup.alt_allele_group_id')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.AltAllele.alt_allele_group_id","title":"<code>alt_allele_group_id = Column(ForeignKey('alt_allele_group.alt_allele_group_id'), nullable=False, index=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.AltAllele.alt_allele_id","title":"<code>alt_allele_id = Column(INTEGER(10), primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.AltAllele.gene","title":"<code>gene = relationship('Gene', primaryjoin='AltAllele.gene_id == Gene.gene_id')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.AltAllele.gene_id","title":"<code>gene_id = Column(ForeignKey('gene.gene_id'), nullable=False, unique=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.AltAlleleGroup","title":"<code>AltAlleleGroup</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/core/models.py</code> <pre><code>class AltAlleleGroup(Base):\n    __tablename__ = \"alt_allele_group\"\n\n    alt_allele_group_id: Column = Column(INTEGER(10), primary_key=True)\n</code></pre>"},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.AltAlleleGroup.alt_allele_group_id","title":"<code>alt_allele_group_id = Column(INTEGER(10), primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Analysis","title":"<code>Analysis</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/core/models.py</code> <pre><code>class Analysis(Base):\n    __tablename__ = \"analysis\"\n\n    analysis_id: Column = Column(SMALLINT(5), primary_key=True)\n    created: Column = Column(DateTime)\n    logic_name: Column = Column(String(128), nullable=False, unique=True)\n    db: Column = Column(String(120))\n    db_version: Column = Column(String(40))\n    db_file: Column = Column(String(120))\n    program: Column = Column(String(80))\n    program_version: Column = Column(String(40))\n    program_file: Column = Column(String(80))\n    parameters: Column = Column(Text)\n    module: Column = Column(String(80))\n    module_version: Column = Column(String(40))\n    gff_source: Column = Column(String(40))\n    gff_feature: Column = Column(String(40))\n</code></pre>"},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Analysis.analysis_id","title":"<code>analysis_id = Column(SMALLINT(5), primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Analysis.created","title":"<code>created = Column(DateTime)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Analysis.db","title":"<code>db = Column(String(120))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Analysis.db_file","title":"<code>db_file = Column(String(120))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Analysis.db_version","title":"<code>db_version = Column(String(40))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Analysis.gff_feature","title":"<code>gff_feature = Column(String(40))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Analysis.gff_source","title":"<code>gff_source = Column(String(40))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Analysis.logic_name","title":"<code>logic_name = Column(String(128), nullable=False, unique=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Analysis.module","title":"<code>module = Column(String(80))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Analysis.module_version","title":"<code>module_version = Column(String(40))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Analysis.parameters","title":"<code>parameters = Column(Text)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Analysis.program","title":"<code>program = Column(String(80))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Analysis.program_file","title":"<code>program_file = Column(String(80))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Analysis.program_version","title":"<code>program_version = Column(String(40))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.AnalysisDescription","title":"<code>AnalysisDescription</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/core/models.py</code> <pre><code>class AnalysisDescription(Base):\n    __tablename__ = \"analysis_description\"\n\n    analysis_id: Column = Column(\n        SMALLINT(5),\n        ForeignKey(\"analysis.analysis_id\"),\n        primary_key=True,\n        nullable=False,\n        unique=True,\n    )\n    description: Column = Column(Text)\n    display_label: Column = Column(String(255), nullable=False)\n    displayable: Column = Column(TINYINT(1), nullable=False, server_default=text(\"'1'\"))\n    web_data: Column = Column(Text)\n</code></pre>"},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.AnalysisDescription.analysis_id","title":"<code>analysis_id = Column(SMALLINT(5), ForeignKey('analysis.analysis_id'), primary_key=True, nullable=False, unique=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.AnalysisDescription.description","title":"<code>description = Column(Text)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.AnalysisDescription.display_label","title":"<code>display_label = Column(String(255), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.AnalysisDescription.displayable","title":"<code>displayable = Column(TINYINT(1), nullable=False, server_default=(text(\"'1'\")))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.AnalysisDescription.web_data","title":"<code>web_data = Column(Text)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Assembly","title":"<code>Assembly</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/core/models.py</code> <pre><code>class Assembly(Base):\n    __tablename__ = \"assembly\"\n    __table_args__ = (\n        Index(\"asm_seq_region_idx\", \"asm_seq_region_id\", \"asm_start\"),\n        Index(\n            \"asm_all_idx\",\n            \"asm_seq_region_id\",\n            \"cmp_seq_region_id\",\n            \"asm_start\",\n            \"asm_end\",\n            \"cmp_start\",\n            \"cmp_end\",\n            \"ori\",\n            unique=True,\n        ),\n    )\n\n    asm_seq_region_id: Column = Column(\n        INTEGER(10),\n        ForeignKey(\"seq_region.seq_region_id\"),\n        primary_key=True,\n        nullable=False,\n    )\n    cmp_seq_region_id: Column = Column(\n        INTEGER(10),\n        ForeignKey(\"seq_region.seq_region_id\"),\n        primary_key=True,\n        nullable=False,\n    )\n    asm_start: Column = Column(INTEGER(10), primary_key=True, nullable=False)\n    asm_end: Column = Column(INTEGER(10), primary_key=True, nullable=False)\n    cmp_start: Column = Column(INTEGER(10), primary_key=True, nullable=False)\n    cmp_end: Column = Column(INTEGER(10), primary_key=True, nullable=False)\n    ori: Column = Column(TINYINT(4), primary_key=True, nullable=False)\n</code></pre>"},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Assembly.asm_end","title":"<code>asm_end = Column(INTEGER(10), primary_key=True, nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Assembly.asm_seq_region_id","title":"<code>asm_seq_region_id = Column(INTEGER(10), ForeignKey('seq_region.seq_region_id'), primary_key=True, nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Assembly.asm_start","title":"<code>asm_start = Column(INTEGER(10), primary_key=True, nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Assembly.cmp_end","title":"<code>cmp_end = Column(INTEGER(10), primary_key=True, nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Assembly.cmp_seq_region_id","title":"<code>cmp_seq_region_id = Column(INTEGER(10), ForeignKey('seq_region.seq_region_id'), primary_key=True, nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Assembly.cmp_start","title":"<code>cmp_start = Column(INTEGER(10), primary_key=True, nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Assembly.ori","title":"<code>ori = Column(TINYINT(4), primary_key=True, nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.AssemblyException","title":"<code>AssemblyException</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/core/models.py</code> <pre><code>class AssemblyException(Base):\n    __tablename__ = \"assembly_exception\"\n    __table_args__ = (\n        Index(\"ex_idx\", \"exc_seq_region_id\", \"exc_seq_region_start\"),\n        Index(\"sr_idx\", \"seq_region_id\", \"seq_region_start\"),\n    )\n\n    assembly_exception_id: Column = Column(INTEGER(10), primary_key=True)\n    seq_region_id: Column = Column(\n        ForeignKey(\"seq_region.seq_region_id\"),\n        nullable=False,\n    )\n    seq_region_start: Column = Column(INTEGER(10), nullable=False)\n    seq_region_end: Column = Column(INTEGER(10), nullable=False)\n    exc_type: Column = Column(Enum(\"HAP\", \"PAR\", \"PATCH_FIX\", \"PATCH_NOVEL\"), nullable=False)\n    exc_seq_region_id: Column = Column(\n        ForeignKey(\"seq_region.seq_region_id\"),\n        nullable=False,\n    )\n    exc_seq_region_start: Column = Column(INTEGER(10), nullable=False)\n    exc_seq_region_end: Column = Column(INTEGER(10), nullable=False)\n    ori: Column = Column(INTEGER(11), nullable=False)\n\n    exc_seq_region = relationship(\n        \"SeqRegion\",\n        primaryjoin=\"AssemblyException.exc_seq_region_id == SeqRegion.seq_region_id\",\n    )\n    seq_region = relationship(\n        \"SeqRegion\",\n        primaryjoin=\"AssemblyException.seq_region_id == SeqRegion.seq_region_id\",\n    )\n</code></pre>"},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.AssemblyException.assembly_exception_id","title":"<code>assembly_exception_id = Column(INTEGER(10), primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.AssemblyException.exc_seq_region","title":"<code>exc_seq_region = relationship('SeqRegion', primaryjoin='AssemblyException.exc_seq_region_id == SeqRegion.seq_region_id')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.AssemblyException.exc_seq_region_end","title":"<code>exc_seq_region_end = Column(INTEGER(10), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.AssemblyException.exc_seq_region_id","title":"<code>exc_seq_region_id = Column(ForeignKey('seq_region.seq_region_id'), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.AssemblyException.exc_seq_region_start","title":"<code>exc_seq_region_start = Column(INTEGER(10), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.AssemblyException.exc_type","title":"<code>exc_type = Column(Enum('HAP', 'PAR', 'PATCH_FIX', 'PATCH_NOVEL'), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.AssemblyException.ori","title":"<code>ori = Column(INTEGER(11), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.AssemblyException.seq_region","title":"<code>seq_region = relationship('SeqRegion', primaryjoin='AssemblyException.seq_region_id == SeqRegion.seq_region_id')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.AssemblyException.seq_region_end","title":"<code>seq_region_end = Column(INTEGER(10), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.AssemblyException.seq_region_id","title":"<code>seq_region_id = Column(ForeignKey('seq_region.seq_region_id'), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.AssemblyException.seq_region_start","title":"<code>seq_region_start = Column(INTEGER(10), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.AssociatedGroup","title":"<code>AssociatedGroup</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/core/models.py</code> <pre><code>class AssociatedGroup(Base):\n    __tablename__ = \"associated_group\"\n\n    associated_group_id: Column = Column(INTEGER(10), primary_key=True)\n    description: Column = Column(String(128))\n</code></pre>"},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.AssociatedGroup.associated_group_id","title":"<code>associated_group_id = Column(INTEGER(10), primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.AssociatedGroup.description","title":"<code>description = Column(String(128))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.AssociatedXref","title":"<code>AssociatedXref</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/core/models.py</code> <pre><code>class AssociatedXref(Base):\n    __tablename__ = \"associated_xref\"\n    __table_args__ = (\n        Index(\n            \"object_associated_source_type_idx\",\n            \"object_xref_id\",\n            \"xref_id\",\n            \"source_xref_id\",\n            \"condition_type\",\n            \"associated_group_id\",\n            unique=True,\n        ),\n    )\n\n    associated_xref_id: Column = Column(INTEGER(10), primary_key=True)\n    object_xref_id: Column = Column(\n        ForeignKey(\"object_xref.object_xref_id\"),\n        nullable=False,\n        index=True,\n        server_default=text(\"'0'\"),\n    )\n    xref_id: Column = Column(\n        ForeignKey(\"xref.xref_id\"),\n        nullable=False,\n        index=True,\n        server_default=text(\"'0'\"),\n    )\n    source_xref_id: Column = Column(INTEGER(10), index=True)\n    condition_type: Column = Column(String(128))\n    associated_group_id: Column = Column(\n        ForeignKey(\"associated_group.associated_group_id\"),\n        index=True,\n    )\n    rank: Column = Column(INTEGER(10), server_default=text(\"'0'\"))\n\n    associated_group = relationship(\n        \"AssociatedGroup\",\n        primaryjoin=\"AssociatedXref.associated_group_id == AssociatedGroup.associated_group_id\",\n    )\n    object_xref = relationship(\n        \"ObjectXref\",\n        primaryjoin=\"AssociatedXref.object_xref_id == ObjectXref.object_xref_id\",\n    )\n    xref = relationship(\"Xref\", primaryjoin=\"AssociatedXref.xref_id == Xref.xref_id\")\n</code></pre>"},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.AssociatedXref.associated_group","title":"<code>associated_group = relationship('AssociatedGroup', primaryjoin='AssociatedXref.associated_group_id == AssociatedGroup.associated_group_id')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.AssociatedXref.associated_group_id","title":"<code>associated_group_id = Column(ForeignKey('associated_group.associated_group_id'), index=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.AssociatedXref.associated_xref_id","title":"<code>associated_xref_id = Column(INTEGER(10), primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.AssociatedXref.condition_type","title":"<code>condition_type = Column(String(128))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.AssociatedXref.object_xref","title":"<code>object_xref = relationship('ObjectXref', primaryjoin='AssociatedXref.object_xref_id == ObjectXref.object_xref_id')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.AssociatedXref.object_xref_id","title":"<code>object_xref_id = Column(ForeignKey('object_xref.object_xref_id'), nullable=False, index=True, server_default=(text(\"'0'\")))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.AssociatedXref.rank","title":"<code>rank = Column(INTEGER(10), server_default=(text(\"'0'\")))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.AssociatedXref.source_xref_id","title":"<code>source_xref_id = Column(INTEGER(10), index=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.AssociatedXref.xref","title":"<code>xref = relationship('Xref', primaryjoin='AssociatedXref.xref_id == Xref.xref_id')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.AssociatedXref.xref_id","title":"<code>xref_id = Column(ForeignKey('xref.xref_id'), nullable=False, index=True, server_default=(text(\"'0'\")))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.AttribType","title":"<code>AttribType</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/core/models.py</code> <pre><code>class AttribType(Base):\n    __tablename__ = \"attrib_type\"\n\n    attrib_type_id: Column = Column(SMALLINT(5), primary_key=True)\n    code: Column = Column(String(20), nullable=False, unique=True, server_default=text(\"''\"))\n    name: Column = Column(String(255), nullable=False, server_default=text(\"''\"))\n    description: Column = Column(Text)\n\n    seq_region_attrib = relationship(\"SeqRegionAttrib\", back_populates=\"attrib_type\")\n</code></pre>"},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.AttribType.attrib_type_id","title":"<code>attrib_type_id = Column(SMALLINT(5), primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.AttribType.code","title":"<code>code = Column(String(20), nullable=False, unique=True, server_default=(text(\"''\")))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.AttribType.description","title":"<code>description = Column(Text)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.AttribType.name","title":"<code>name = Column(String(255), nullable=False, server_default=(text(\"''\")))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.AttribType.seq_region_attrib","title":"<code>seq_region_attrib = relationship('SeqRegionAttrib', back_populates='attrib_type')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Biotype","title":"<code>Biotype</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/core/models.py</code> <pre><code>class Biotype(Base):\n    __tablename__ = \"biotype\"\n    __table_args__ = (Index(\"name_type_idx\", \"name\", \"object_type\", unique=True),)\n\n    biotype_id: Column = Column(INTEGER(10), primary_key=True)\n    name: Column = Column(String(64), nullable=False)\n    object_type: Column = Column(Enum(\"gene\", \"transcript\"), nullable=False, server_default=text(\"'gene'\"))\n    db_type: Column = Column(\n        SET(\n            \"cdna\",\n            \"core\",\n            \"coreexpressionatlas\",\n            \"coreexpressionest\",\n            \"coreexpressiongnf\",\n            \"funcgen\",\n            \"otherfeatures\",\n            \"rnaseq\",\n            \"variation\",\n            \"vega\",\n            \"presite\",\n            \"sangervega\",\n        ),\n        nullable=False,\n        server_default=text(\"'core'\"),\n    )\n    attrib_type_id: Column = Column(INTEGER(11))\n    description: Column = Column(Text)\n    biotype_group: Column = Column(\n        Enum(\n            \"coding\",\n            \"pseudogene\",\n            \"snoncoding\",\n            \"lnoncoding\",\n            \"mnoncoding\",\n            \"LRG\",\n            \"undefined\",\n            \"no_group\",\n        )\n    )\n    so_acc: Column = Column(String(64))\n    so_term: Column = Column(String(1023))\n</code></pre>"},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Biotype.attrib_type_id","title":"<code>attrib_type_id = Column(INTEGER(11))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Biotype.biotype_group","title":"<code>biotype_group = Column(Enum('coding', 'pseudogene', 'snoncoding', 'lnoncoding', 'mnoncoding', 'LRG', 'undefined', 'no_group'))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Biotype.biotype_id","title":"<code>biotype_id = Column(INTEGER(10), primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Biotype.db_type","title":"<code>db_type = Column(SET('cdna', 'core', 'coreexpressionatlas', 'coreexpressionest', 'coreexpressiongnf', 'funcgen', 'otherfeatures', 'rnaseq', 'variation', 'vega', 'presite', 'sangervega'), nullable=False, server_default=(text(\"'core'\")))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Biotype.description","title":"<code>description = Column(Text)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Biotype.name","title":"<code>name = Column(String(64), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Biotype.object_type","title":"<code>object_type = Column(Enum('gene', 'transcript'), nullable=False, server_default=(text(\"'gene'\")))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Biotype.so_acc","title":"<code>so_acc = Column(String(64))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Biotype.so_term","title":"<code>so_term = Column(String(1023))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.CoordSystem","title":"<code>CoordSystem</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/core/models.py</code> <pre><code>class CoordSystem(Base):\n    __tablename__ = \"coord_system\"\n    __table_args__ = (\n        Index(\"name_idx\", \"name\", \"version\", \"species_id\", unique=True),\n        Index(\"rank_idx\", \"rank\", \"species_id\", unique=True),\n    )\n\n    coord_system_id: Column = Column(INTEGER(10), primary_key=True)\n    species_id: Column = Column(INTEGER(10), nullable=False, index=True, server_default=text(\"'1'\"))\n    name: Column = Column(String(40), nullable=False)\n    version: Column = Column(String(255))\n    rank: Column = Column(INTEGER(11), nullable=False)\n    attrib: Column = Column(SET(\"default_version\", \"sequence_level\"))\n    # Many to one relationship\n    seq_region = relationship(\"SeqRegion\", back_populates=\"coord_system\")\n    meta = relationship(\"Meta\", back_populates=\"coord_system\")\n</code></pre>"},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.CoordSystem.attrib","title":"<code>attrib = Column(SET('default_version', 'sequence_level'))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.CoordSystem.coord_system_id","title":"<code>coord_system_id = Column(INTEGER(10), primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.CoordSystem.meta","title":"<code>meta = relationship('Meta', back_populates='coord_system')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.CoordSystem.name","title":"<code>name = Column(String(40), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.CoordSystem.rank","title":"<code>rank = Column(INTEGER(11), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.CoordSystem.seq_region","title":"<code>seq_region = relationship('SeqRegion', back_populates='coord_system')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.CoordSystem.species_id","title":"<code>species_id = Column(INTEGER(10), nullable=False, index=True, server_default=(text(\"'1'\")))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.CoordSystem.version","title":"<code>version = Column(String(255))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.DNAAlignFeatureAttrib","title":"<code>DNAAlignFeatureAttrib</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/core/models.py</code> <pre><code>class DNAAlignFeatureAttrib(Base):\n    __tablename__ = \"dna_align_feature_attrib\"\n    __table_args__ = (\n        Index(\n            \"dna_align_feature_attribx\",\n            \"dna_align_feature_id\",\n            \"attrib_type_id\",\n            \"value\",\n            unique=True,\n            mysql_length={\"value\": 10},\n        ),\n        Index(\"ditag_type_val_idx\", \"attrib_type_id\", \"value\", mysql_length={\"value\": 10}),\n        Index(\"ditag_value_idx\", \"value\", mysql_length=10),\n    )\n\n    dna_align_feature_id: Column = Column(\n        INTEGER(10),\n        ForeignKey(\"dna_align_feature.dna_align_feature_id\"),\n        nullable=False,\n        index=True,\n        primary_key=True,\n    )\n    attrib_type_id: Column = Column(SMALLINT(5), nullable=False, primary_key=True)\n    value: Column = Column(String(500), nullable=False, primary_key=True)\n</code></pre>"},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.DNAAlignFeatureAttrib.attrib_type_id","title":"<code>attrib_type_id = Column(SMALLINT(5), nullable=False, primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.DNAAlignFeatureAttrib.dna_align_feature_id","title":"<code>dna_align_feature_id = Column(INTEGER(10), ForeignKey('dna_align_feature.dna_align_feature_id'), nullable=False, index=True, primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.DNAAlignFeatureAttrib.value","title":"<code>value = Column(String(500), nullable=False, primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.DataFile","title":"<code>DataFile</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/core/models.py</code> <pre><code>class DataFile(Base):\n    __tablename__ = \"data_file\"\n    __table_args__ = (\n        Index(\n            \"df_unq_idx\",\n            \"coord_system_id\",\n            \"analysis_id\",\n            \"name\",\n            \"file_type\",\n            unique=True,\n        ),\n    )\n\n    data_file_id: Column = Column(INTEGER(10), primary_key=True)\n    coord_system_id: Column = Column(\n        ForeignKey(\"coord_system.coord_system_id\"),\n        nullable=False,\n    )\n    analysis_id: Column = Column(\n        ForeignKey(\"analysis.analysis_id\"),\n        nullable=False,\n        index=True,\n    )\n    name: Column = Column(String(100), nullable=False, index=True)\n    version_lock: Column = Column(TINYINT(1), nullable=False, server_default=text(\"'0'\"))\n    absolute: Column = Column(TINYINT(1), nullable=False, server_default=text(\"'0'\"))\n    url: Column = Column(Text)\n    file_type: Column = Column(Enum(\"BAM\", \"BAMCOV\", \"BIGBED\", \"BIGWIG\", \"VCF\"))\n\n    analysis = relationship(\"Analysis\", primaryjoin=\"DataFile.analysis_id == Analysis.analysis_id\")\n    coord_system = relationship(\n        \"CoordSystem\",\n        primaryjoin=\"DataFile.coord_system_id == CoordSystem.coord_system_id\",\n    )\n</code></pre>"},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.DataFile.absolute","title":"<code>absolute = Column(TINYINT(1), nullable=False, server_default=(text(\"'0'\")))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.DataFile.analysis","title":"<code>analysis = relationship('Analysis', primaryjoin='DataFile.analysis_id == Analysis.analysis_id')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.DataFile.analysis_id","title":"<code>analysis_id = Column(ForeignKey('analysis.analysis_id'), nullable=False, index=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.DataFile.coord_system","title":"<code>coord_system = relationship('CoordSystem', primaryjoin='DataFile.coord_system_id == CoordSystem.coord_system_id')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.DataFile.coord_system_id","title":"<code>coord_system_id = Column(ForeignKey('coord_system.coord_system_id'), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.DataFile.data_file_id","title":"<code>data_file_id = Column(INTEGER(10), primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.DataFile.file_type","title":"<code>file_type = Column(Enum('BAM', 'BAMCOV', 'BIGBED', 'BIGWIG', 'VCF'))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.DataFile.name","title":"<code>name = Column(String(100), nullable=False, index=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.DataFile.url","title":"<code>url = Column(Text)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.DataFile.version_lock","title":"<code>version_lock = Column(TINYINT(1), nullable=False, server_default=(text(\"'0'\")))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.DensityFeature","title":"<code>DensityFeature</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/core/models.py</code> <pre><code>class DensityFeature(Base):\n    __tablename__ = \"density_feature\"\n    __table_args__ = (\n        Index(\"density_seq_region_idx\", \"density_type_id\", \"seq_region_id\", \"seq_region_start\"),\n    )\n\n    density_feature_id: Column = Column(INTEGER(10), primary_key=True)\n    density_type_id: Column = Column(\n        ForeignKey(\"density_type.density_type_id\"),\n        nullable=False,\n    )\n    seq_region_id: Column = Column(\n        ForeignKey(\"seq_region.seq_region_id\"),\n        nullable=False,\n        index=True,\n    )\n    seq_region_start: Column = Column(INTEGER(10), nullable=False)\n    seq_region_end: Column = Column(INTEGER(10), nullable=False)\n    density_value: Column = Column(Float, nullable=False)\n\n    density_type = relationship(\n        \"DensityType\",\n        primaryjoin=\"DensityFeature.density_type_id == DensityType.density_type_id\",\n    )\n    seq_region = relationship(\n        \"SeqRegion\",\n        primaryjoin=\"DensityFeature.seq_region_id == SeqRegion.seq_region_id\",\n    )\n</code></pre>"},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.DensityFeature.density_feature_id","title":"<code>density_feature_id = Column(INTEGER(10), primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.DensityFeature.density_type","title":"<code>density_type = relationship('DensityType', primaryjoin='DensityFeature.density_type_id == DensityType.density_type_id')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.DensityFeature.density_type_id","title":"<code>density_type_id = Column(ForeignKey('density_type.density_type_id'), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.DensityFeature.density_value","title":"<code>density_value = Column(Float, nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.DensityFeature.seq_region","title":"<code>seq_region = relationship('SeqRegion', primaryjoin='DensityFeature.seq_region_id == SeqRegion.seq_region_id')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.DensityFeature.seq_region_end","title":"<code>seq_region_end = Column(INTEGER(10), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.DensityFeature.seq_region_id","title":"<code>seq_region_id = Column(ForeignKey('seq_region.seq_region_id'), nullable=False, index=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.DensityFeature.seq_region_start","title":"<code>seq_region_start = Column(INTEGER(10), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.DensityType","title":"<code>DensityType</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/core/models.py</code> <pre><code>class DensityType(Base):\n    __tablename__ = \"density_type\"\n    __table_args__ = (Index(\"analysis_idx\", \"analysis_id\", \"block_size\", \"region_features\", unique=True),)\n\n    density_type_id: Column = Column(INTEGER(10), primary_key=True)\n    analysis_id: Column = Column(\n        ForeignKey(\"analysis.analysis_id\"),\n        nullable=False,\n    )\n    block_size: Column = Column(INTEGER(11), nullable=False)\n    region_features: Column = Column(INTEGER(11), nullable=False)\n    value_type: Column = Column(Enum(\"sum\", \"ratio\"), nullable=False)\n\n    analysis = relationship(\"Analysis\", primaryjoin=\"DensityType.analysis_id == Analysis.analysis_id\")\n</code></pre>"},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.DensityType.analysis","title":"<code>analysis = relationship('Analysis', primaryjoin='DensityType.analysis_id == Analysis.analysis_id')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.DensityType.analysis_id","title":"<code>analysis_id = Column(ForeignKey('analysis.analysis_id'), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.DensityType.block_size","title":"<code>block_size = Column(INTEGER(11), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.DensityType.density_type_id","title":"<code>density_type_id = Column(INTEGER(10), primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.DensityType.region_features","title":"<code>region_features = Column(INTEGER(11), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.DensityType.value_type","title":"<code>value_type = Column(Enum('sum', 'ratio'), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.DependentXref","title":"<code>DependentXref</code>","text":"<p>               Bases: <code>ObjectXref</code></p> Source code in <code>src/python/ensembl/core/models.py</code> <pre><code>class DependentXref(ObjectXref):\n    __tablename__ = \"dependent_xref\"\n\n    object_xref_id: Column = Column(\n        ForeignKey(\"object_xref.object_xref_id\"),\n        primary_key=True,\n    )\n    master_xref_id: Column = Column(\n        ForeignKey(\"xref.xref_id\"),\n        nullable=False,\n        index=True,\n    )\n    dependent_xref_id: Column = Column(\n        ForeignKey(\"xref.xref_id\"),\n        nullable=False,\n        index=True,\n    )\n</code></pre>"},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.DependentXref.dependent_xref_id","title":"<code>dependent_xref_id = Column(ForeignKey('xref.xref_id'), nullable=False, index=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.DependentXref.master_xref_id","title":"<code>master_xref_id = Column(ForeignKey('xref.xref_id'), nullable=False, index=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.DependentXref.object_xref_id","title":"<code>object_xref_id = Column(ForeignKey('object_xref.object_xref_id'), primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Ditag","title":"<code>Ditag</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/core/models.py</code> <pre><code>class Ditag(Base):\n    __tablename__ = \"ditag\"\n\n    ditag_id: Column = Column(INTEGER(10), primary_key=True)\n    name: Column = Column(String(30), nullable=False)\n    tag_type: Column = Column(\"type\", String(30), nullable=False)\n    tag_count: Column = Column(SMALLINT(6), nullable=False, server_default=text(\"'1'\"))\n    sequence: Column = Column(TINYTEXT, nullable=False)\n</code></pre>"},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Ditag.ditag_id","title":"<code>ditag_id = Column(INTEGER(10), primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Ditag.name","title":"<code>name = Column(String(30), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Ditag.sequence","title":"<code>sequence = Column(TINYTEXT, nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Ditag.tag_count","title":"<code>tag_count = Column(SMALLINT(6), nullable=False, server_default=(text(\"'1'\")))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Ditag.tag_type","title":"<code>tag_type = Column('type', String(30), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.DitagFeature","title":"<code>DitagFeature</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/core/models.py</code> <pre><code>class DitagFeature(Base):\n    __tablename__ = \"ditag_feature\"\n    __table_args__ = (Index(\"ditag_seq_region_idx\", \"seq_region_id\", \"seq_region_start\", \"seq_region_end\"),)\n\n    ditag_feature_id: Column = Column(INTEGER(10), primary_key=True)\n    ditag_id: Column = Column(\n        ForeignKey(\"ditag.ditag_id\"),\n        nullable=False,\n        index=True,\n        server_default=text(\"'0'\"),\n    )\n    ditag_pair_id: Column = Column(INTEGER(10), nullable=False, index=True, server_default=text(\"'0'\"))\n    seq_region_id: Column = Column(\n        ForeignKey(\"seq_region.seq_region_id\"),\n        nullable=False,\n        server_default=text(\"'0'\"),\n    )\n    seq_region_start: Column = Column(INTEGER(10), nullable=False, server_default=text(\"'0'\"))\n    seq_region_end: Column = Column(INTEGER(10), nullable=False, server_default=text(\"'0'\"))\n    seq_region_strand: Column = Column(TINYINT(1), nullable=False, server_default=text(\"'0'\"))\n    analysis_id: Column = Column(\n        ForeignKey(\"analysis.analysis_id\"),\n        nullable=False,\n        index=True,\n        server_default=text(\"'0'\"),\n    )\n    hit_start: Column = Column(INTEGER(10), nullable=False, server_default=text(\"'0'\"))\n    hit_end: Column = Column(INTEGER(10), nullable=False, server_default=text(\"'0'\"))\n    hit_strand: Column = Column(TINYINT(1), nullable=False, server_default=text(\"'0'\"))\n    cigar_line: Column = Column(TINYTEXT, nullable=False)\n    ditag_side: Column = Column(Enum(\"F\", \"L\", \"R\"), nullable=False)\n\n    analysis = relationship(\"Analysis\", primaryjoin=\"DitagFeature.analysis_id == Analysis.analysis_id\")\n    ditag = relationship(\"Ditag\", primaryjoin=\"DitagFeature.ditag_id == Ditag.ditag_id\")\n    seq_region = relationship(\n        \"SeqRegion\", primaryjoin=\"DitagFeature.seq_region_id == SeqRegion.seq_region_id\"\n    )\n</code></pre>"},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.DitagFeature.analysis","title":"<code>analysis = relationship('Analysis', primaryjoin='DitagFeature.analysis_id == Analysis.analysis_id')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.DitagFeature.analysis_id","title":"<code>analysis_id = Column(ForeignKey('analysis.analysis_id'), nullable=False, index=True, server_default=(text(\"'0'\")))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.DitagFeature.cigar_line","title":"<code>cigar_line = Column(TINYTEXT, nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.DitagFeature.ditag","title":"<code>ditag = relationship('Ditag', primaryjoin='DitagFeature.ditag_id == Ditag.ditag_id')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.DitagFeature.ditag_feature_id","title":"<code>ditag_feature_id = Column(INTEGER(10), primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.DitagFeature.ditag_id","title":"<code>ditag_id = Column(ForeignKey('ditag.ditag_id'), nullable=False, index=True, server_default=(text(\"'0'\")))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.DitagFeature.ditag_pair_id","title":"<code>ditag_pair_id = Column(INTEGER(10), nullable=False, index=True, server_default=(text(\"'0'\")))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.DitagFeature.ditag_side","title":"<code>ditag_side = Column(Enum('F', 'L', 'R'), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.DitagFeature.hit_end","title":"<code>hit_end = Column(INTEGER(10), nullable=False, server_default=(text(\"'0'\")))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.DitagFeature.hit_start","title":"<code>hit_start = Column(INTEGER(10), nullable=False, server_default=(text(\"'0'\")))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.DitagFeature.hit_strand","title":"<code>hit_strand = Column(TINYINT(1), nullable=False, server_default=(text(\"'0'\")))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.DitagFeature.seq_region","title":"<code>seq_region = relationship('SeqRegion', primaryjoin='DitagFeature.seq_region_id == SeqRegion.seq_region_id')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.DitagFeature.seq_region_end","title":"<code>seq_region_end = Column(INTEGER(10), nullable=False, server_default=(text(\"'0'\")))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.DitagFeature.seq_region_id","title":"<code>seq_region_id = Column(ForeignKey('seq_region.seq_region_id'), nullable=False, server_default=(text(\"'0'\")))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.DitagFeature.seq_region_start","title":"<code>seq_region_start = Column(INTEGER(10), nullable=False, server_default=(text(\"'0'\")))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.DitagFeature.seq_region_strand","title":"<code>seq_region_strand = Column(TINYINT(1), nullable=False, server_default=(text(\"'0'\")))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Dna","title":"<code>Dna</code>","text":"<p>               Bases: <code>SeqRegion</code></p> Source code in <code>src/python/ensembl/core/models.py</code> <pre><code>class Dna(SeqRegion):\n    __tablename__ = \"dna\"\n\n    seq_region_id: Column = Column(\n        ForeignKey(\"seq_region.seq_region_id\"),\n        primary_key=True,\n    )\n    sequence: Column = Column(LONGTEXT, nullable=False)\n\n    seq_region = relationship(\n        \"SeqRegion\",\n        uselist=False,\n        primaryjoin=\"Dna.seq_region_id == SeqRegion.seq_region_id\",\n    )\n</code></pre>"},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Dna.seq_region","title":"<code>seq_region = relationship('SeqRegion', uselist=False, primaryjoin='Dna.seq_region_id == SeqRegion.seq_region_id')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Dna.seq_region_id","title":"<code>seq_region_id = Column(ForeignKey('seq_region.seq_region_id'), primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Dna.sequence","title":"<code>sequence = Column(LONGTEXT, nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.DnaAlignFeature","title":"<code>DnaAlignFeature</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/core/models.py</code> <pre><code>class DnaAlignFeature(Base):\n    __tablename__ = \"dna_align_feature\"\n    __table_args__ = (\n        Index(\"dna_align_seq_region_idx_2\", \"seq_region_id\", \"seq_region_start\"),\n        Index(\n            \"dna_align_seq_region_idx\",\n            \"seq_region_id\",\n            \"analysis_id\",\n            \"seq_region_start\",\n            \"score\",\n        ),\n    )\n\n    dna_align_feature_id: Column = Column(INTEGER(10), primary_key=True)\n    seq_region_id: Column = Column(\n        ForeignKey(\"seq_region.seq_region_id\"),\n        nullable=False,\n    )\n    seq_region_start: Column = Column(INTEGER(10), nullable=False)\n    seq_region_end: Column = Column(INTEGER(10), nullable=False)\n    seq_region_strand: Column = Column(TINYINT(1), nullable=False)\n    hit_start: Column = Column(INTEGER(11), nullable=False)\n    hit_end: Column = Column(INTEGER(11), nullable=False)\n    hit_strand: Column = Column(TINYINT(1), nullable=False)\n    hit_name: Column = Column(String(40), nullable=False, index=True)\n    analysis_id: Column = Column(\n        ForeignKey(\"analysis.analysis_id\"),\n        nullable=False,\n        index=True,\n    )\n    score: Column = Column(Float(asdecimal=True))\n    evalue: Column = Column(Float(asdecimal=True))\n    perc_ident: Column = Column(Float)\n    cigar_line: Column = Column(Text)\n    external_db_id: Column = Column(\n        ForeignKey(\"external_db.external_db_id\"),\n        index=True,\n    )\n    hcoverage: Column = Column(Float(asdecimal=True))\n    align_type: Column = Column(Enum(\"ensembl\", \"cigar\", \"vulgar\", \"mdtag\"), server_default=text(\"'ensembl'\"))\n\n    analysis = relationship(\"Analysis\", primaryjoin=\"DnaAlignFeature.analysis_id == Analysis.analysis_id\")\n    external_db = relationship(\n        \"ExternalDb\",\n        primaryjoin=\"DnaAlignFeature.external_db_id == ExternalDb.external_db_id\",\n    )\n    seq_region = relationship(\n        \"SeqRegion\",\n        primaryjoin=\"DnaAlignFeature.seq_region_id == SeqRegion.seq_region_id\",\n    )\n</code></pre>"},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.DnaAlignFeature.align_type","title":"<code>align_type = Column(Enum('ensembl', 'cigar', 'vulgar', 'mdtag'), server_default=(text(\"'ensembl'\")))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.DnaAlignFeature.analysis","title":"<code>analysis = relationship('Analysis', primaryjoin='DnaAlignFeature.analysis_id == Analysis.analysis_id')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.DnaAlignFeature.analysis_id","title":"<code>analysis_id = Column(ForeignKey('analysis.analysis_id'), nullable=False, index=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.DnaAlignFeature.cigar_line","title":"<code>cigar_line = Column(Text)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.DnaAlignFeature.dna_align_feature_id","title":"<code>dna_align_feature_id = Column(INTEGER(10), primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.DnaAlignFeature.evalue","title":"<code>evalue = Column(Float(asdecimal=True))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.DnaAlignFeature.external_db","title":"<code>external_db = relationship('ExternalDb', primaryjoin='DnaAlignFeature.external_db_id == ExternalDb.external_db_id')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.DnaAlignFeature.external_db_id","title":"<code>external_db_id = Column(ForeignKey('external_db.external_db_id'), index=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.DnaAlignFeature.hcoverage","title":"<code>hcoverage = Column(Float(asdecimal=True))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.DnaAlignFeature.hit_end","title":"<code>hit_end = Column(INTEGER(11), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.DnaAlignFeature.hit_name","title":"<code>hit_name = Column(String(40), nullable=False, index=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.DnaAlignFeature.hit_start","title":"<code>hit_start = Column(INTEGER(11), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.DnaAlignFeature.hit_strand","title":"<code>hit_strand = Column(TINYINT(1), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.DnaAlignFeature.perc_ident","title":"<code>perc_ident = Column(Float)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.DnaAlignFeature.score","title":"<code>score = Column(Float(asdecimal=True))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.DnaAlignFeature.seq_region","title":"<code>seq_region = relationship('SeqRegion', primaryjoin='DnaAlignFeature.seq_region_id == SeqRegion.seq_region_id')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.DnaAlignFeature.seq_region_end","title":"<code>seq_region_end = Column(INTEGER(10), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.DnaAlignFeature.seq_region_id","title":"<code>seq_region_id = Column(ForeignKey('seq_region.seq_region_id'), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.DnaAlignFeature.seq_region_start","title":"<code>seq_region_start = Column(INTEGER(10), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.DnaAlignFeature.seq_region_strand","title":"<code>seq_region_strand = Column(TINYINT(1), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Exon","title":"<code>Exon</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/core/models.py</code> <pre><code>class Exon(Base):\n    __tablename__ = \"exon\"\n    __table_args__ = (\n        Index(\"exon_seq_region_idx\", \"seq_region_id\", \"seq_region_start\"),\n        Index(\"exon_stable_id_idx\", \"stable_id\", \"version\"),\n    )\n\n    exon_id: Column = Column(INTEGER(10), primary_key=True)\n    seq_region_id: Column = Column(\n        ForeignKey(\"seq_region.seq_region_id\"),\n        nullable=False,\n    )\n    seq_region_start: Column = Column(INTEGER(10), nullable=False)\n    seq_region_end: Column = Column(INTEGER(10), nullable=False)\n    seq_region_strand: Column = Column(TINYINT(2), nullable=False)\n    phase: Column = Column(TINYINT(2), nullable=False)\n    end_phase: Column = Column(TINYINT(2), nullable=False)\n    is_current: Column = Column(TINYINT(1), nullable=False, server_default=text(\"'1'\"))\n    is_constitutive: Column = Column(TINYINT(1), nullable=False, server_default=text(\"'0'\"))\n    stable_id: Column = Column(String(128))\n    version: Column = Column(SMALLINT(5))\n    created_date: Column = Column(DateTime)\n    modified_date: Column = Column(DateTime)\n\n    seq_region = relationship(\"SeqRegion\", primaryjoin=\"Exon.seq_region_id == SeqRegion.seq_region_id\")\n</code></pre>"},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Exon.created_date","title":"<code>created_date = Column(DateTime)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Exon.end_phase","title":"<code>end_phase = Column(TINYINT(2), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Exon.exon_id","title":"<code>exon_id = Column(INTEGER(10), primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Exon.is_constitutive","title":"<code>is_constitutive = Column(TINYINT(1), nullable=False, server_default=(text(\"'0'\")))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Exon.is_current","title":"<code>is_current = Column(TINYINT(1), nullable=False, server_default=(text(\"'1'\")))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Exon.modified_date","title":"<code>modified_date = Column(DateTime)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Exon.phase","title":"<code>phase = Column(TINYINT(2), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Exon.seq_region","title":"<code>seq_region = relationship('SeqRegion', primaryjoin='Exon.seq_region_id == SeqRegion.seq_region_id')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Exon.seq_region_end","title":"<code>seq_region_end = Column(INTEGER(10), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Exon.seq_region_id","title":"<code>seq_region_id = Column(ForeignKey('seq_region.seq_region_id'), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Exon.seq_region_start","title":"<code>seq_region_start = Column(INTEGER(10), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Exon.seq_region_strand","title":"<code>seq_region_strand = Column(TINYINT(2), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Exon.stable_id","title":"<code>stable_id = Column(String(128))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Exon.version","title":"<code>version = Column(SMALLINT(5))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.ExonTranscript","title":"<code>ExonTranscript</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/core/models.py</code> <pre><code>class ExonTranscript(Base):\n    __tablename__ = \"exon_transcript\"\n\n    exon_id: Column = Column(\n        ForeignKey(\"exon.exon_id\"),\n        primary_key=True,\n        nullable=False,\n        index=True,\n    )\n    transcript_id: Column = Column(\n        ForeignKey(\"transcript.transcript_id\"),\n        primary_key=True,\n        nullable=False,\n        index=True,\n    )\n    rank: Column = Column(INTEGER(10), primary_key=True, nullable=False)\n\n    exon = relationship(\"Exon\", primaryjoin=\"ExonTranscript.exon_id == Exon.exon_id\")\n    transcript = relationship(\n        \"Transcript\",\n        primaryjoin=\"ExonTranscript.transcript_id == Transcript.transcript_id\",\n    )\n</code></pre>"},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.ExonTranscript.exon","title":"<code>exon = relationship('Exon', primaryjoin='ExonTranscript.exon_id == Exon.exon_id')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.ExonTranscript.exon_id","title":"<code>exon_id = Column(ForeignKey('exon.exon_id'), primary_key=True, nullable=False, index=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.ExonTranscript.rank","title":"<code>rank = Column(INTEGER(10), primary_key=True, nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.ExonTranscript.transcript","title":"<code>transcript = relationship('Transcript', primaryjoin='ExonTranscript.transcript_id == Transcript.transcript_id')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.ExonTranscript.transcript_id","title":"<code>transcript_id = Column(ForeignKey('transcript.transcript_id'), primary_key=True, nullable=False, index=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.ExternalDb","title":"<code>ExternalDb</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/core/models.py</code> <pre><code>class ExternalDb(Base):\n    __tablename__ = \"external_db\"\n    __table_args__ = (Index(\"db_name_db_release_idx\", \"db_name\", \"db_release\", unique=True),)\n\n    external_db_id: Column = Column(INTEGER(10), primary_key=True)\n    db_name: Column = Column(String(100), nullable=False)\n    db_release: Column = Column(String(255))\n    status: Column = Column(Enum(\"KNOWNXREF\", \"KNOWN\", \"XREF\", \"PRED\", \"ORTH\", \"PSEUDO\"), nullable=False)\n    priority: Column = Column(INTEGER(11), nullable=False)\n    db_display_name: Column = Column(String(255))\n    db_type: Column = Column(\n        \"type\",\n        Enum(\n            \"ARRAY\",\n            \"ALT_TRANS\",\n            \"ALT_GENE\",\n            \"MISC\",\n            \"LIT\",\n            \"PRIMARY_DB_SYNONYM\",\n            \"ENSEMBL\",\n        ),\n        nullable=False,\n    )\n    secondary_db_name: Column = Column(String(255))\n    secondary_db_table: Column = Column(String(255))\n    description: Column = Column(Text)\n    seq_region_synonym = relationship(\"SeqRegionSynonym\", back_populates=\"external_db\")\n</code></pre>"},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.ExternalDb.db_display_name","title":"<code>db_display_name = Column(String(255))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.ExternalDb.db_name","title":"<code>db_name = Column(String(100), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.ExternalDb.db_release","title":"<code>db_release = Column(String(255))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.ExternalDb.db_type","title":"<code>db_type = Column('type', Enum('ARRAY', 'ALT_TRANS', 'ALT_GENE', 'MISC', 'LIT', 'PRIMARY_DB_SYNONYM', 'ENSEMBL'), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.ExternalDb.description","title":"<code>description = Column(Text)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.ExternalDb.external_db_id","title":"<code>external_db_id = Column(INTEGER(10), primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.ExternalDb.priority","title":"<code>priority = Column(INTEGER(11), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.ExternalDb.secondary_db_name","title":"<code>secondary_db_name = Column(String(255))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.ExternalDb.secondary_db_table","title":"<code>secondary_db_table = Column(String(255))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.ExternalDb.seq_region_synonym","title":"<code>seq_region_synonym = relationship('SeqRegionSynonym', back_populates='external_db')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.ExternalDb.status","title":"<code>status = Column(Enum('KNOWNXREF', 'KNOWN', 'XREF', 'PRED', 'ORTH', 'PSEUDO'), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.ExternalSynonym","title":"<code>ExternalSynonym</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/core/models.py</code> <pre><code>class ExternalSynonym(Base):\n    __tablename__ = \"external_synonym\"\n\n    xref_id: Column = Column(\n        ForeignKey(\"xref.xref_id\"),\n        primary_key=True,\n        nullable=False,\n    )\n    synonym: Column = Column(String(100), primary_key=True, nullable=False, index=True)\n\n    xref = relationship(\"Xref\", primaryjoin=\"ExternalSynonym.xref_id == Xref.xref_id\")\n</code></pre>"},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.ExternalSynonym.synonym","title":"<code>synonym = Column(String(100), primary_key=True, nullable=False, index=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.ExternalSynonym.xref","title":"<code>xref = relationship('Xref', primaryjoin='ExternalSynonym.xref_id == Xref.xref_id')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.ExternalSynonym.xref_id","title":"<code>xref_id = Column(ForeignKey('xref.xref_id'), primary_key=True, nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Gene","title":"<code>Gene</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/core/models.py</code> <pre><code>class Gene(Base):\n    __tablename__ = \"gene\"\n    __table_args__ = (\n        Index(\"gene_seq_region_idx\", \"seq_region_id\", \"seq_region_start\"),\n        Index(\"gene_stable_id_idx\", \"stable_id\", \"version\"),\n    )\n\n    gene_id: Column = Column(INTEGER(10), primary_key=True)\n    biotype: Column = Column(String(40), nullable=False)\n    analysis_id: Column = Column(\n        ForeignKey(\"analysis.analysis_id\"),\n        nullable=False,\n        index=True,\n    )\n    seq_region_id: Column = Column(\n        ForeignKey(\"seq_region.seq_region_id\"),\n        nullable=False,\n    )\n    seq_region_start: Column = Column(INTEGER(10), nullable=False)\n    seq_region_end: Column = Column(INTEGER(10), nullable=False)\n    seq_region_strand: Column = Column(TINYINT(2), nullable=False)\n    display_xref_id: Column = Column(ForeignKey(\"xref.xref_id\"), index=True)\n    source: Column = Column(String(40), nullable=False)\n    description: Column = Column(Text)\n    is_current: Column = Column(TINYINT(1), nullable=False, server_default=text(\"'1'\"))\n    canonical_transcript_id: Column = Column(\n        ForeignKey(\"transcript.transcript_id\"),\n        nullable=False,\n        index=True,\n    )\n    stable_id: Column = Column(String(128))\n    version: Column = Column(SMALLINT(5))\n    created_date: Column = Column(DateTime)\n    modified_date: Column = Column(DateTime)\n\n    analysis = relationship(\"Analysis\", primaryjoin=\"Gene.analysis_id == Analysis.analysis_id\")\n    canonical_transcript = relationship(\n        \"Transcript\",\n        primaryjoin=\"Gene.canonical_transcript_id == Transcript.transcript_id\",\n    )\n    display_xref = relationship(\"Xref\", primaryjoin=\"Gene.display_xref_id == Xref.xref_id\")\n    seq_region = relationship(\"SeqRegion\", primaryjoin=\"Gene.seq_region_id == SeqRegion.seq_region_id\")\n</code></pre>"},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Gene.analysis","title":"<code>analysis = relationship('Analysis', primaryjoin='Gene.analysis_id == Analysis.analysis_id')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Gene.analysis_id","title":"<code>analysis_id = Column(ForeignKey('analysis.analysis_id'), nullable=False, index=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Gene.biotype","title":"<code>biotype = Column(String(40), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Gene.canonical_transcript","title":"<code>canonical_transcript = relationship('Transcript', primaryjoin='Gene.canonical_transcript_id == Transcript.transcript_id')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Gene.canonical_transcript_id","title":"<code>canonical_transcript_id = Column(ForeignKey('transcript.transcript_id'), nullable=False, index=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Gene.created_date","title":"<code>created_date = Column(DateTime)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Gene.description","title":"<code>description = Column(Text)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Gene.display_xref","title":"<code>display_xref = relationship('Xref', primaryjoin='Gene.display_xref_id == Xref.xref_id')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Gene.display_xref_id","title":"<code>display_xref_id = Column(ForeignKey('xref.xref_id'), index=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Gene.gene_id","title":"<code>gene_id = Column(INTEGER(10), primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Gene.is_current","title":"<code>is_current = Column(TINYINT(1), nullable=False, server_default=(text(\"'1'\")))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Gene.modified_date","title":"<code>modified_date = Column(DateTime)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Gene.seq_region","title":"<code>seq_region = relationship('SeqRegion', primaryjoin='Gene.seq_region_id == SeqRegion.seq_region_id')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Gene.seq_region_end","title":"<code>seq_region_end = Column(INTEGER(10), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Gene.seq_region_id","title":"<code>seq_region_id = Column(ForeignKey('seq_region.seq_region_id'), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Gene.seq_region_start","title":"<code>seq_region_start = Column(INTEGER(10), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Gene.seq_region_strand","title":"<code>seq_region_strand = Column(TINYINT(2), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Gene.source","title":"<code>source = Column(String(40), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Gene.stable_id","title":"<code>stable_id = Column(String(128))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Gene.version","title":"<code>version = Column(SMALLINT(5))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.GeneAttrib","title":"<code>GeneAttrib</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/core/models.py</code> <pre><code>class GeneAttrib(Base):\n    __tablename__ = \"gene_attrib\"\n    __table_args__ = (\n        Index(\"gene_attribx\", \"gene_id\", \"attrib_type_id\", \"value\", unique=True, mysql_length={\"value\": 10}),\n        Index(\"gene_attrib_type_val_idx\", \"attrib_type_id\", \"value\", mysql_length={\"value\": 10}),\n        Index(\"gene_attrib_value_idx\", \"value\", mysql_length=10),\n    )\n\n    gene_id: Column = Column(\n        INTEGER(10),\n        ForeignKey(\"gene.gene_id\"),\n        nullable=False,\n        index=True,\n        server_default=text(\"'0'\"),\n        primary_key=True,\n    )\n    attrib_type_id: Column = Column(\n        SMALLINT(5),\n        ForeignKey(\"attrib_type.attrib_type_id\"),\n        nullable=False,\n        server_default=text(\"'0'\"),\n        primary_key=True,\n    )\n    value: Column = Column(String(500), nullable=False, primary_key=True)\n</code></pre>"},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.GeneAttrib.attrib_type_id","title":"<code>attrib_type_id = Column(SMALLINT(5), ForeignKey('attrib_type.attrib_type_id'), nullable=False, server_default=(text(\"'0'\")), primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.GeneAttrib.gene_id","title":"<code>gene_id = Column(INTEGER(10), ForeignKey('gene.gene_id'), nullable=False, index=True, server_default=(text(\"'0'\")), primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.GeneAttrib.value","title":"<code>value = Column(String(500), nullable=False, primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.GenomeStatistics","title":"<code>GenomeStatistics</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/core/models.py</code> <pre><code>class GenomeStatistics(Base):\n    __tablename__ = \"genome_statistics\"\n    __table_args__ = (Index(\"stats_uniq\", \"statistic\", \"attrib_type_id\", \"species_id\", unique=True),)\n\n    genome_statistics_id: Column = Column(INTEGER(10), primary_key=True)\n    statistic: Column = Column(String(128), nullable=False)\n    value: Column = Column(BIGINT(11), nullable=False, server_default=text(\"'0'\"))\n    species_id: Column = Column(INTEGER(10), server_default=text(\"'1'\"))\n    attrib_type_id: Column = Column(INTEGER(10))\n    timestamp: Column = Column(DateTime)\n</code></pre>"},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.GenomeStatistics.attrib_type_id","title":"<code>attrib_type_id = Column(INTEGER(10))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.GenomeStatistics.genome_statistics_id","title":"<code>genome_statistics_id = Column(INTEGER(10), primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.GenomeStatistics.species_id","title":"<code>species_id = Column(INTEGER(10), server_default=(text(\"'1'\")))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.GenomeStatistics.statistic","title":"<code>statistic = Column(String(128), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.GenomeStatistics.timestamp","title":"<code>timestamp = Column(DateTime)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.GenomeStatistics.value","title":"<code>value = Column(BIGINT(11), nullable=False, server_default=(text(\"'0'\")))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.IdentityXref","title":"<code>IdentityXref</code>","text":"<p>               Bases: <code>ObjectXref</code></p> Source code in <code>src/python/ensembl/core/models.py</code> <pre><code>class IdentityXref(ObjectXref):\n    __tablename__ = \"identity_xref\"\n\n    object_xref_id: Column = Column(\n        ForeignKey(\"object_xref.object_xref_id\"),\n        primary_key=True,\n    )\n    xref_identity: Column = Column(INTEGER(5))\n    ensembl_identity: Column = Column(INTEGER(5))\n    xref_start: Column = Column(INTEGER(11))\n    xref_end: Column = Column(INTEGER(11))\n    ensembl_start: Column = Column(INTEGER(11))\n    ensembl_end: Column = Column(INTEGER(11))\n    cigar_line: Column = Column(Text)\n    score: Column = Column(Float(asdecimal=True))\n    evalue: Column = Column(Float(asdecimal=True))\n\n    object_xref = relationship(\n        \"ObjectXref\",\n        uselist=False,\n        primaryjoin=\"IdentityXref.object_xref_id == ObjectXref.object_xref_id\",\n    )\n</code></pre>"},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.IdentityXref.cigar_line","title":"<code>cigar_line = Column(Text)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.IdentityXref.ensembl_end","title":"<code>ensembl_end = Column(INTEGER(11))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.IdentityXref.ensembl_identity","title":"<code>ensembl_identity = Column(INTEGER(5))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.IdentityXref.ensembl_start","title":"<code>ensembl_start = Column(INTEGER(11))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.IdentityXref.evalue","title":"<code>evalue = Column(Float(asdecimal=True))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.IdentityXref.object_xref","title":"<code>object_xref = relationship('ObjectXref', uselist=False, primaryjoin='IdentityXref.object_xref_id == ObjectXref.object_xref_id')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.IdentityXref.object_xref_id","title":"<code>object_xref_id = Column(ForeignKey('object_xref.object_xref_id'), primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.IdentityXref.score","title":"<code>score = Column(Float(asdecimal=True))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.IdentityXref.xref_end","title":"<code>xref_end = Column(INTEGER(11))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.IdentityXref.xref_identity","title":"<code>xref_identity = Column(INTEGER(5))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.IdentityXref.xref_start","title":"<code>xref_start = Column(INTEGER(11))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.IntronSupportingEvidence","title":"<code>IntronSupportingEvidence</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/core/models.py</code> <pre><code>class IntronSupportingEvidence(Base):\n    __tablename__ = \"intron_supporting_evidence\"\n    __table_args__ = (\n        Index(\n            \"analysis_id\",\n            \"analysis_id\",\n            \"seq_region_id\",\n            \"seq_region_start\",\n            \"seq_region_end\",\n            \"seq_region_strand\",\n            \"hit_name\",\n            unique=True,\n        ),\n        Index(\"intron_evidence_seq_region_idx\", \"seq_region_id\", \"seq_region_start\"),\n    )\n\n    intron_supporting_evidence_id: Column = Column(INTEGER(10), primary_key=True)\n    analysis_id: Column = Column(\n        ForeignKey(\"analysis.analysis_id\"),\n        nullable=False,\n    )\n    seq_region_id: Column = Column(\n        ForeignKey(\"seq_region.seq_region_id\"),\n        nullable=False,\n    )\n    seq_region_start: Column = Column(INTEGER(10), nullable=False)\n    seq_region_end: Column = Column(INTEGER(10), nullable=False)\n    seq_region_strand: Column = Column(TINYINT(2), nullable=False)\n    hit_name: Column = Column(String(100), nullable=False)\n    score: Column = Column(DECIMAL(10, 3))\n    score_type: Column = Column(Enum(\"NONE\", \"DEPTH\"), server_default=text(\"'NONE'\"))\n    is_splice_canonical: Column = Column(TINYINT(1), nullable=False, server_default=text(\"'0'\"))\n\n    analysis = relationship(\n        \"Analysis\",\n        primaryjoin=\"IntronSupportingEvidence.analysis_id == Analysis.analysis_id\",\n    )\n    seq_region = relationship(\n        \"SeqRegion\",\n        primaryjoin=\"IntronSupportingEvidence.seq_region_id == SeqRegion.seq_region_id\",\n    )\n</code></pre>"},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.IntronSupportingEvidence.analysis","title":"<code>analysis = relationship('Analysis', primaryjoin='IntronSupportingEvidence.analysis_id == Analysis.analysis_id')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.IntronSupportingEvidence.analysis_id","title":"<code>analysis_id = Column(ForeignKey('analysis.analysis_id'), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.IntronSupportingEvidence.hit_name","title":"<code>hit_name = Column(String(100), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.IntronSupportingEvidence.intron_supporting_evidence_id","title":"<code>intron_supporting_evidence_id = Column(INTEGER(10), primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.IntronSupportingEvidence.is_splice_canonical","title":"<code>is_splice_canonical = Column(TINYINT(1), nullable=False, server_default=(text(\"'0'\")))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.IntronSupportingEvidence.score","title":"<code>score = Column(DECIMAL(10, 3))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.IntronSupportingEvidence.score_type","title":"<code>score_type = Column(Enum('NONE', 'DEPTH'), server_default=(text(\"'NONE'\")))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.IntronSupportingEvidence.seq_region","title":"<code>seq_region = relationship('SeqRegion', primaryjoin='IntronSupportingEvidence.seq_region_id == SeqRegion.seq_region_id')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.IntronSupportingEvidence.seq_region_end","title":"<code>seq_region_end = Column(INTEGER(10), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.IntronSupportingEvidence.seq_region_id","title":"<code>seq_region_id = Column(ForeignKey('seq_region.seq_region_id'), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.IntronSupportingEvidence.seq_region_start","title":"<code>seq_region_start = Column(INTEGER(10), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.IntronSupportingEvidence.seq_region_strand","title":"<code>seq_region_strand = Column(TINYINT(2), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Karyotype","title":"<code>Karyotype</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/core/models.py</code> <pre><code>class Karyotype(Base):\n    __tablename__ = \"karyotype\"\n    __table_args__ = (Index(\"region_band_idx\", \"seq_region_id\", \"band\"),)\n\n    karyotype_id: Column = Column(INTEGER(10), primary_key=True)\n    seq_region_id: Column = Column(\n        ForeignKey(\"seq_region.seq_region_id\"),\n        nullable=False,\n    )\n    seq_region_start: Column = Column(INTEGER(10), nullable=False)\n    seq_region_end: Column = Column(INTEGER(10), nullable=False)\n    band: Column = Column(String(40))\n    stain: Column = Column(String(40))\n\n    seq_region = relationship(\"SeqRegion\", primaryjoin=\"Karyotype.seq_region_id == SeqRegion.seq_region_id\")\n</code></pre>"},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Karyotype.band","title":"<code>band = Column(String(40))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Karyotype.karyotype_id","title":"<code>karyotype_id = Column(INTEGER(10), primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Karyotype.seq_region","title":"<code>seq_region = relationship('SeqRegion', primaryjoin='Karyotype.seq_region_id == SeqRegion.seq_region_id')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Karyotype.seq_region_end","title":"<code>seq_region_end = Column(INTEGER(10), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Karyotype.seq_region_id","title":"<code>seq_region_id = Column(ForeignKey('seq_region.seq_region_id'), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Karyotype.seq_region_start","title":"<code>seq_region_start = Column(INTEGER(10), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Karyotype.stain","title":"<code>stain = Column(String(40))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Map","title":"<code>Map</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/core/models.py</code> <pre><code>class Map(Base):\n    __tablename__ = \"map\"\n\n    map_id: Column = Column(INTEGER(10), primary_key=True)\n    map_name: Column = Column(String(30), nullable=False)\n</code></pre>"},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Map.map_id","title":"<code>map_id = Column(INTEGER(10), primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Map.map_name","title":"<code>map_name = Column(String(30), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.MappingSession","title":"<code>MappingSession</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/core/models.py</code> <pre><code>class MappingSession(Base):\n    __tablename__ = \"mapping_session\"\n\n    mapping_session_id: Column = Column(INTEGER(10), primary_key=True)\n    old_db_name: Column = Column(String(80), nullable=False, server_default=text(\"''\"))\n    new_db_name: Column = Column(String(80), nullable=False, server_default=text(\"''\"))\n    old_release: Column = Column(String(5), nullable=False, server_default=text(\"''\"))\n    new_release: Column = Column(String(5), nullable=False, server_default=text(\"''\"))\n    old_assembly: Column = Column(String(80), nullable=False, server_default=text(\"''\"))\n    new_assembly: Column = Column(String(80), nullable=False, server_default=text(\"''\"))\n    created: Column = Column(DateTime, nullable=False)\n</code></pre>"},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.MappingSession.created","title":"<code>created = Column(DateTime, nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.MappingSession.mapping_session_id","title":"<code>mapping_session_id = Column(INTEGER(10), primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.MappingSession.new_assembly","title":"<code>new_assembly = Column(String(80), nullable=False, server_default=(text(\"''\")))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.MappingSession.new_db_name","title":"<code>new_db_name = Column(String(80), nullable=False, server_default=(text(\"''\")))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.MappingSession.new_release","title":"<code>new_release = Column(String(5), nullable=False, server_default=(text(\"''\")))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.MappingSession.old_assembly","title":"<code>old_assembly = Column(String(80), nullable=False, server_default=(text(\"''\")))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.MappingSession.old_db_name","title":"<code>old_db_name = Column(String(80), nullable=False, server_default=(text(\"''\")))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.MappingSession.old_release","title":"<code>old_release = Column(String(5), nullable=False, server_default=(text(\"''\")))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.MappingSet","title":"<code>MappingSet</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/core/models.py</code> <pre><code>class MappingSet(Base):\n    __tablename__ = \"mapping_set\"\n    __table_args__ = (Index(\"mapping_idx\", \"internal_schema_build\", \"external_schema_build\", unique=True),)\n\n    mapping_set_id: Column = Column(INTEGER(10), primary_key=True)\n    internal_schema_build: Column = Column(String(20), nullable=False)\n    external_schema_build: Column = Column(String(20), nullable=False)\n</code></pre>"},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.MappingSet.external_schema_build","title":"<code>external_schema_build = Column(String(20), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.MappingSet.internal_schema_build","title":"<code>internal_schema_build = Column(String(20), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.MappingSet.mapping_set_id","title":"<code>mapping_set_id = Column(INTEGER(10), primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Marker","title":"<code>Marker</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/core/models.py</code> <pre><code>class Marker(Base):\n    __tablename__ = \"marker\"\n    __table_args__ = (Index(\"marker_idx\", \"marker_id\", \"priority\"),)\n\n    marker_id: Column = Column(INTEGER(10), primary_key=True)\n    display_marker_synonym_id: Column = Column(\n        ForeignKey(\"marker_synonym.marker_synonym_id\"),\n        index=True,\n    )\n    left_primer: Column = Column(String(100), nullable=False)\n    right_primer: Column = Column(String(100), nullable=False)\n    min_primer_dist: Column = Column(INTEGER(10), nullable=False)\n    max_primer_dist: Column = Column(INTEGER(10), nullable=False)\n    priority: Column = Column(INTEGER(11))\n    marker_type: Column = Column(\"type\", Enum(\"est\", \"microsatellite\"))\n\n    display_marker_synonym = relationship(\n        \"MarkerSynonym\",\n        primaryjoin=\"Marker.display_marker_synonym_id == MarkerSynonym.marker_synonym_id\",\n    )\n</code></pre>"},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Marker.display_marker_synonym","title":"<code>display_marker_synonym = relationship('MarkerSynonym', primaryjoin='Marker.display_marker_synonym_id == MarkerSynonym.marker_synonym_id')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Marker.display_marker_synonym_id","title":"<code>display_marker_synonym_id = Column(ForeignKey('marker_synonym.marker_synonym_id'), index=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Marker.left_primer","title":"<code>left_primer = Column(String(100), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Marker.marker_id","title":"<code>marker_id = Column(INTEGER(10), primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Marker.marker_type","title":"<code>marker_type = Column('type', Enum('est', 'microsatellite'))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Marker.max_primer_dist","title":"<code>max_primer_dist = Column(INTEGER(10), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Marker.min_primer_dist","title":"<code>min_primer_dist = Column(INTEGER(10), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Marker.priority","title":"<code>priority = Column(INTEGER(11))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Marker.right_primer","title":"<code>right_primer = Column(String(100), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.MarkerFeature","title":"<code>MarkerFeature</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/core/models.py</code> <pre><code>class MarkerFeature(Base):\n    __tablename__ = \"marker_feature\"\n    __table_args__ = (Index(\"marker_seq_region_idx\", \"seq_region_id\", \"seq_region_start\"),)\n\n    marker_feature_id: Column = Column(INTEGER(10), primary_key=True)\n    marker_id: Column = Column(\n        ForeignKey(\"marker.marker_id\"),\n        nullable=False,\n        index=True,\n    )\n    seq_region_id: Column = Column(\n        ForeignKey(\"seq_region.seq_region_id\"),\n        nullable=False,\n    )\n    seq_region_start: Column = Column(INTEGER(10), nullable=False)\n    seq_region_end: Column = Column(INTEGER(10), nullable=False)\n    analysis_id: Column = Column(\n        ForeignKey(\"analysis.analysis_id\"),\n        nullable=False,\n        index=True,\n    )\n    map_weight: Column = Column(INTEGER(10))\n\n    analysis = relationship(\"Analysis\", primaryjoin=\"MarkerFeature.analysis_id == Analysis.analysis_id\")\n    marker = relationship(\"Marker\", primaryjoin=\"MarkerFeature.marker_id == Marker.marker_id\")\n    seq_region = relationship(\n        \"SeqRegion\",\n        primaryjoin=\"MarkerFeature.seq_region_id == SeqRegion.seq_region_id\",\n    )\n</code></pre>"},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.MarkerFeature.analysis","title":"<code>analysis = relationship('Analysis', primaryjoin='MarkerFeature.analysis_id == Analysis.analysis_id')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.MarkerFeature.analysis_id","title":"<code>analysis_id = Column(ForeignKey('analysis.analysis_id'), nullable=False, index=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.MarkerFeature.map_weight","title":"<code>map_weight = Column(INTEGER(10))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.MarkerFeature.marker","title":"<code>marker = relationship('Marker', primaryjoin='MarkerFeature.marker_id == Marker.marker_id')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.MarkerFeature.marker_feature_id","title":"<code>marker_feature_id = Column(INTEGER(10), primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.MarkerFeature.marker_id","title":"<code>marker_id = Column(ForeignKey('marker.marker_id'), nullable=False, index=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.MarkerFeature.seq_region","title":"<code>seq_region = relationship('SeqRegion', primaryjoin='MarkerFeature.seq_region_id == SeqRegion.seq_region_id')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.MarkerFeature.seq_region_end","title":"<code>seq_region_end = Column(INTEGER(10), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.MarkerFeature.seq_region_id","title":"<code>seq_region_id = Column(ForeignKey('seq_region.seq_region_id'), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.MarkerFeature.seq_region_start","title":"<code>seq_region_start = Column(INTEGER(10), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.MarkerMapLocation","title":"<code>MarkerMapLocation</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/core/models.py</code> <pre><code>class MarkerMapLocation(Base):\n    __tablename__ = \"marker_map_location\"\n    __table_args__ = (Index(\"map_idx\", \"map_id\", \"chromosome_name\", \"position\"),)\n\n    marker_id: Column = Column(\n        ForeignKey(\"marker.marker_id\"),\n        primary_key=True,\n        nullable=False,\n    )\n    map_id: Column = Column(\n        ForeignKey(\"map.map_id\"),\n        primary_key=True,\n        nullable=False,\n    )\n    chromosome_name: Column = Column(String(15), nullable=False)\n    marker_synonym_id: Column = Column(\n        ForeignKey(\"marker_synonym.marker_synonym_id\"),\n        nullable=False,\n        index=True,\n    )\n    position: Column = Column(String(15), nullable=False)\n    lod_score: Column = Column(Float(asdecimal=True))\n\n    map_r = relationship(\"Map\", primaryjoin=\"MarkerMapLocation.map_id == Map.map_id\")\n    marker = relationship(\"Marker\", primaryjoin=\"MarkerMapLocation.marker_id == Marker.marker_id\")\n    marker_synonym = relationship(\n        \"MarkerSynonym\",\n        primaryjoin=\"MarkerMapLocation.marker_synonym_id == MarkerSynonym.marker_synonym_id\",\n    )\n</code></pre>"},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.MarkerMapLocation.chromosome_name","title":"<code>chromosome_name = Column(String(15), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.MarkerMapLocation.lod_score","title":"<code>lod_score = Column(Float(asdecimal=True))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.MarkerMapLocation.map_id","title":"<code>map_id = Column(ForeignKey('map.map_id'), primary_key=True, nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.MarkerMapLocation.map_r","title":"<code>map_r = relationship('Map', primaryjoin='MarkerMapLocation.map_id == Map.map_id')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.MarkerMapLocation.marker","title":"<code>marker = relationship('Marker', primaryjoin='MarkerMapLocation.marker_id == Marker.marker_id')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.MarkerMapLocation.marker_id","title":"<code>marker_id = Column(ForeignKey('marker.marker_id'), primary_key=True, nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.MarkerMapLocation.marker_synonym","title":"<code>marker_synonym = relationship('MarkerSynonym', primaryjoin='MarkerMapLocation.marker_synonym_id == MarkerSynonym.marker_synonym_id')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.MarkerMapLocation.marker_synonym_id","title":"<code>marker_synonym_id = Column(ForeignKey('marker_synonym.marker_synonym_id'), nullable=False, index=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.MarkerMapLocation.position","title":"<code>position = Column(String(15), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.MarkerSynonym","title":"<code>MarkerSynonym</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/core/models.py</code> <pre><code>class MarkerSynonym(Base):\n    __tablename__ = \"marker_synonym\"\n    __table_args__ = (Index(\"marker_synonym_idx\", \"marker_synonym_id\", \"name\"),)\n\n    marker_synonym_id: Column = Column(INTEGER(10), primary_key=True)\n    marker_id: Column = Column(\n        ForeignKey(\"marker.marker_id\"),\n        nullable=False,\n        index=True,\n    )\n    source: Column = Column(String(20))\n    name: Column = Column(String(50))\n\n    marker = relationship(\"Marker\", primaryjoin=\"MarkerSynonym.marker_id == Marker.marker_id\")\n</code></pre>"},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.MarkerSynonym.marker","title":"<code>marker = relationship('Marker', primaryjoin='MarkerSynonym.marker_id == Marker.marker_id')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.MarkerSynonym.marker_id","title":"<code>marker_id = Column(ForeignKey('marker.marker_id'), nullable=False, index=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.MarkerSynonym.marker_synonym_id","title":"<code>marker_synonym_id = Column(INTEGER(10), primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.MarkerSynonym.name","title":"<code>name = Column(String(50))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.MarkerSynonym.source","title":"<code>source = Column(String(20))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Meta","title":"<code>Meta</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/core/models.py</code> <pre><code>class Meta(Base):\n    __tablename__ = \"meta\"\n    __table_args__ = (\n        Index(\"species_value_idx\", \"species_id\", \"meta_value\"),\n        Index(\"species_key_value_idx\", \"species_id\", \"meta_key\", \"meta_value\", unique=True),\n    )\n\n    meta_id: Column = Column(INTEGER(11), primary_key=True)\n    species_id: Column = Column(\n        ForeignKey(\"coord_system.species_id\"),\n        server_default=text(\"'1'\"),\n    )\n    meta_key: Column = Column(String(40), nullable=False)\n    meta_value: Column = Column(String(255), nullable=False)\n\n    coord_system = relationship(\"CoordSystem\", back_populates=\"meta\")\n</code></pre>"},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Meta.coord_system","title":"<code>coord_system = relationship('CoordSystem', back_populates='meta')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Meta.meta_id","title":"<code>meta_id = Column(INTEGER(11), primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Meta.meta_key","title":"<code>meta_key = Column(String(40), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Meta.meta_value","title":"<code>meta_value = Column(String(255), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Meta.species_id","title":"<code>species_id = Column(ForeignKey('coord_system.species_id'), server_default=(text(\"'1'\")))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.MetaCoord","title":"<code>MetaCoord</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/core/models.py</code> <pre><code>class MetaCoord(Base):\n    __tablename__ = \"meta_coord\"\n    __table_args__ = (Index(\"cs_table_name_idx\", \"coord_system_id\", \"table_name\", unique=True),)\n\n    table_name: Column = Column(String(40), primary_key=True, nullable=False)\n    coord_system_id: Column = Column(\n        INTEGER(10),\n        ForeignKey(\"coord_system.coord_system_id\"),\n        primary_key=True,\n        nullable=False,\n    )\n    max_length: Column = Column(INTEGER(11))\n</code></pre>"},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.MetaCoord.coord_system_id","title":"<code>coord_system_id = Column(INTEGER(10), ForeignKey('coord_system.coord_system_id'), primary_key=True, nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.MetaCoord.max_length","title":"<code>max_length = Column(INTEGER(11))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.MetaCoord.table_name","title":"<code>table_name = Column(String(40), primary_key=True, nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.MiscAttrib","title":"<code>MiscAttrib</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/core/models.py</code> <pre><code>class MiscAttrib(Base):\n    __tablename__ = \"misc_attrib\"\n    __table_args__ = (\n        Index(\"misc_attrib_type_val_idx\", \"attrib_type_id\", \"value\", mysql_length={\"value\": 10}),\n        Index(\n            \"misc_attribx\",\n            \"misc_feature_id\",\n            \"attrib_type_id\",\n            \"value\",\n            unique=True,\n            mysql_length={\"value\": 10},\n        ),\n        Index(\"misc_attrib_value_idx\", \"value\", mysql_length=10),\n    )\n\n    misc_feature_id: Column = Column(\n        INTEGER(10),\n        ForeignKey(\"misc_feature.misc_feature_id\"),\n        nullable=False,\n        index=True,\n        server_default=text(\"'0'\"),\n        primary_key=True,\n    )\n    attrib_type_id: Column = Column(\n        SMALLINT(5),\n        ForeignKey(\"attrib_type.attrib_type_id\"),\n        nullable=False,\n        server_default=text(\"'0'\"),\n        primary_key=True,\n    )\n    value: Column = Column(String(500), nullable=False, primary_key=True)\n</code></pre>"},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.MiscAttrib.attrib_type_id","title":"<code>attrib_type_id = Column(SMALLINT(5), ForeignKey('attrib_type.attrib_type_id'), nullable=False, server_default=(text(\"'0'\")), primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.MiscAttrib.misc_feature_id","title":"<code>misc_feature_id = Column(INTEGER(10), ForeignKey('misc_feature.misc_feature_id'), nullable=False, index=True, server_default=(text(\"'0'\")), primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.MiscAttrib.value","title":"<code>value = Column(String(500), nullable=False, primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.MiscFeature","title":"<code>MiscFeature</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/core/models.py</code> <pre><code>class MiscFeature(Base):\n    __tablename__ = \"misc_feature\"\n    __table_args__ = (Index(\"misc_seq_region_idx\", \"seq_region_id\", \"seq_region_start\"),)\n\n    misc_feature_id: Column = Column(INTEGER(10), primary_key=True)\n    seq_region_id: Column = Column(\n        ForeignKey(\"seq_region.seq_region_id\"),\n        nullable=False,\n        server_default=text(\"'0'\"),\n    )\n    seq_region_start: Column = Column(INTEGER(10), nullable=False, server_default=text(\"'0'\"))\n    seq_region_end: Column = Column(INTEGER(10), nullable=False, server_default=text(\"'0'\"))\n    seq_region_strand: Column = Column(TINYINT(4), nullable=False, server_default=text(\"'0'\"))\n\n    seq_region = relationship(\"SeqRegion\", primaryjoin=\"MiscFeature.seq_region_id == SeqRegion.seq_region_id\")\n</code></pre>"},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.MiscFeature.misc_feature_id","title":"<code>misc_feature_id = Column(INTEGER(10), primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.MiscFeature.seq_region","title":"<code>seq_region = relationship('SeqRegion', primaryjoin='MiscFeature.seq_region_id == SeqRegion.seq_region_id')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.MiscFeature.seq_region_end","title":"<code>seq_region_end = Column(INTEGER(10), nullable=False, server_default=(text(\"'0'\")))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.MiscFeature.seq_region_id","title":"<code>seq_region_id = Column(ForeignKey('seq_region.seq_region_id'), nullable=False, server_default=(text(\"'0'\")))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.MiscFeature.seq_region_start","title":"<code>seq_region_start = Column(INTEGER(10), nullable=False, server_default=(text(\"'0'\")))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.MiscFeature.seq_region_strand","title":"<code>seq_region_strand = Column(TINYINT(4), nullable=False, server_default=(text(\"'0'\")))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.MiscSet","title":"<code>MiscSet</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/core/models.py</code> <pre><code>class MiscSet(Base):\n    __tablename__ = \"misc_set\"\n\n    misc_set_id: Column = Column(SMALLINT(5), primary_key=True)\n    code: Column = Column(String(25), nullable=False, unique=True, server_default=text(\"''\"))\n    name: Column = Column(String(255), nullable=False, server_default=text(\"''\"))\n    description: Column = Column(Text, nullable=False)\n    max_length: Column = Column(INTEGER(10), nullable=False)\n</code></pre>"},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.MiscSet.code","title":"<code>code = Column(String(25), nullable=False, unique=True, server_default=(text(\"''\")))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.MiscSet.description","title":"<code>description = Column(Text, nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.MiscSet.max_length","title":"<code>max_length = Column(INTEGER(10), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.MiscSet.misc_set_id","title":"<code>misc_set_id = Column(SMALLINT(5), primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.MiscSet.name","title":"<code>name = Column(String(255), nullable=False, server_default=(text(\"''\")))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.ObjectXref","title":"<code>ObjectXref</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/core/models.py</code> <pre><code>class ObjectXref(Base):\n    __tablename__ = \"object_xref\"\n    __table_args__ = (\n        Index(\"ensembl_idx\", \"ensembl_object_type\", \"ensembl_id\"),\n        Index(\n            \"xref_idx\",\n            \"xref_id\",\n            \"ensembl_object_type\",\n            \"ensembl_id\",\n            \"analysis_id\",\n            unique=True,\n        ),\n    )\n\n    object_xref_id: Column = Column(INTEGER(10), primary_key=True)\n    ensembl_id: Column = Column(INTEGER(10), nullable=False)\n    ensembl_object_type: Column = Column(\n        Enum(\n            \"RawContig\",\n            \"Transcript\",\n            \"Gene\",\n            \"Translation\",\n            \"Operon\",\n            \"OperonTranscript\",\n            \"Marker\",\n            \"RNAProduct\",\n        ),\n        nullable=False,\n    )\n    xref_id: Column = Column(ForeignKey(\"xref.xref_id\"), nullable=False)\n    linkage_annotation: Column = Column(String(255))\n    analysis_id: Column = Column(\n        ForeignKey(\"analysis.analysis_id\"),\n        index=True,\n    )\n\n    analysis = relationship(\"Analysis\", primaryjoin=\"ObjectXref.analysis_id == Analysis.analysis_id\")\n    xref = relationship(\"Xref\", primaryjoin=\"ObjectXref.xref_id == Xref.xref_id\")\n</code></pre>"},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.ObjectXref.analysis","title":"<code>analysis = relationship('Analysis', primaryjoin='ObjectXref.analysis_id == Analysis.analysis_id')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.ObjectXref.analysis_id","title":"<code>analysis_id = Column(ForeignKey('analysis.analysis_id'), index=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.ObjectXref.ensembl_id","title":"<code>ensembl_id = Column(INTEGER(10), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.ObjectXref.ensembl_object_type","title":"<code>ensembl_object_type = Column(Enum('RawContig', 'Transcript', 'Gene', 'Translation', 'Operon', 'OperonTranscript', 'Marker', 'RNAProduct'), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.ObjectXref.linkage_annotation","title":"<code>linkage_annotation = Column(String(255))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.ObjectXref.object_xref_id","title":"<code>object_xref_id = Column(INTEGER(10), primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.ObjectXref.xref","title":"<code>xref = relationship('Xref', primaryjoin='ObjectXref.xref_id == Xref.xref_id')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.ObjectXref.xref_id","title":"<code>xref_id = Column(ForeignKey('xref.xref_id'), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.OntologyXref","title":"<code>OntologyXref</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/core/models.py</code> <pre><code>class OntologyXref(Base):\n    __tablename__ = \"ontology_xref\"\n    __table_args__ = (\n        Index(\n            \"object_source_type_idx\",\n            \"object_xref_id\",\n            \"source_xref_id\",\n            \"linkage_type\",\n            unique=True,\n        ),\n    )\n\n    object_xref_id: Column = Column(\n        INTEGER(10),\n        ForeignKey(\"object_xref.object_xref_id\"),\n        primary_key=True,\n        nullable=False,\n        index=True,\n        server_default=text(\"'0'\"),\n    )\n    source_xref_id: Column = Column(\n        INTEGER(10),\n        ForeignKey(\"xref.xref_id\"),\n        primary_key=True,\n        index=True,\n    )\n    linkage_type: Column = Column(String(3), primary_key=True)\n</code></pre>"},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.OntologyXref.linkage_type","title":"<code>linkage_type = Column(String(3), primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.OntologyXref.object_xref_id","title":"<code>object_xref_id = Column(INTEGER(10), ForeignKey('object_xref.object_xref_id'), primary_key=True, nullable=False, index=True, server_default=(text(\"'0'\")))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.OntologyXref.source_xref_id","title":"<code>source_xref_id = Column(INTEGER(10), ForeignKey('xref.xref_id'), primary_key=True, index=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Operon","title":"<code>Operon</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/core/models.py</code> <pre><code>class Operon(Base):\n    __tablename__ = \"operon\"\n    __table_args__ = (\n        Index(\"operon_seq_region_idx\", \"seq_region_id\", \"seq_region_start\"),\n        Index(\"operon_stable_id_idx\", \"stable_id\", \"version\"),\n    )\n\n    operon_id: Column = Column(INTEGER(10), primary_key=True)\n    seq_region_id: Column = Column(\n        ForeignKey(\"seq_region.seq_region_id\"),\n        nullable=False,\n    )\n    seq_region_start: Column = Column(INTEGER(10), nullable=False)\n    seq_region_end: Column = Column(INTEGER(10), nullable=False)\n    seq_region_strand: Column = Column(TINYINT(2), nullable=False)\n    display_label: Column = Column(String(255), index=True)\n    analysis_id: Column = Column(\n        ForeignKey(\"analysis.analysis_id\"),\n        nullable=False,\n        index=True,\n    )\n    stable_id: Column = Column(String(128))\n    version: Column = Column(SMALLINT(5))\n    created_date: Column = Column(DateTime)\n    modified_date: Column = Column(DateTime)\n\n    analysis = relationship(\"Analysis\", primaryjoin=\"Operon.analysis_id == Analysis.analysis_id\")\n    seq_region = relationship(\"SeqRegion\", primaryjoin=\"Operon.seq_region_id == SeqRegion.seq_region_id\")\n</code></pre>"},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Operon.analysis","title":"<code>analysis = relationship('Analysis', primaryjoin='Operon.analysis_id == Analysis.analysis_id')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Operon.analysis_id","title":"<code>analysis_id = Column(ForeignKey('analysis.analysis_id'), nullable=False, index=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Operon.created_date","title":"<code>created_date = Column(DateTime)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Operon.display_label","title":"<code>display_label = Column(String(255), index=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Operon.modified_date","title":"<code>modified_date = Column(DateTime)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Operon.operon_id","title":"<code>operon_id = Column(INTEGER(10), primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Operon.seq_region","title":"<code>seq_region = relationship('SeqRegion', primaryjoin='Operon.seq_region_id == SeqRegion.seq_region_id')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Operon.seq_region_end","title":"<code>seq_region_end = Column(INTEGER(10), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Operon.seq_region_id","title":"<code>seq_region_id = Column(ForeignKey('seq_region.seq_region_id'), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Operon.seq_region_start","title":"<code>seq_region_start = Column(INTEGER(10), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Operon.seq_region_strand","title":"<code>seq_region_strand = Column(TINYINT(2), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Operon.stable_id","title":"<code>stable_id = Column(String(128))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Operon.version","title":"<code>version = Column(SMALLINT(5))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.OperonTranscript","title":"<code>OperonTranscript</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/core/models.py</code> <pre><code>class OperonTranscript(Base):\n    __tablename__ = \"operon_transcript\"\n    __table_args__ = (\n        Index(\"operon_transcript_stable_id_idx\", \"stable_id\", \"version\"),\n        Index(\"operon_transcript_seq_region_idx\", \"seq_region_id\", \"seq_region_start\"),\n    )\n\n    operon_transcript_id: Column = Column(INTEGER(10), primary_key=True)\n    seq_region_id: Column = Column(\n        ForeignKey(\"seq_region.seq_region_id\"),\n        nullable=False,\n    )\n    seq_region_start: Column = Column(INTEGER(10), nullable=False)\n    seq_region_end: Column = Column(INTEGER(10), nullable=False)\n    seq_region_strand: Column = Column(TINYINT(2), nullable=False)\n    operon_id: Column = Column(\n        ForeignKey(\"operon.operon_id\"),\n        nullable=False,\n        index=True,\n    )\n    display_label: Column = Column(String(255))\n    analysis_id: Column = Column(\n        ForeignKey(\"analysis.analysis_id\"),\n        nullable=False,\n        index=True,\n    )\n    stable_id: Column = Column(String(128))\n    version: Column = Column(SMALLINT(5))\n    created_date: Column = Column(DateTime)\n    modified_date: Column = Column(DateTime)\n\n    analysis = relationship(\"Analysis\", primaryjoin=\"OperonTranscript.analysis_id == Analysis.analysis_id\")\n    operon = relationship(\"Operon\", primaryjoin=\"OperonTranscript.operon_id == Operon.operon_id\")\n    seq_region = relationship(\n        \"SeqRegion\",\n        primaryjoin=\"OperonTranscript.seq_region_id == SeqRegion.seq_region_id\",\n    )\n</code></pre>"},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.OperonTranscript.analysis","title":"<code>analysis = relationship('Analysis', primaryjoin='OperonTranscript.analysis_id == Analysis.analysis_id')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.OperonTranscript.analysis_id","title":"<code>analysis_id = Column(ForeignKey('analysis.analysis_id'), nullable=False, index=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.OperonTranscript.created_date","title":"<code>created_date = Column(DateTime)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.OperonTranscript.display_label","title":"<code>display_label = Column(String(255))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.OperonTranscript.modified_date","title":"<code>modified_date = Column(DateTime)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.OperonTranscript.operon","title":"<code>operon = relationship('Operon', primaryjoin='OperonTranscript.operon_id == Operon.operon_id')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.OperonTranscript.operon_id","title":"<code>operon_id = Column(ForeignKey('operon.operon_id'), nullable=False, index=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.OperonTranscript.operon_transcript_id","title":"<code>operon_transcript_id = Column(INTEGER(10), primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.OperonTranscript.seq_region","title":"<code>seq_region = relationship('SeqRegion', primaryjoin='OperonTranscript.seq_region_id == SeqRegion.seq_region_id')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.OperonTranscript.seq_region_end","title":"<code>seq_region_end = Column(INTEGER(10), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.OperonTranscript.seq_region_id","title":"<code>seq_region_id = Column(ForeignKey('seq_region.seq_region_id'), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.OperonTranscript.seq_region_start","title":"<code>seq_region_start = Column(INTEGER(10), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.OperonTranscript.seq_region_strand","title":"<code>seq_region_strand = Column(TINYINT(2), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.OperonTranscript.stable_id","title":"<code>stable_id = Column(String(128))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.OperonTranscript.version","title":"<code>version = Column(SMALLINT(5))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.PeptideArchive","title":"<code>PeptideArchive</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/core/models.py</code> <pre><code>class PeptideArchive(Base):\n    __tablename__ = \"peptide_archive\"\n\n    peptide_archive_id: Column = Column(INTEGER(10), primary_key=True)\n    md5_checksum: Column = Column(String(32), index=True)\n    peptide_seq: Column = Column(MEDIUMTEXT, nullable=False)\n</code></pre>"},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.PeptideArchive.md5_checksum","title":"<code>md5_checksum = Column(String(32), index=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.PeptideArchive.peptide_archive_id","title":"<code>peptide_archive_id = Column(INTEGER(10), primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.PeptideArchive.peptide_seq","title":"<code>peptide_seq = Column(MEDIUMTEXT, nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.PredictionExon","title":"<code>PredictionExon</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/core/models.py</code> <pre><code>class PredictionExon(Base):\n    __tablename__ = \"prediction_exon\"\n    __table_args__ = (Index(\"prediction_exon_seq_region_idx\", \"seq_region_id\", \"seq_region_start\"),)\n\n    prediction_exon_id: Column = Column(INTEGER(10), primary_key=True)\n    prediction_transcript_id: Column = Column(\n        ForeignKey(\"prediction_transcript.prediction_transcript_id\"),\n        nullable=False,\n        index=True,\n    )\n    exon_rank: Column = Column(SMALLINT(5), nullable=False)\n    seq_region_id: Column = Column(\n        ForeignKey(\"seq_region.seq_region_id\"),\n        nullable=False,\n    )\n    seq_region_start: Column = Column(INTEGER(10), nullable=False)\n    seq_region_end: Column = Column(INTEGER(10), nullable=False)\n    seq_region_strand: Column = Column(TINYINT(4), nullable=False)\n    start_phase: Column = Column(TINYINT(4), nullable=False)\n    score: Column = Column(Float(asdecimal=True))\n    p_value: Column = Column(Float(asdecimal=True))\n\n    prediction_transcript = relationship(\n        \"PredictionTranscript\",\n        primaryjoin=(\n            \"PredictionExon.prediction_transcript_id ==\" \"PredictionTranscript.prediction_transcript_id\"\n        ),\n    )\n    seq_region = relationship(\n        \"SeqRegion\",\n        primaryjoin=\"PredictionExon.seq_region_id == SeqRegion.seq_region_id\",\n    )\n</code></pre>"},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.PredictionExon.exon_rank","title":"<code>exon_rank = Column(SMALLINT(5), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.PredictionExon.p_value","title":"<code>p_value = Column(Float(asdecimal=True))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.PredictionExon.prediction_exon_id","title":"<code>prediction_exon_id = Column(INTEGER(10), primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.PredictionExon.prediction_transcript","title":"<code>prediction_transcript = relationship('PredictionTranscript', primaryjoin='PredictionExon.prediction_transcript_id ==PredictionTranscript.prediction_transcript_id')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.PredictionExon.prediction_transcript_id","title":"<code>prediction_transcript_id = Column(ForeignKey('prediction_transcript.prediction_transcript_id'), nullable=False, index=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.PredictionExon.score","title":"<code>score = Column(Float(asdecimal=True))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.PredictionExon.seq_region","title":"<code>seq_region = relationship('SeqRegion', primaryjoin='PredictionExon.seq_region_id == SeqRegion.seq_region_id')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.PredictionExon.seq_region_end","title":"<code>seq_region_end = Column(INTEGER(10), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.PredictionExon.seq_region_id","title":"<code>seq_region_id = Column(ForeignKey('seq_region.seq_region_id'), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.PredictionExon.seq_region_start","title":"<code>seq_region_start = Column(INTEGER(10), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.PredictionExon.seq_region_strand","title":"<code>seq_region_strand = Column(TINYINT(4), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.PredictionExon.start_phase","title":"<code>start_phase = Column(TINYINT(4), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.PredictionTranscript","title":"<code>PredictionTranscript</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/core/models.py</code> <pre><code>class PredictionTranscript(Base):\n    __tablename__ = \"prediction_transcript\"\n    __table_args__ = (Index(\"prediction_transcript_seq_region_idx\", \"seq_region_id\", \"seq_region_start\"),)\n\n    prediction_transcript_id: Column = Column(INTEGER(10), primary_key=True)\n    seq_region_id: Column = Column(\n        ForeignKey(\"seq_region.seq_region_id\"),\n        nullable=False,\n    )\n    seq_region_start: Column = Column(INTEGER(10), nullable=False)\n    seq_region_end: Column = Column(INTEGER(10), nullable=False)\n    seq_region_strand: Column = Column(TINYINT(4), nullable=False)\n    analysis_id: Column = Column(\n        ForeignKey(\"analysis.analysis_id\"),\n        nullable=False,\n        index=True,\n    )\n    display_label: Column = Column(String(255))\n\n    analysis = relationship(\n        \"Analysis\",\n        primaryjoin=\"PredictionTranscript.analysis_id == Analysis.analysis_id\",\n    )\n    seq_region = relationship(\n        \"SeqRegion\",\n        primaryjoin=\"PredictionTranscript.seq_region_id == SeqRegion.seq_region_id\",\n    )\n</code></pre>"},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.PredictionTranscript.analysis","title":"<code>analysis = relationship('Analysis', primaryjoin='PredictionTranscript.analysis_id == Analysis.analysis_id')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.PredictionTranscript.analysis_id","title":"<code>analysis_id = Column(ForeignKey('analysis.analysis_id'), nullable=False, index=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.PredictionTranscript.display_label","title":"<code>display_label = Column(String(255))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.PredictionTranscript.prediction_transcript_id","title":"<code>prediction_transcript_id = Column(INTEGER(10), primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.PredictionTranscript.seq_region","title":"<code>seq_region = relationship('SeqRegion', primaryjoin='PredictionTranscript.seq_region_id == SeqRegion.seq_region_id')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.PredictionTranscript.seq_region_end","title":"<code>seq_region_end = Column(INTEGER(10), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.PredictionTranscript.seq_region_id","title":"<code>seq_region_id = Column(ForeignKey('seq_region.seq_region_id'), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.PredictionTranscript.seq_region_start","title":"<code>seq_region_start = Column(INTEGER(10), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.PredictionTranscript.seq_region_strand","title":"<code>seq_region_strand = Column(TINYINT(4), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.ProteinAlignFeature","title":"<code>ProteinAlignFeature</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/core/models.py</code> <pre><code>class ProteinAlignFeature(Base):\n    __tablename__ = \"protein_align_feature\"\n    __table_args__ = (\n        Index(\"protein_align_seq_region_idx_2\", \"seq_region_id\", \"seq_region_start\"),\n        Index(\n            \"seq_region_idx\",\n            \"seq_region_id\",\n            \"analysis_id\",\n            \"seq_region_start\",\n            \"score\",\n        ),\n    )\n\n    protein_align_feature_id: Column = Column(INTEGER(10), primary_key=True)\n    seq_region_id: Column = Column(\n        ForeignKey(\"seq_region.seq_region_id\"),\n        nullable=False,\n    )\n    seq_region_start: Column = Column(INTEGER(10), nullable=False)\n    seq_region_end: Column = Column(INTEGER(10), nullable=False)\n    seq_region_strand: Column = Column(TINYINT(1), nullable=False, server_default=text(\"'1'\"))\n    hit_start: Column = Column(INTEGER(10), nullable=False)\n    hit_end: Column = Column(INTEGER(10), nullable=False)\n    hit_name: Column = Column(String(40), nullable=False, index=True)\n    analysis_id: Column = Column(\n        ForeignKey(\"analysis.analysis_id\"),\n        nullable=False,\n        index=True,\n    )\n    score: Column = Column(Float(asdecimal=True))\n    evalue: Column = Column(Float(asdecimal=True))\n    perc_ident: Column = Column(Float)\n    cigar_line: Column = Column(Text)\n    external_db_id: Column = Column(\n        ForeignKey(\"external_db.external_db_id\"),\n        index=True,\n    )\n    hcoverage: Column = Column(Float(asdecimal=True))\n    align_type: Column = Column(Enum(\"ensembl\", \"cigar\", \"vulgar\", \"mdtag\"), server_default=text(\"'ensembl'\"))\n\n    analysis = relationship(\n        \"Analysis\",\n        primaryjoin=\"ProteinAlignFeature.analysis_id == Analysis.analysis_id\",\n    )\n    external_db = relationship(\n        \"ExternalDb\",\n        primaryjoin=\"ProteinAlignFeature.external_db_id == ExternalDb.external_db_id\",\n    )\n    seq_region = relationship(\n        \"SeqRegion\",\n        primaryjoin=\"ProteinAlignFeature.seq_region_id == SeqRegion.seq_region_id\",\n    )\n</code></pre>"},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.ProteinAlignFeature.align_type","title":"<code>align_type = Column(Enum('ensembl', 'cigar', 'vulgar', 'mdtag'), server_default=(text(\"'ensembl'\")))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.ProteinAlignFeature.analysis","title":"<code>analysis = relationship('Analysis', primaryjoin='ProteinAlignFeature.analysis_id == Analysis.analysis_id')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.ProteinAlignFeature.analysis_id","title":"<code>analysis_id = Column(ForeignKey('analysis.analysis_id'), nullable=False, index=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.ProteinAlignFeature.cigar_line","title":"<code>cigar_line = Column(Text)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.ProteinAlignFeature.evalue","title":"<code>evalue = Column(Float(asdecimal=True))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.ProteinAlignFeature.external_db","title":"<code>external_db = relationship('ExternalDb', primaryjoin='ProteinAlignFeature.external_db_id == ExternalDb.external_db_id')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.ProteinAlignFeature.external_db_id","title":"<code>external_db_id = Column(ForeignKey('external_db.external_db_id'), index=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.ProteinAlignFeature.hcoverage","title":"<code>hcoverage = Column(Float(asdecimal=True))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.ProteinAlignFeature.hit_end","title":"<code>hit_end = Column(INTEGER(10), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.ProteinAlignFeature.hit_name","title":"<code>hit_name = Column(String(40), nullable=False, index=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.ProteinAlignFeature.hit_start","title":"<code>hit_start = Column(INTEGER(10), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.ProteinAlignFeature.perc_ident","title":"<code>perc_ident = Column(Float)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.ProteinAlignFeature.protein_align_feature_id","title":"<code>protein_align_feature_id = Column(INTEGER(10), primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.ProteinAlignFeature.score","title":"<code>score = Column(Float(asdecimal=True))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.ProteinAlignFeature.seq_region","title":"<code>seq_region = relationship('SeqRegion', primaryjoin='ProteinAlignFeature.seq_region_id == SeqRegion.seq_region_id')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.ProteinAlignFeature.seq_region_end","title":"<code>seq_region_end = Column(INTEGER(10), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.ProteinAlignFeature.seq_region_id","title":"<code>seq_region_id = Column(ForeignKey('seq_region.seq_region_id'), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.ProteinAlignFeature.seq_region_start","title":"<code>seq_region_start = Column(INTEGER(10), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.ProteinAlignFeature.seq_region_strand","title":"<code>seq_region_strand = Column(TINYINT(1), nullable=False, server_default=(text(\"'1'\")))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.ProteinFeature","title":"<code>ProteinFeature</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/core/models.py</code> <pre><code>class ProteinFeature(Base):\n    __tablename__ = \"protein_feature\"\n    __table_args__ = (\n        Index(\n            \"aln_idx\",\n            \"translation_id\",\n            \"hit_name\",\n            \"seq_start\",\n            \"seq_end\",\n            \"hit_start\",\n            \"hit_end\",\n            \"analysis_id\",\n            unique=True,\n        ),\n    )\n\n    protein_feature_id: Column = Column(INTEGER(10), primary_key=True)\n    translation_id: Column = Column(\n        ForeignKey(\"translation.translation_id\"),\n        nullable=False,\n        index=True,\n    )\n    seq_start: Column = Column(INTEGER(10), nullable=False)\n    seq_end: Column = Column(INTEGER(10), nullable=False)\n    hit_start: Column = Column(INTEGER(10), nullable=False)\n    hit_end: Column = Column(INTEGER(10), nullable=False)\n    hit_name: Column = Column(VARCHAR(40), nullable=False, index=True)\n    analysis_id: Column = Column(\n        ForeignKey(\"analysis.analysis_id\"),\n        nullable=False,\n        index=True,\n    )\n    score: Column = Column(Float(asdecimal=True))\n    evalue: Column = Column(Float(asdecimal=True))\n    perc_ident: Column = Column(Float)\n    external_data: Column = Column(Text)\n    hit_description: Column = Column(Text)\n    cigar_line: Column = Column(Text)\n    align_type: Column = Column(Enum(\"ensembl\", \"cigar\", \"cigarplus\", \"vulgar\", \"mdtag\"))\n\n    analysis = relationship(\"Analysis\", primaryjoin=\"ProteinFeature.analysis_id == Analysis.analysis_id\")\n    translation = relationship(\n        \"Translation\",\n        primaryjoin=\"ProteinFeature.translation_id == Translation.translation_id\",\n    )\n</code></pre>"},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.ProteinFeature.align_type","title":"<code>align_type = Column(Enum('ensembl', 'cigar', 'cigarplus', 'vulgar', 'mdtag'))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.ProteinFeature.analysis","title":"<code>analysis = relationship('Analysis', primaryjoin='ProteinFeature.analysis_id == Analysis.analysis_id')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.ProteinFeature.analysis_id","title":"<code>analysis_id = Column(ForeignKey('analysis.analysis_id'), nullable=False, index=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.ProteinFeature.cigar_line","title":"<code>cigar_line = Column(Text)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.ProteinFeature.evalue","title":"<code>evalue = Column(Float(asdecimal=True))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.ProteinFeature.external_data","title":"<code>external_data = Column(Text)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.ProteinFeature.hit_description","title":"<code>hit_description = Column(Text)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.ProteinFeature.hit_end","title":"<code>hit_end = Column(INTEGER(10), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.ProteinFeature.hit_name","title":"<code>hit_name = Column(VARCHAR(40), nullable=False, index=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.ProteinFeature.hit_start","title":"<code>hit_start = Column(INTEGER(10), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.ProteinFeature.perc_ident","title":"<code>perc_ident = Column(Float)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.ProteinFeature.protein_feature_id","title":"<code>protein_feature_id = Column(INTEGER(10), primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.ProteinFeature.score","title":"<code>score = Column(Float(asdecimal=True))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.ProteinFeature.seq_end","title":"<code>seq_end = Column(INTEGER(10), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.ProteinFeature.seq_start","title":"<code>seq_start = Column(INTEGER(10), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.ProteinFeature.translation","title":"<code>translation = relationship('Translation', primaryjoin='ProteinFeature.translation_id == Translation.translation_id')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.ProteinFeature.translation_id","title":"<code>translation_id = Column(ForeignKey('translation.translation_id'), nullable=False, index=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.RNAproductAttrib","title":"<code>RNAproductAttrib</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/core/models.py</code> <pre><code>class RNAproductAttrib(Base):\n    __tablename__ = \"rnaproduct_attrib\"\n    __table_args__ = (\n        Index(\n            \"rnaproduct_attribx\",\n            \"rnaproduct_id\",\n            \"attrib_type_id\",\n            \"value\",\n            unique=True,\n            mysql_length={\"value\": 10},\n        ),\n        Index(\"rnaproduct_type_val_idx\", \"attrib_type_id\", \"value\", mysql_length={\"value\": 10}),\n        Index(\"rnaproduct_value_idx\", \"value\", mysql_length=10),\n    )\n    rnaproduct_id: Column = Column(\n        ForeignKey(\"rnaproduct.rnaproduct_id\"), nullable=False, index=True, primary_key=True\n    )\n    attrib_type_id: Column = Column(SMALLINT(5), nullable=False, primary_key=True)\n    value: Column = Column(String(500), nullable=False, primary_key=True)\n</code></pre>"},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.RNAproductAttrib.attrib_type_id","title":"<code>attrib_type_id = Column(SMALLINT(5), nullable=False, primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.RNAproductAttrib.rnaproduct_id","title":"<code>rnaproduct_id = Column(ForeignKey('rnaproduct.rnaproduct_id'), nullable=False, index=True, primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.RNAproductAttrib.value","title":"<code>value = Column(String(500), nullable=False, primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.RepeatConsensus","title":"<code>RepeatConsensus</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/core/models.py</code> <pre><code>class RepeatConsensus(Base):\n    __tablename__ = \"repeat_consensus\"\n    __table_args__ = (Index(\"repeat_consensus_idx\", \"repeat_consensus\", unique=True, mysql_length=10),)\n\n    repeat_consensus_id: Column = Column(INTEGER(10), primary_key=True)\n    repeat_name: Column = Column(String(255), nullable=False, index=True)\n    repeat_class: Column = Column(String(100), nullable=False, index=True)\n    repeat_type: Column = Column(String(40), nullable=False, index=True)\n    repeat_consensus: Column = Column(Text)\n</code></pre>"},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.RepeatConsensus.repeat_class","title":"<code>repeat_class = Column(String(100), nullable=False, index=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.RepeatConsensus.repeat_consensus","title":"<code>repeat_consensus = Column(Text)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.RepeatConsensus.repeat_consensus_id","title":"<code>repeat_consensus_id = Column(INTEGER(10), primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.RepeatConsensus.repeat_name","title":"<code>repeat_name = Column(String(255), nullable=False, index=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.RepeatConsensus.repeat_type","title":"<code>repeat_type = Column(String(40), nullable=False, index=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.RepeatFeature","title":"<code>RepeatFeature</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/core/models.py</code> <pre><code>class RepeatFeature(Base):\n    __tablename__ = \"repeat_feature\"\n    __table_args__ = (Index(\"repeat_feature_seq_region_idx\", \"seq_region_id\", \"seq_region_start\"),)\n\n    repeat_feature_id: Column = Column(INTEGER(10), primary_key=True)\n    seq_region_id: Column = Column(\n        ForeignKey(\"seq_region.seq_region_id\"),\n        nullable=False,\n    )\n    seq_region_start: Column = Column(INTEGER(10), nullable=False)\n    seq_region_end: Column = Column(INTEGER(10), nullable=False)\n    seq_region_strand: Column = Column(TINYINT(1), nullable=False, server_default=text(\"'1'\"))\n    repeat_start: Column = Column(INTEGER(10), nullable=False)\n    repeat_end: Column = Column(INTEGER(10), nullable=False)\n    repeat_consensus_id: Column = Column(\n        ForeignKey(\"repeat_consensus.repeat_consensus_id\"),\n        nullable=False,\n        index=True,\n    )\n    analysis_id: Column = Column(\n        ForeignKey(\"analysis.analysis_id\"),\n        nullable=False,\n        index=True,\n    )\n    score: Column = Column(Float(asdecimal=True))\n\n    analysis = relationship(\"Analysis\", primaryjoin=\"RepeatFeature.analysis_id == Analysis.analysis_id\")\n    repeat_consensus = relationship(\n        \"RepeatConsensus\",\n        primaryjoin=\"RepeatFeature.repeat_consensus_id == RepeatConsensus.repeat_consensus_id\",\n    )\n    seq_region = relationship(\n        \"SeqRegion\",\n        primaryjoin=\"RepeatFeature.seq_region_id == SeqRegion.seq_region_id\",\n    )\n</code></pre>"},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.RepeatFeature.analysis","title":"<code>analysis = relationship('Analysis', primaryjoin='RepeatFeature.analysis_id == Analysis.analysis_id')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.RepeatFeature.analysis_id","title":"<code>analysis_id = Column(ForeignKey('analysis.analysis_id'), nullable=False, index=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.RepeatFeature.repeat_consensus","title":"<code>repeat_consensus = relationship('RepeatConsensus', primaryjoin='RepeatFeature.repeat_consensus_id == RepeatConsensus.repeat_consensus_id')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.RepeatFeature.repeat_consensus_id","title":"<code>repeat_consensus_id = Column(ForeignKey('repeat_consensus.repeat_consensus_id'), nullable=False, index=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.RepeatFeature.repeat_end","title":"<code>repeat_end = Column(INTEGER(10), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.RepeatFeature.repeat_feature_id","title":"<code>repeat_feature_id = Column(INTEGER(10), primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.RepeatFeature.repeat_start","title":"<code>repeat_start = Column(INTEGER(10), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.RepeatFeature.score","title":"<code>score = Column(Float(asdecimal=True))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.RepeatFeature.seq_region","title":"<code>seq_region = relationship('SeqRegion', primaryjoin='RepeatFeature.seq_region_id == SeqRegion.seq_region_id')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.RepeatFeature.seq_region_end","title":"<code>seq_region_end = Column(INTEGER(10), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.RepeatFeature.seq_region_id","title":"<code>seq_region_id = Column(ForeignKey('seq_region.seq_region_id'), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.RepeatFeature.seq_region_start","title":"<code>seq_region_start = Column(INTEGER(10), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.RepeatFeature.seq_region_strand","title":"<code>seq_region_strand = Column(TINYINT(1), nullable=False, server_default=(text(\"'1'\")))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Rnaproduct","title":"<code>Rnaproduct</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/core/models.py</code> <pre><code>class Rnaproduct(Base):\n    __tablename__ = \"rnaproduct\"\n    __table_args__ = (Index(\"rnaproduct_stable_id_idx\", \"stable_id\", \"version\"),)\n\n    rnaproduct_id: Column = Column(INTEGER(10), primary_key=True)\n    rnaproduct_type_id: Column = Column(SMALLINT(5), nullable=False)\n    transcript_id: Column = Column(INTEGER(10), nullable=False, index=True)\n    seq_start: Column = Column(INTEGER(10), nullable=False)\n    start_exon_id: Column = Column(INTEGER(10))\n    seq_end: Column = Column(INTEGER(10), nullable=False)\n    end_exon_id: Column = Column(INTEGER(10))\n    stable_id: Column = Column(String(128))\n    version: Column = Column(SMALLINT(5))\n    created_date: Column = Column(DateTime)\n    modified_date: Column = Column(DateTime)\n</code></pre>"},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Rnaproduct.created_date","title":"<code>created_date = Column(DateTime)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Rnaproduct.end_exon_id","title":"<code>end_exon_id = Column(INTEGER(10))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Rnaproduct.modified_date","title":"<code>modified_date = Column(DateTime)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Rnaproduct.rnaproduct_id","title":"<code>rnaproduct_id = Column(INTEGER(10), primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Rnaproduct.rnaproduct_type_id","title":"<code>rnaproduct_type_id = Column(SMALLINT(5), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Rnaproduct.seq_end","title":"<code>seq_end = Column(INTEGER(10), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Rnaproduct.seq_start","title":"<code>seq_start = Column(INTEGER(10), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Rnaproduct.stable_id","title":"<code>stable_id = Column(String(128))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Rnaproduct.start_exon_id","title":"<code>start_exon_id = Column(INTEGER(10))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Rnaproduct.transcript_id","title":"<code>transcript_id = Column(INTEGER(10), nullable=False, index=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Rnaproduct.version","title":"<code>version = Column(SMALLINT(5))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.RnaproductType","title":"<code>RnaproductType</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/core/models.py</code> <pre><code>class RnaproductType(Base):\n    __tablename__ = \"rnaproduct_type\"\n\n    rnaproduct_type_id: Column = Column(SMALLINT(5), primary_key=True)\n    code: Column = Column(String(20), nullable=False, unique=True, server_default=text(\"''\"))\n    name: Column = Column(String(255), nullable=False, server_default=text(\"''\"))\n    description: Column = Column(Text)\n</code></pre>"},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.RnaproductType.code","title":"<code>code = Column(String(20), nullable=False, unique=True, server_default=(text(\"''\")))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.RnaproductType.description","title":"<code>description = Column(Text)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.RnaproductType.name","title":"<code>name = Column(String(255), nullable=False, server_default=(text(\"''\")))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.RnaproductType.rnaproduct_type_id","title":"<code>rnaproduct_type_id = Column(SMALLINT(5), primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.SeqRegion","title":"<code>SeqRegion</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/core/models.py</code> <pre><code>class SeqRegion(Base):\n    __tablename__ = \"seq_region\"\n    __table_args__ = (Index(\"name_cs_idx\", \"name\", \"coord_system_id\", unique=True),)\n\n    seq_region_id: Column = Column(INTEGER(10), primary_key=True)\n    name: Column = Column(String(255), nullable=False)\n    coord_system_id: Column = Column(\n        ForeignKey(\"coord_system.coord_system_id\"),\n        nullable=False,\n        index=True,\n    )\n    length: Column = Column(INTEGER(10), nullable=False)\n    # Many to one relationship\n    coord_system = relationship(\"CoordSystem\", back_populates=\"seq_region\")\n    seq_region_attrib = relationship(\"SeqRegionAttrib\", back_populates=\"seq_region\")\n    seq_region_synonym = relationship(\"SeqRegionSynonym\", back_populates=\"seq_region\")\n    karyotype = relationship(\"Karyotype\", back_populates=\"seq_region\")\n</code></pre>"},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.SeqRegion.coord_system","title":"<code>coord_system = relationship('CoordSystem', back_populates='seq_region')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.SeqRegion.coord_system_id","title":"<code>coord_system_id = Column(ForeignKey('coord_system.coord_system_id'), nullable=False, index=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.SeqRegion.karyotype","title":"<code>karyotype = relationship('Karyotype', back_populates='seq_region')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.SeqRegion.length","title":"<code>length = Column(INTEGER(10), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.SeqRegion.name","title":"<code>name = Column(String(255), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.SeqRegion.seq_region_attrib","title":"<code>seq_region_attrib = relationship('SeqRegionAttrib', back_populates='seq_region')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.SeqRegion.seq_region_id","title":"<code>seq_region_id = Column(INTEGER(10), primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.SeqRegion.seq_region_synonym","title":"<code>seq_region_synonym = relationship('SeqRegionSynonym', back_populates='seq_region')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.SeqRegionAttrib","title":"<code>SeqRegionAttrib</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/core/models.py</code> <pre><code>class SeqRegionAttrib(Base):\n    __tablename__ = \"seq_region_attrib\"\n    __table_args__ = (\n        Index(\n            \"region_attribx\",\n            \"seq_region_id\",\n            \"attrib_type_id\",\n            \"value\",\n            unique=True,\n            mysql_length={\"value\": 10},\n        ),\n        Index(\"region_attrib_type_val_idx\", \"attrib_type_id\", \"value\", mysql_length={\"value\": 10}),\n        Index(\"region_attrib_value_idx\", \"value\", mysql_length=10),\n    )\n\n    seq_region_id: Column = Column(\n        ForeignKey(\"seq_region.seq_region_id\"),\n        nullable=False,\n        index=True,\n        server_default=text(\"'0'\"),\n        primary_key=True,\n    )\n    attrib_type_id: Column = Column(\n        ForeignKey(\"attrib_type.attrib_type_id\"),\n        nullable=False,\n        server_default=text(\"'0'\"),\n        primary_key=True,\n    )\n    value: Column = Column(String(500), nullable=False, primary_key=True)\n\n    UniqueConstraint(\"seq_region_id\", \"attrib_type_id\", \"value\", name=\"region_attribx\")\n    seq_region = relationship(\"SeqRegion\", back_populates=\"seq_region_attrib\")\n    attrib_type = relationship(\"AttribType\", back_populates=\"seq_region_attrib\")\n</code></pre>"},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.SeqRegionAttrib.attrib_type","title":"<code>attrib_type = relationship('AttribType', back_populates='seq_region_attrib')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.SeqRegionAttrib.attrib_type_id","title":"<code>attrib_type_id = Column(ForeignKey('attrib_type.attrib_type_id'), nullable=False, server_default=(text(\"'0'\")), primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.SeqRegionAttrib.seq_region","title":"<code>seq_region = relationship('SeqRegion', back_populates='seq_region_attrib')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.SeqRegionAttrib.seq_region_id","title":"<code>seq_region_id = Column(ForeignKey('seq_region.seq_region_id'), nullable=False, index=True, server_default=(text(\"'0'\")), primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.SeqRegionAttrib.value","title":"<code>value = Column(String(500), nullable=False, primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.SeqRegionSynonym","title":"<code>SeqRegionSynonym</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/core/models.py</code> <pre><code>class SeqRegionSynonym(Base):\n    __tablename__ = \"seq_region_synonym\"\n    __table_args__ = (Index(\"syn_idx\", \"synonym\", \"seq_region_id\", unique=True),)\n\n    seq_region_synonym_id: Column = Column(INTEGER(10), primary_key=True)\n    seq_region_id: Column = Column(\n        ForeignKey(\"seq_region.seq_region_id\"),\n        nullable=False,\n        index=True,\n    )\n    synonym: Column = Column(String(250), nullable=False)\n    external_db_id: Column = Column(ForeignKey(\"external_db.external_db_id\"))\n\n    seq_region = relationship(\"SeqRegion\", back_populates=\"seq_region_synonym\")\n    external_db = relationship(\"ExternalDb\", back_populates=\"seq_region_synonym\")\n</code></pre>"},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.SeqRegionSynonym.external_db","title":"<code>external_db = relationship('ExternalDb', back_populates='seq_region_synonym')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.SeqRegionSynonym.external_db_id","title":"<code>external_db_id = Column(ForeignKey('external_db.external_db_id'))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.SeqRegionSynonym.seq_region","title":"<code>seq_region = relationship('SeqRegion', back_populates='seq_region_synonym')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.SeqRegionSynonym.seq_region_id","title":"<code>seq_region_id = Column(ForeignKey('seq_region.seq_region_id'), nullable=False, index=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.SeqRegionSynonym.seq_region_synonym_id","title":"<code>seq_region_synonym_id = Column(INTEGER(10), primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.SeqRegionSynonym.synonym","title":"<code>synonym = Column(String(250), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.SimpleFeature","title":"<code>SimpleFeature</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/core/models.py</code> <pre><code>class SimpleFeature(Base):\n    __tablename__ = \"simple_feature\"\n    __table_args__ = (Index(\"simple_feature_seq_region_idx\", \"seq_region_id\", \"seq_region_start\"),)\n\n    simple_feature_id: Column = Column(INTEGER(10), primary_key=True)\n    seq_region_id: Column = Column(\n        ForeignKey(\"seq_region.seq_region_id\"),\n        nullable=False,\n    )\n    seq_region_start: Column = Column(INTEGER(10), nullable=False)\n    seq_region_end: Column = Column(INTEGER(10), nullable=False)\n    seq_region_strand: Column = Column(TINYINT(1), nullable=False)\n    display_label: Column = Column(String(255), nullable=False, index=True)\n    analysis_id: Column = Column(\n        ForeignKey(\"analysis.analysis_id\"),\n        nullable=False,\n        index=True,\n    )\n    score: Column = Column(Float(asdecimal=True))\n\n    analysis = relationship(\"Analysis\", primaryjoin=\"SimpleFeature.analysis_id == Analysis.analysis_id\")\n    seq_region = relationship(\n        \"SeqRegion\",\n        primaryjoin=\"SimpleFeature.seq_region_id == SeqRegion.seq_region_id\",\n    )\n</code></pre>"},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.SimpleFeature.analysis","title":"<code>analysis = relationship('Analysis', primaryjoin='SimpleFeature.analysis_id == Analysis.analysis_id')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.SimpleFeature.analysis_id","title":"<code>analysis_id = Column(ForeignKey('analysis.analysis_id'), nullable=False, index=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.SimpleFeature.display_label","title":"<code>display_label = Column(String(255), nullable=False, index=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.SimpleFeature.score","title":"<code>score = Column(Float(asdecimal=True))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.SimpleFeature.seq_region","title":"<code>seq_region = relationship('SeqRegion', primaryjoin='SimpleFeature.seq_region_id == SeqRegion.seq_region_id')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.SimpleFeature.seq_region_end","title":"<code>seq_region_end = Column(INTEGER(10), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.SimpleFeature.seq_region_id","title":"<code>seq_region_id = Column(ForeignKey('seq_region.seq_region_id'), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.SimpleFeature.seq_region_start","title":"<code>seq_region_start = Column(INTEGER(10), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.SimpleFeature.seq_region_strand","title":"<code>seq_region_strand = Column(TINYINT(1), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.SimpleFeature.simple_feature_id","title":"<code>simple_feature_id = Column(INTEGER(10), primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.StableIdEvent","title":"<code>StableIdEvent</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/core/models.py</code> <pre><code>class StableIdEvent(Base):\n    __tablename__ = \"stable_id_event\"\n    __table_args__ = (\n        Index(\n            \"uni_idx\",\n            \"mapping_session_id\",\n            \"old_stable_id\",\n            \"new_stable_id\",\n            \"type\",\n            unique=True,\n        ),\n    )\n\n    old_stable_id: Column = Column(String(128), primary_key=True, index=True)\n    old_version: Column = Column(SMALLINT(6))\n    new_stable_id: Column = Column(String(128), primary_key=True, index=True)\n    new_version: Column = Column(SMALLINT(6))\n    mapping_session_id: Column = Column(\n        INTEGER(10),\n        ForeignKey(\"mapping_session.mapping_session_id\"),\n        primary_key=True,\n        nullable=False,\n        server_default=text(\"'0'\"),\n    )\n    id_type: Column = Column(\n        \"type\",\n        Enum(\"gene\", \"transcript\", \"translation\", \"rnaproduct\"),\n        primary_key=True,\n        nullable=False,\n    )\n    score: Column = Column(Float, nullable=False, server_default=text(\"'0'\"))\n</code></pre>"},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.StableIdEvent.id_type","title":"<code>id_type = Column('type', Enum('gene', 'transcript', 'translation', 'rnaproduct'), primary_key=True, nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.StableIdEvent.mapping_session_id","title":"<code>mapping_session_id = Column(INTEGER(10), ForeignKey('mapping_session.mapping_session_id'), primary_key=True, nullable=False, server_default=(text(\"'0'\")))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.StableIdEvent.new_stable_id","title":"<code>new_stable_id = Column(String(128), primary_key=True, index=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.StableIdEvent.new_version","title":"<code>new_version = Column(SMALLINT(6))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.StableIdEvent.old_stable_id","title":"<code>old_stable_id = Column(String(128), primary_key=True, index=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.StableIdEvent.old_version","title":"<code>old_version = Column(SMALLINT(6))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.StableIdEvent.score","title":"<code>score = Column(Float, nullable=False, server_default=(text(\"'0'\")))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.SupportingFeature","title":"<code>SupportingFeature</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/core/models.py</code> <pre><code>class SupportingFeature(Base):\n    __tablename__ = \"supporting_feature\"\n    __table_args__ = (\n        Index(\"supporting_feature_all_idx\", \"exon_id\", \"feature_type\", \"feature_id\", unique=True),\n        Index(\"supporting_feature_idx\", \"feature_type\", \"feature_id\"),\n    )\n\n    exon_id: Column = Column(\n        INTEGER(10),\n        ForeignKey(\"exon.exon_id\"),\n        primary_key=True,\n        nullable=False,\n        server_default=text(\"'0'\"),\n    )\n    feature_type: Column = Column(Enum(\"dna_align_feature\", \"protein_align_feature\"), primary_key=True)\n    feature_id: Column = Column(INTEGER(10), primary_key=True, nullable=False, server_default=text(\"'0'\"))\n</code></pre>"},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.SupportingFeature.exon_id","title":"<code>exon_id = Column(INTEGER(10), ForeignKey('exon.exon_id'), primary_key=True, nullable=False, server_default=(text(\"'0'\")))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.SupportingFeature.feature_id","title":"<code>feature_id = Column(INTEGER(10), primary_key=True, nullable=False, server_default=(text(\"'0'\")))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.SupportingFeature.feature_type","title":"<code>feature_type = Column(Enum('dna_align_feature', 'protein_align_feature'), primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Transcript","title":"<code>Transcript</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/core/models.py</code> <pre><code>class Transcript(Base):\n    __tablename__ = \"transcript\"\n    __table_args__ = (\n        Index(\"transcript_seq_region_idx\", \"seq_region_id\", \"seq_region_start\"),\n        Index(\"transcript_stable_id_idx\", \"stable_id\", \"version\"),\n    )\n\n    transcript_id: Column = Column(INTEGER(10), primary_key=True)\n    gene_id: Column = Column(ForeignKey(\"gene.gene_id\"), index=True)\n    analysis_id: Column = Column(\n        ForeignKey(\"analysis.analysis_id\"),\n        nullable=False,\n        index=True,\n    )\n    seq_region_id: Column = Column(\n        ForeignKey(\"seq_region.seq_region_id\"),\n        nullable=False,\n    )\n    seq_region_start: Column = Column(INTEGER(10), nullable=False)\n    seq_region_end: Column = Column(INTEGER(10), nullable=False)\n    seq_region_strand: Column = Column(TINYINT(2), nullable=False)\n    display_xref_id: Column = Column(ForeignKey(\"xref.xref_id\"), index=True)\n    source: Column = Column(String(40), nullable=False, server_default=text(\"'ensembl'\"))\n    biotype: Column = Column(String(40), nullable=False)\n    description: Column = Column(Text)\n    is_current: Column = Column(TINYINT(1), nullable=False, server_default=text(\"'1'\"))\n    canonical_translation_id: Column = Column(\n        ForeignKey(\"translation.translation_id\"),\n        unique=True,\n    )\n    stable_id: Column = Column(String(128))\n    version: Column = Column(SMALLINT(5))\n    created_date: Column = Column(DateTime)\n    modified_date: Column = Column(DateTime)\n\n    analysis = relationship(\"Analysis\", primaryjoin=\"Transcript.analysis_id == Analysis.analysis_id\")\n    canonical_translation = relationship(\n        \"Translation\",\n        primaryjoin=\"Transcript.canonical_translation_id == Translation.translation_id\",\n    )\n    display_xref = relationship(\"Xref\", primaryjoin=\"Transcript.display_xref_id == Xref.xref_id\")\n    gene = relationship(\"Gene\", primaryjoin=\"Transcript.gene_id == Gene.gene_id\")\n    seq_region = relationship(\"SeqRegion\", primaryjoin=\"Transcript.seq_region_id == SeqRegion.seq_region_id\")\n</code></pre>"},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Transcript.analysis","title":"<code>analysis = relationship('Analysis', primaryjoin='Transcript.analysis_id == Analysis.analysis_id')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Transcript.analysis_id","title":"<code>analysis_id = Column(ForeignKey('analysis.analysis_id'), nullable=False, index=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Transcript.biotype","title":"<code>biotype = Column(String(40), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Transcript.canonical_translation","title":"<code>canonical_translation = relationship('Translation', primaryjoin='Transcript.canonical_translation_id == Translation.translation_id')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Transcript.canonical_translation_id","title":"<code>canonical_translation_id = Column(ForeignKey('translation.translation_id'), unique=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Transcript.created_date","title":"<code>created_date = Column(DateTime)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Transcript.description","title":"<code>description = Column(Text)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Transcript.display_xref","title":"<code>display_xref = relationship('Xref', primaryjoin='Transcript.display_xref_id == Xref.xref_id')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Transcript.display_xref_id","title":"<code>display_xref_id = Column(ForeignKey('xref.xref_id'), index=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Transcript.gene","title":"<code>gene = relationship('Gene', primaryjoin='Transcript.gene_id == Gene.gene_id')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Transcript.gene_id","title":"<code>gene_id = Column(ForeignKey('gene.gene_id'), index=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Transcript.is_current","title":"<code>is_current = Column(TINYINT(1), nullable=False, server_default=(text(\"'1'\")))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Transcript.modified_date","title":"<code>modified_date = Column(DateTime)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Transcript.seq_region","title":"<code>seq_region = relationship('SeqRegion', primaryjoin='Transcript.seq_region_id == SeqRegion.seq_region_id')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Transcript.seq_region_end","title":"<code>seq_region_end = Column(INTEGER(10), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Transcript.seq_region_id","title":"<code>seq_region_id = Column(ForeignKey('seq_region.seq_region_id'), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Transcript.seq_region_start","title":"<code>seq_region_start = Column(INTEGER(10), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Transcript.seq_region_strand","title":"<code>seq_region_strand = Column(TINYINT(2), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Transcript.source","title":"<code>source = Column(String(40), nullable=False, server_default=(text(\"'ensembl'\")))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Transcript.stable_id","title":"<code>stable_id = Column(String(128))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Transcript.transcript_id","title":"<code>transcript_id = Column(INTEGER(10), primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Transcript.version","title":"<code>version = Column(SMALLINT(5))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.TranscriptAttrib","title":"<code>TranscriptAttrib</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/core/models.py</code> <pre><code>class TranscriptAttrib(Base):\n    __tablename__ = \"transcript_attrib\"\n    __table_args__ = (\n        Index(\"transcript_attrib_type_val_idx\", \"attrib_type_id\", \"value\", mysql_length={\"value\": 10}),\n        Index(\n            \"transcript_attribx\",\n            \"transcript_id\",\n            \"attrib_type_id\",\n            \"value\",\n            unique=True,\n            mysql_length={\"value\": 10},\n        ),\n        Index(\"transcript_attrib_value_idx\", \"value\", mysql_length=10),\n    )\n\n    transcript_id: Column = Column(\n        INTEGER(10),\n        ForeignKey(\"transcript.transcript_id\"),\n        nullable=False,\n        index=True,\n        server_default=text(\"'0'\"),\n        primary_key=True,\n    )\n    attrib_type_id: Column = Column(\n        SMALLINT(5),\n        ForeignKey(\"attrib_type.attrib_type_id\"),\n        nullable=False,\n        server_default=text(\"'0'\"),\n        primary_key=True,\n    )\n    value: Column = Column(String(500), nullable=False, primary_key=True)\n</code></pre>"},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.TranscriptAttrib.attrib_type_id","title":"<code>attrib_type_id = Column(SMALLINT(5), ForeignKey('attrib_type.attrib_type_id'), nullable=False, server_default=(text(\"'0'\")), primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.TranscriptAttrib.transcript_id","title":"<code>transcript_id = Column(INTEGER(10), ForeignKey('transcript.transcript_id'), nullable=False, index=True, server_default=(text(\"'0'\")), primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.TranscriptAttrib.value","title":"<code>value = Column(String(500), nullable=False, primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.TranscriptIntronSupportingEvidence","title":"<code>TranscriptIntronSupportingEvidence</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/core/models.py</code> <pre><code>class TranscriptIntronSupportingEvidence(Base):\n    __tablename__ = \"transcript_intron_supporting_evidence\"\n\n    transcript_id: Column = Column(INTEGER(10), primary_key=True, nullable=False, index=True)\n    intron_supporting_evidence_id: Column = Column(INTEGER(10), primary_key=True, nullable=False)\n    previous_exon_id: Column = Column(INTEGER(10), nullable=False)\n    next_exon_id: Column = Column(INTEGER(10), nullable=False)\n</code></pre>"},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.TranscriptIntronSupportingEvidence.intron_supporting_evidence_id","title":"<code>intron_supporting_evidence_id = Column(INTEGER(10), primary_key=True, nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.TranscriptIntronSupportingEvidence.next_exon_id","title":"<code>next_exon_id = Column(INTEGER(10), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.TranscriptIntronSupportingEvidence.previous_exon_id","title":"<code>previous_exon_id = Column(INTEGER(10), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.TranscriptIntronSupportingEvidence.transcript_id","title":"<code>transcript_id = Column(INTEGER(10), primary_key=True, nullable=False, index=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.TranscriptSupportingFeature","title":"<code>TranscriptSupportingFeature</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/core/models.py</code> <pre><code>class TranscriptSupportingFeature(Base):\n    __tablename__ = \"transcript_supporting_feature\"\n    __table_args__ = (\n        Index(\"transcript_supporting_feature_idx\", \"feature_type\", \"feature_id\"),\n        Index(\n            \"transcript_supporting_feature_all_idx\",\n            \"transcript_id\",\n            \"feature_type\",\n            \"feature_id\",\n            unique=True,\n        ),\n    )\n\n    transcript_id: Column = Column(\n        INTEGER(10),\n        ForeignKey(\"transcript.transcript_id\"),\n        primary_key=True,\n        nullable=False,\n        server_default=text(\"'0'\"),\n    )\n    feature_type: Column = Column(Enum(\"dna_align_feature\", \"protein_align_feature\"), primary_key=True)\n    feature_id: Column = Column(INTEGER(10), primary_key=True, nullable=False, server_default=text(\"'0'\"))\n</code></pre>"},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.TranscriptSupportingFeature.feature_id","title":"<code>feature_id = Column(INTEGER(10), primary_key=True, nullable=False, server_default=(text(\"'0'\")))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.TranscriptSupportingFeature.feature_type","title":"<code>feature_type = Column(Enum('dna_align_feature', 'protein_align_feature'), primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.TranscriptSupportingFeature.transcript_id","title":"<code>transcript_id = Column(INTEGER(10), ForeignKey('transcript.transcript_id'), primary_key=True, nullable=False, server_default=(text(\"'0'\")))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Translation","title":"<code>Translation</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/core/models.py</code> <pre><code>class Translation(Base):\n    __tablename__ = \"translation\"\n    __table_args__ = (Index(\"translation_stable_id_idx\", \"stable_id\", \"version\"),)\n\n    translation_id: Column = Column(INTEGER(10), primary_key=True)\n    transcript_id: Column = Column(\n        ForeignKey(\"transcript.transcript_id\"),\n        nullable=False,\n        index=True,\n    )\n    seq_start: Column = Column(INTEGER(10), nullable=False)\n    start_exon_id: Column = Column(\n        ForeignKey(\"exon.exon_id\"),\n        nullable=False,\n        index=True,\n    )\n    seq_end: Column = Column(INTEGER(10), nullable=False)\n    end_exon_id: Column = Column(\n        ForeignKey(\"exon.exon_id\"),\n        nullable=False,\n        index=True,\n    )\n    stable_id: Column = Column(String(128))\n    version: Column = Column(SMALLINT(5))\n    created_date: Column = Column(DateTime)\n    modified_date: Column = Column(DateTime)\n\n    end_exon = relationship(\"Exon\", primaryjoin=\"Translation.end_exon_id == Exon.exon_id\")\n    start_exon = relationship(\"Exon\", primaryjoin=\"Translation.start_exon_id == Exon.exon_id\")\n    transcript = relationship(\n        \"Transcript\",\n        primaryjoin=\"Translation.transcript_id == Transcript.transcript_id\",\n    )\n</code></pre>"},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Translation.created_date","title":"<code>created_date = Column(DateTime)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Translation.end_exon","title":"<code>end_exon = relationship('Exon', primaryjoin='Translation.end_exon_id == Exon.exon_id')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Translation.end_exon_id","title":"<code>end_exon_id = Column(ForeignKey('exon.exon_id'), nullable=False, index=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Translation.modified_date","title":"<code>modified_date = Column(DateTime)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Translation.seq_end","title":"<code>seq_end = Column(INTEGER(10), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Translation.seq_start","title":"<code>seq_start = Column(INTEGER(10), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Translation.stable_id","title":"<code>stable_id = Column(String(128))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Translation.start_exon","title":"<code>start_exon = relationship('Exon', primaryjoin='Translation.start_exon_id == Exon.exon_id')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Translation.start_exon_id","title":"<code>start_exon_id = Column(ForeignKey('exon.exon_id'), nullable=False, index=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Translation.transcript","title":"<code>transcript = relationship('Transcript', primaryjoin='Translation.transcript_id == Transcript.transcript_id')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Translation.transcript_id","title":"<code>transcript_id = Column(ForeignKey('transcript.transcript_id'), nullable=False, index=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Translation.translation_id","title":"<code>translation_id = Column(INTEGER(10), primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Translation.version","title":"<code>version = Column(SMALLINT(5))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.TranslationAttrib","title":"<code>TranslationAttrib</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/core/models.py</code> <pre><code>class TranslationAttrib(Base):\n    __tablename__ = \"translation_attrib\"\n    __table_args__ = (\n        Index(\"translation_attrib_type_val_idx\", \"attrib_type_id\", \"value\", mysql_length={\"value\": 10}),\n        Index(\n            \"translation_attribx\",\n            \"translation_id\",\n            \"attrib_type_id\",\n            \"value\",\n            unique=True,\n            mysql_length={\"value\": 10},\n        ),\n        Index(\"translation_attrib_value_idx\", \"value\", mysql_length=10),\n    )\n\n    translation_id: Column = Column(\n        ForeignKey(\"translation.translation_id\"),\n        nullable=False,\n        index=True,\n        server_default=text(\"'0'\"),\n        primary_key=True,\n    )\n    attrib_type_id: Column = Column(\n        ForeignKey(\"attrib_type.attrib_type_id\"),\n        nullable=False,\n        server_default=text(\"'0'\"),\n        primary_key=True,\n    )\n    value: Column = Column(String(500), nullable=False, primary_key=True)\n</code></pre>"},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.TranslationAttrib.attrib_type_id","title":"<code>attrib_type_id = Column(ForeignKey('attrib_type.attrib_type_id'), nullable=False, server_default=(text(\"'0'\")), primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.TranslationAttrib.translation_id","title":"<code>translation_id = Column(ForeignKey('translation.translation_id'), nullable=False, index=True, server_default=(text(\"'0'\")), primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.TranslationAttrib.value","title":"<code>value = Column(String(500), nullable=False, primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.UnmappedObject","title":"<code>UnmappedObject</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/core/models.py</code> <pre><code>class UnmappedObject(Base):\n    __tablename__ = \"unmapped_object\"\n    __table_args__ = (\n        Index(\n            \"unique_unmapped_obj_idx\",\n            \"ensembl_id\",\n            \"ensembl_object_type\",\n            \"identifier\",\n            \"unmapped_reason_id\",\n            \"parent\",\n            \"external_db_id\",\n            unique=True,\n        ),\n        Index(\"anal_exdb_idx\", \"analysis_id\", \"external_db_id\"),\n        Index(\"ext_db_identifier_idx\", \"external_db_id\", \"identifier\"),\n    )\n\n    unmapped_object_id: Column = Column(INTEGER(10), primary_key=True)\n    unmapped_object_type: Column = Column(\"type\", Enum(\"xref\", \"cDNA\", \"Marker\"), nullable=False)\n    analysis_id: Column = Column(\n        ForeignKey(\"analysis.analysis_id\"),\n        nullable=False,\n    )\n    external_db_id: Column = Column(\n        ForeignKey(\"external_db.external_db_id\"),\n    )\n    identifier: Column = Column(String(255), nullable=False, index=True)\n    unmapped_reason_id: Column = Column(\n        ForeignKey(\"unmapped_reason.unmapped_reason_id\"),\n        nullable=False,\n        index=True,\n    )\n    query_score: Column = Column(Float(asdecimal=True))\n    target_score: Column = Column(Float(asdecimal=True))\n    ensembl_id: Column = Column(INTEGER(10), server_default=text(\"'0'\"))\n    ensembl_object_type: Column = Column(\n        Enum(\"RawContig\", \"Transcript\", \"Gene\", \"Translation\"),\n        server_default=text(\"'RawContig'\"),\n    )\n    parent: Column = Column(String(255))\n\n    analysis = relationship(\"Analysis\", primaryjoin=\"UnmappedObject.analysis_id == Analysis.analysis_id\")\n    external_db = relationship(\n        \"ExternalDb\",\n        primaryjoin=\"UnmappedObject.external_db_id == ExternalDb.external_db_id\",\n    )\n    unmapped_reason = relationship(\n        \"UnmappedReason\",\n        primaryjoin=\"UnmappedObject.unmapped_reason_id == UnmappedReason.unmapped_reason_id\",\n    )\n</code></pre>"},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.UnmappedObject.analysis","title":"<code>analysis = relationship('Analysis', primaryjoin='UnmappedObject.analysis_id == Analysis.analysis_id')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.UnmappedObject.analysis_id","title":"<code>analysis_id = Column(ForeignKey('analysis.analysis_id'), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.UnmappedObject.ensembl_id","title":"<code>ensembl_id = Column(INTEGER(10), server_default=(text(\"'0'\")))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.UnmappedObject.ensembl_object_type","title":"<code>ensembl_object_type = Column(Enum('RawContig', 'Transcript', 'Gene', 'Translation'), server_default=(text(\"'RawContig'\")))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.UnmappedObject.external_db","title":"<code>external_db = relationship('ExternalDb', primaryjoin='UnmappedObject.external_db_id == ExternalDb.external_db_id')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.UnmappedObject.external_db_id","title":"<code>external_db_id = Column(ForeignKey('external_db.external_db_id'))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.UnmappedObject.identifier","title":"<code>identifier = Column(String(255), nullable=False, index=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.UnmappedObject.parent","title":"<code>parent = Column(String(255))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.UnmappedObject.query_score","title":"<code>query_score = Column(Float(asdecimal=True))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.UnmappedObject.target_score","title":"<code>target_score = Column(Float(asdecimal=True))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.UnmappedObject.unmapped_object_id","title":"<code>unmapped_object_id = Column(INTEGER(10), primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.UnmappedObject.unmapped_object_type","title":"<code>unmapped_object_type = Column('type', Enum('xref', 'cDNA', 'Marker'), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.UnmappedObject.unmapped_reason","title":"<code>unmapped_reason = relationship('UnmappedReason', primaryjoin='UnmappedObject.unmapped_reason_id == UnmappedReason.unmapped_reason_id')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.UnmappedObject.unmapped_reason_id","title":"<code>unmapped_reason_id = Column(ForeignKey('unmapped_reason.unmapped_reason_id'), nullable=False, index=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.UnmappedReason","title":"<code>UnmappedReason</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/core/models.py</code> <pre><code>class UnmappedReason(Base):\n    __tablename__ = \"unmapped_reason\"\n\n    unmapped_reason_id: Column = Column(INTEGER(10), primary_key=True)\n    summary_description: Column = Column(String(255))\n    full_description: Column = Column(String(255))\n</code></pre>"},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.UnmappedReason.full_description","title":"<code>full_description = Column(String(255))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.UnmappedReason.summary_description","title":"<code>summary_description = Column(String(255))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.UnmappedReason.unmapped_reason_id","title":"<code>unmapped_reason_id = Column(INTEGER(10), primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Xref","title":"<code>Xref</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/core/models.py</code> <pre><code>class Xref(Base):\n    __tablename__ = \"xref\"\n    __table_args__ = (\n        Index(\n            \"id_index\",\n            \"dbprimary_acc\",\n            \"external_db_id\",\n            \"info_type\",\n            \"info_text\",\n            \"version\",\n            unique=True,\n        ),\n    )\n\n    xref_id: Column = Column(INTEGER(10), primary_key=True)\n    external_db_id: Column = Column(\n        ForeignKey(\"external_db.external_db_id\"),\n        nullable=False,\n        index=True,\n    )\n    dbprimary_acc: Column = Column(String(512), nullable=False)\n    display_label: Column = Column(String(512), nullable=False, index=True)\n    version: Column = Column(String(10))\n    description: Column = Column(Text)\n    info_type: Column = Column(\n        Enum(\n            \"NONE\",\n            \"PROJECTION\",\n            \"MISC\",\n            \"DEPENDENT\",\n            \"DIRECT\",\n            \"SEQUENCE_MATCH\",\n            \"INFERRED_PAIR\",\n            \"PROBE\",\n            \"UNMAPPED\",\n            \"COORDINATE_OVERLAP\",\n            \"CHECKSUM\",\n        ),\n        nullable=False,\n        index=True,\n        server_default=text(\"'NONE'\"),\n    )\n    info_text: Column = Column(String(255), nullable=False, server_default=text(\"''\"))\n\n    external_db = relationship(\"ExternalDb\", primaryjoin=\"Xref.external_db_id == ExternalDb.external_db_id\")\n</code></pre>"},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Xref.dbprimary_acc","title":"<code>dbprimary_acc = Column(String(512), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Xref.description","title":"<code>description = Column(Text)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Xref.display_label","title":"<code>display_label = Column(String(512), nullable=False, index=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Xref.external_db","title":"<code>external_db = relationship('ExternalDb', primaryjoin='Xref.external_db_id == ExternalDb.external_db_id')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Xref.external_db_id","title":"<code>external_db_id = Column(ForeignKey('external_db.external_db_id'), nullable=False, index=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Xref.info_text","title":"<code>info_text = Column(String(255), nullable=False, server_default=(text(\"''\")))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Xref.info_type","title":"<code>info_type = Column(Enum('NONE', 'PROJECTION', 'MISC', 'DEPENDENT', 'DIRECT', 'SEQUENCE_MATCH', 'INFERRED_PAIR', 'PROBE', 'UNMAPPED', 'COORDINATE_OVERLAP', 'CHECKSUM'), nullable=False, index=True, server_default=(text(\"'NONE'\")))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Xref.version","title":"<code>version = Column(String(10))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.Xref.xref_id","title":"<code>xref_id = Column(INTEGER(10), primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.compile_double_sqlite","title":"<code>compile_double_sqlite(type_, compiler, **kw)</code>","text":"<p>Cast MySQL DOUBLE to SQLite NUMBER.</p> Source code in <code>src/python/ensembl/core/models.py</code> <pre><code>@compiles(DOUBLE, \"sqlite\")\ndef compile_double_sqlite(\n    type_: sqlalchemy.sql.expression.ColumnClause,  # pylint: disable=unused-argument\n    compiler: sqlalchemy.engine.interfaces.Compiled,  # pylint: disable=unused-argument\n    **kw: Any,  # pylint: disable=unused-argument\n) -&gt; str:\n    \"\"\"Cast MySQL DOUBLE to SQLite NUMBER.\"\"\"\n    return \"NUMBER\"\n</code></pre>"},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.compile_longtext_sqlite","title":"<code>compile_longtext_sqlite(type_, compiler, **kw)</code>","text":"<p>Cast MySQL LONGTEXT to SQLite TEXT.</p> Source code in <code>src/python/ensembl/core/models.py</code> <pre><code>@compiles(LONGTEXT, \"sqlite\")\ndef compile_longtext_sqlite(\n    type_: sqlalchemy.sql.expression.ColumnClause,  # pylint: disable=unused-argument\n    compiler: sqlalchemy.engine.interfaces.Compiled,  # pylint: disable=unused-argument\n    **kw: Any,  # pylint: disable=unused-argument\n) -&gt; str:\n    \"\"\"Cast MySQL LONGTEXT to SQLite TEXT.\"\"\"\n    return \"TEXT\"\n</code></pre>"},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.compile_mediumtext_sqlite","title":"<code>compile_mediumtext_sqlite(type_, compiler, **kw)</code>","text":"<p>Cast MySQL MEDIUMTEXT to SQLite TEXT.</p> Source code in <code>src/python/ensembl/core/models.py</code> <pre><code>@compiles(MEDIUMTEXT, \"sqlite\")\ndef compile_mediumtext_sqlite(\n    type_: sqlalchemy.sql.expression.ColumnClause,  # pylint: disable=unused-argument\n    compiler: sqlalchemy.engine.interfaces.Compiled,  # pylint: disable=unused-argument\n    **kw: Any,  # pylint: disable=unused-argument\n) -&gt; str:\n    \"\"\"Cast MySQL MEDIUMTEXT to SQLite TEXT.\"\"\"\n    return \"TEXT\"\n</code></pre>"},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.compile_set_sqlite","title":"<code>compile_set_sqlite(type_, compiler, **kw)</code>","text":"<p>Cast MySQL SET to SQLite TEXT.</p> Source code in <code>src/python/ensembl/core/models.py</code> <pre><code>@compiles(SET, \"sqlite\")\ndef compile_set_sqlite(\n    type_: sqlalchemy.sql.expression.ColumnClause,  # pylint: disable=unused-argument\n    compiler: sqlalchemy.engine.interfaces.Compiled,  # pylint: disable=unused-argument\n    **kw: Any,  # pylint: disable=unused-argument\n) -&gt; str:\n    \"\"\"Cast MySQL SET to SQLite TEXT.\"\"\"\n    return \"TEXT\"\n</code></pre>"},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.compile_tinyint_sqlite","title":"<code>compile_tinyint_sqlite(type_, compiler, **kw)</code>","text":"<p>Cast MySQL TINYINT to SQLite INT.</p> Source code in <code>src/python/ensembl/core/models.py</code> <pre><code>@compiles(TINYINT, \"sqlite\")\ndef compile_tinyint_sqlite(\n    type_: sqlalchemy.sql.expression.ColumnClause,  # pylint: disable=unused-argument\n    compiler: sqlalchemy.engine.interfaces.Compiled,  # pylint: disable=unused-argument\n    **kw: Any,  # pylint: disable=unused-argument\n) -&gt; str:\n    \"\"\"Cast MySQL TINYINT to SQLite INT.\"\"\"\n    return \"INT\"\n</code></pre>"},{"location":"reference/python/ensembl/core/models/#python.ensembl.core.models.compile_tinytext_sqlite","title":"<code>compile_tinytext_sqlite(type_, compiler, **kw)</code>","text":"<p>Cast MySQL TINYTEXT to SQLite TEXT.</p> Source code in <code>src/python/ensembl/core/models.py</code> <pre><code>@compiles(TINYTEXT, \"sqlite\")\ndef compile_tinytext_sqlite(\n    type_: sqlalchemy.sql.expression.ColumnClause,  # pylint: disable=unused-argument\n    compiler: sqlalchemy.engine.interfaces.Compiled,  # pylint: disable=unused-argument\n    **kw: Any,  # pylint: disable=unused-argument\n) -&gt; str:\n    \"\"\"Cast MySQL TINYTEXT to SQLite TEXT.\"\"\"\n    return \"TEXT\"\n</code></pre>"},{"location":"reference/python/ensembl/ncbi_taxonomy/","title":"ncbi_taxonomy","text":""},{"location":"reference/python/ensembl/ncbi_taxonomy/#python.ensembl.ncbi_taxonomy","title":"<code>python.ensembl.ncbi_taxonomy</code>","text":"<p>Taxonomy module</p>"},{"location":"reference/python/ensembl/ncbi_taxonomy/models/","title":"models","text":""},{"location":"reference/python/ensembl/ncbi_taxonomy/models/#python.ensembl.ncbi_taxonomy.models","title":"<code>python.ensembl.ncbi_taxonomy.models</code>","text":"<p>NCBI Taxonomy database ORM.</p>"},{"location":"reference/python/ensembl/ncbi_taxonomy/models/#python.ensembl.ncbi_taxonomy.models.Base","title":"<code>Base = declarative_base()</code>  <code>module-attribute</code>","text":""},{"location":"reference/python/ensembl/ncbi_taxonomy/models/#python.ensembl.ncbi_taxonomy.models.NCBITaxaName","title":"<code>NCBITaxaName</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/ncbi_taxonomy/models.py</code> <pre><code>class NCBITaxaName(Base):\n    __tablename__ = \"ncbi_taxa_name\"\n\n    taxon_id = Column(INTEGER(10), ForeignKey(\"ncbi_taxa_node.taxon_id\"), index=True, primary_key=True)\n    name = Column(VARCHAR(500), index=True, primary_key=True)\n    name_class = Column(VARCHAR(50), nullable=False, index=True)\n</code></pre>"},{"location":"reference/python/ensembl/ncbi_taxonomy/models/#python.ensembl.ncbi_taxonomy.models.NCBITaxaName.name","title":"<code>name = Column(VARCHAR(500), index=True, primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/ncbi_taxonomy/models/#python.ensembl.ncbi_taxonomy.models.NCBITaxaName.name_class","title":"<code>name_class = Column(VARCHAR(50), nullable=False, index=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/ncbi_taxonomy/models/#python.ensembl.ncbi_taxonomy.models.NCBITaxaName.taxon_id","title":"<code>taxon_id = Column(INTEGER(10), ForeignKey('ncbi_taxa_node.taxon_id'), index=True, primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/ncbi_taxonomy/models/#python.ensembl.ncbi_taxonomy.models.NCBITaxaNode","title":"<code>NCBITaxaNode</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/ncbi_taxonomy/models.py</code> <pre><code>class NCBITaxaNode(Base):\n    __tablename__ = \"ncbi_taxa_node\"\n\n    taxon_id = Column(INTEGER(10), primary_key=True)\n    parent_id = Column(INTEGER(10), ForeignKey(\"ncbi_taxa_node.taxon_id\"), nullable=False, index=True)\n    rank = Column(CHAR(32), nullable=False, index=True)\n    genbank_hidden_flag = Column(TINYINT(1), nullable=False, default=0)\n    left_index = Column(INTEGER(10), nullable=False, default=0, index=True)\n    right_index = Column(INTEGER(10), nullable=False, default=0, index=True)\n    root_id = Column(INTEGER(10), nullable=False, default=1)\n\n    parent = relationship(\"NCBITaxaNode\", remote_side=[taxon_id])\n    children = relationship(\"NCBITaxaName\")\n</code></pre>"},{"location":"reference/python/ensembl/ncbi_taxonomy/models/#python.ensembl.ncbi_taxonomy.models.NCBITaxaNode.children","title":"<code>children = relationship('NCBITaxaName')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/ncbi_taxonomy/models/#python.ensembl.ncbi_taxonomy.models.NCBITaxaNode.genbank_hidden_flag","title":"<code>genbank_hidden_flag = Column(TINYINT(1), nullable=False, default=0)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/ncbi_taxonomy/models/#python.ensembl.ncbi_taxonomy.models.NCBITaxaNode.left_index","title":"<code>left_index = Column(INTEGER(10), nullable=False, default=0, index=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/ncbi_taxonomy/models/#python.ensembl.ncbi_taxonomy.models.NCBITaxaNode.parent","title":"<code>parent = relationship('NCBITaxaNode', remote_side=[taxon_id])</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/ncbi_taxonomy/models/#python.ensembl.ncbi_taxonomy.models.NCBITaxaNode.parent_id","title":"<code>parent_id = Column(INTEGER(10), ForeignKey('ncbi_taxa_node.taxon_id'), nullable=False, index=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/ncbi_taxonomy/models/#python.ensembl.ncbi_taxonomy.models.NCBITaxaNode.rank","title":"<code>rank = Column(CHAR(32), nullable=False, index=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/ncbi_taxonomy/models/#python.ensembl.ncbi_taxonomy.models.NCBITaxaNode.right_index","title":"<code>right_index = Column(INTEGER(10), nullable=False, default=0, index=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/ncbi_taxonomy/models/#python.ensembl.ncbi_taxonomy.models.NCBITaxaNode.root_id","title":"<code>root_id = Column(INTEGER(10), nullable=False, default=1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/ncbi_taxonomy/models/#python.ensembl.ncbi_taxonomy.models.NCBITaxaNode.taxon_id","title":"<code>taxon_id = Column(INTEGER(10), primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/ncbi_taxonomy/models/#python.ensembl.ncbi_taxonomy.models.NCBITaxonomy","title":"<code>NCBITaxonomy</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/ncbi_taxonomy/models.py</code> <pre><code>class NCBITaxonomy(Base):\n    ncbi_taxa_name_table = NCBITaxaName.__table__\n    ncbi_taxa_node_table = NCBITaxaNode.__table__\n\n    name_node_join = join(ncbi_taxa_name_table, ncbi_taxa_node_table)\n\n    __table__ = name_node_join\n\n    taxon_id = column_property(ncbi_taxa_name_table.c.taxon_id, ncbi_taxa_node_table.c.taxon_id)\n</code></pre>"},{"location":"reference/python/ensembl/ncbi_taxonomy/models/#python.ensembl.ncbi_taxonomy.models.NCBITaxonomy.name_node_join","title":"<code>name_node_join = join(ncbi_taxa_name_table, ncbi_taxa_node_table)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/ncbi_taxonomy/models/#python.ensembl.ncbi_taxonomy.models.NCBITaxonomy.ncbi_taxa_name_table","title":"<code>ncbi_taxa_name_table = NCBITaxaName.__table__</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/ncbi_taxonomy/models/#python.ensembl.ncbi_taxonomy.models.NCBITaxonomy.ncbi_taxa_node_table","title":"<code>ncbi_taxa_node_table = NCBITaxaNode.__table__</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/ncbi_taxonomy/models/#python.ensembl.ncbi_taxonomy.models.NCBITaxonomy.taxon_id","title":"<code>taxon_id = column_property(ncbi_taxa_name_table.c.taxon_id, ncbi_taxa_node_table.c.taxon_id)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/ncbi_taxonomy/api/","title":"api","text":""},{"location":"reference/python/ensembl/ncbi_taxonomy/api/#python.ensembl.ncbi_taxonomy.api","title":"<code>python.ensembl.ncbi_taxonomy.api</code>","text":"<p>Taxonomy API module</p>"},{"location":"reference/python/ensembl/ncbi_taxonomy/api/#python.ensembl.ncbi_taxonomy.api.Taxonomy","title":"<code>Taxonomy</code>","text":"<p>Contains all the taxonomy related functions over NCBITaxonomy ORM</p> <p>Attributes:</p> Name Type Description <code>session</code> <p>db Session()</p> Source code in <code>src/python/ensembl/ncbi_taxonomy/api/utils.py</code> <pre><code>@as_declarative()\nclass Taxonomy:\n    \"\"\"Contains all the taxonomy related functions over NCBITaxonomy ORM\n\n    Attributes:\n        session: db Session()\n    \"\"\"\n\n    @classmethod\n    def fetch_node_by_id(cls, session: Session, taxon_id: int) -&gt; NCBITaxonomy:\n        \"\"\"Returns taxonomy node object by ``taxon_id``\n\n        Args:\n            taxon_id: Unique taxonomy identifier in database\n\n        Raises:\n            sqlalchemy.orm.exc.NoResultFound: if ``taxon_id`` does not exist\n        \"\"\"\n        q = session.query(NCBITaxonomy).filter(NCBITaxonomy.taxon_id == taxon_id).first()\n        if not q:\n            raise NoResultFound()\n        return q\n\n    @classmethod\n    def fetch_taxon_by_species_name(cls, session: Session, name: str) -&gt; NCBITaxonomy:\n        \"\"\"Returns first taxonomy object matching ``name``\n\n        Args:\n            name: Scientific ncbi_taxa_name.name in database\n\n        Raises:\n            sqlalchemy.orm.exc.NoResultFound: if ``taxon_id`` does not exist\n        \"\"\"\n        q = (\n            session.query(NCBITaxonomy)\n            .filter(NCBITaxonomy.name == (name.replace(\"_\", \" \")))\n            .filter(NCBITaxonomy.name_class == \"scientific name\")\n            .first()\n        )\n        if not q:\n            raise NoResultFound()\n        return q\n\n    @classmethod\n    def parent(cls, session: Session, taxon_id: int) -&gt; NCBITaxonomy:\n        \"\"\"Returns taxonomy node object for parent node\n\n        Args:\n            taxon_id: Unique taxonomy identifier in database\n\n        Raises:\n            sqlalchemy.orm.exc.NoResultFound: if ``taxon_id`` does not exist\n        \"\"\"\n        ParentTaxonomy = aliased(NCBITaxonomy, name=\"parent_ncbi_taxonomy\")\n        q = (\n            session.query(NCBITaxonomy, ParentTaxonomy)\n            .outerjoin(ParentTaxonomy, NCBITaxonomy.parent_id == ParentTaxonomy.taxon_id)\n            .filter(NCBITaxonomy.taxon_id == taxon_id)\n            .filter(ParentTaxonomy.name_class == \"scientific name\")\n            .first()\n        )\n        try:\n            return q[1]\n        except TypeError as exc:\n            raise NoResultFound() from exc\n\n    @classmethod\n    def children(cls, session: Session, taxon_id: int) -&gt; tuple:\n        \"\"\"Returns taxonomy node object for children nodes\n\n        Args:\n            taxon_id: Unique taxonomy identifier in database\n\n        Raises:\n            sqlalchemy.orm.exc.NoResultFound: if ``taxon_id`` does not exist\n            or has no children\n        \"\"\"\n        q = (\n            session.query(NCBITaxonomy)\n            .filter(NCBITaxonomy.parent_id == taxon_id)\n            .filter(NCBITaxonomy.name_class == \"scientific name\")\n            .all()\n        )\n        results = list(q)\n        rows = [x.__dict__ for x in results]\n        q = tuple(rows)\n        if not q:\n            raise NoResultFound()\n        return q\n\n    @classmethod\n    def is_root(cls, session: Session, taxon_id: int) -&gt; bool:\n        \"\"\"Returns True if ``taxon_id`` is a root and False if not\n\n        Args:\n            taxon_id: Unique taxonomy identifier in database\n        \"\"\"\n        try:\n            if (\n                session.query(NCBITaxaNode)\n                .filter(NCBITaxaNode.root_id == taxon_id, NCBITaxaNode.taxon_id == taxon_id)\n                .one()\n            ):\n                return True\n        except NoResultFound:\n            return False\n        return False\n\n    @classmethod\n    def num_descendants(cls, session: Session, taxon_id: int) -&gt; int:\n        \"\"\"Returns number of descendants from ``taxon_id``\n\n        Args:\n            taxon_id: Unique taxonomy identifier in database\n\n        Raises:\n            sqlalchemy.orm.exc.NoResultFound: if ``taxon_id`` does not exist\n        \"\"\"\n        session.query(NCBITaxaNode).filter(NCBITaxaNode.taxon_id == taxon_id).one()\n        right_index = (\n            session.query(NCBITaxaNode.right_index).filter(NCBITaxaNode.taxon_id == taxon_id).scalar()\n        )\n        left_index = session.query(NCBITaxaNode.left_index).filter(NCBITaxaNode.taxon_id == taxon_id).scalar()\n        return (right_index - left_index - 1) / 2\n\n    @classmethod\n    def is_leaf(cls, session: Session, taxon_id: int) -&gt; bool:\n        \"\"\"Returns True if ``taxon_id`` is a leaf and False if not\n\n        Args:\n            taxon_id: Unique taxonomy identifier in database\n\n        Raises:\n            sqlalchemy.orm.exc.NoResultFound: if ``taxon_id`` does not exist\n        \"\"\"\n        if cls.num_descendants(session, taxon_id) == 0:\n            return True\n        return False\n\n    @classmethod\n    def fetch_ancestors(cls, session: Session, taxon_id: int) -&gt; Tuple:\n        \"\"\"Returns a tuple of ancestor node objects from ``taxon_id``\n\n        Args:\n            taxon_id: Unique taxonomy identifier in database\n\n        Raises:\n            sqlalchemy.orm.exc.NoResultFound: if ``taxon_id`` does not exist\n            or has no ancestors\n        \"\"\"\n        ParentTaxaNode = aliased(NCBITaxaNode)\n        q = (\n            session.query(ParentTaxaNode, NCBITaxaNode)\n            .outerjoin(\n                NCBITaxaNode,\n                and_(\n                    NCBITaxaNode.left_index.between(ParentTaxaNode.left_index, ParentTaxaNode.right_index),\n                    ParentTaxaNode.taxon_id != NCBITaxaNode.taxon_id,\n                ),\n            )\n            .filter(NCBITaxaNode.taxon_id == taxon_id)\n            .all()\n        )\n        if not q:\n            raise NoResultFound()\n        results = []\n        for row in q:\n            taxon = row[0].__dict__\n            results.append(taxon)\n        ordered_results = sorted(results, key=lambda x: x[\"taxon_id\"])\n        q = tuple(ordered_results)\n        return q\n\n    @classmethod\n    def all_common_ancestors(cls, session: Session, taxon_id_1: int, taxon_id_2: int) -&gt; tuple:\n        \"\"\"Returns a tuple of common ancestor node objects shared between taxa\n\n        Args:\n            taxon_id_1: Unique taxonomy identifier in database\n            taxon_id_2: Unique taxonomy identifier in database\n\n        Raises:\n            sqlalchemy.orm.exc.NoResultFound: if ``taxon_id_1`` or\n            ``taxon_id_2`` do not exist or have no common ancestors\n        \"\"\"\n        taxon_1_ancestors = cls.fetch_ancestors(session, taxon_id_1)\n        taxon_2_ancestors = cls.fetch_ancestors(session, taxon_id_2)\n        if taxon_1_ancestors is None or taxon_2_ancestors is None:\n            raise NoResultFound()\n        ancestors_1 = list(taxon_1_ancestors)\n        ancestors_2 = list(taxon_2_ancestors)\n        ancestors_ids_1 = [taxon[\"taxon_id\"] for taxon in ancestors_1]\n        ancestors_ids_2 = [taxon[\"taxon_id\"] for taxon in ancestors_2]\n        common_ancestors = list(set(ancestors_ids_1).intersection(ancestors_ids_2))\n        common_ancestors.sort(key=lambda taxon_id: (-cls.num_descendants(session, taxon_id), taxon_id))\n        all_common_ancs = [cls.fetch_node_by_id(session, taxon_id) for taxon_id in common_ancestors]\n        return tuple(all_common_ancs)\n\n    @classmethod\n    def last_common_ancestor(cls, session: Session, taxon_id_1: int, taxon_id_2: int) -&gt; NCBITaxonomy:\n        \"\"\"Returns most recent common ancestor node object shared between taxa\n\n        Args:\n            taxon_id_1: Unique taxonomy identifier in database\n            taxon_id_2: Unique taxonomy identifier in database\n\n        Raises:\n            sqlalchemy.orm.exc.NoResultFound: if ``taxon_id_1`` or\n            ``taxon_id_2`` do not exist or have no common ancestors\n        \"\"\"\n        common_ancestors = cls.all_common_ancestors(session, taxon_id_1, taxon_id_2)\n        return common_ancestors[-1]\n</code></pre>"},{"location":"reference/python/ensembl/ncbi_taxonomy/api/#python.ensembl.ncbi_taxonomy.api.Taxonomy.all_common_ancestors","title":"<code>all_common_ancestors(session, taxon_id_1, taxon_id_2)</code>  <code>classmethod</code>","text":"<p>Returns a tuple of common ancestor node objects shared between taxa</p> <p>Parameters:</p> Name Type Description Default <code>taxon_id_1</code> <code>int</code> <p>Unique taxonomy identifier in database</p> required <code>taxon_id_2</code> <code>int</code> <p>Unique taxonomy identifier in database</p> required <p>Raises:</p> Type Description <code>NoResultFound</code> <p>if <code>taxon_id_1</code> or</p> Source code in <code>src/python/ensembl/ncbi_taxonomy/api/utils.py</code> <pre><code>@classmethod\ndef all_common_ancestors(cls, session: Session, taxon_id_1: int, taxon_id_2: int) -&gt; tuple:\n    \"\"\"Returns a tuple of common ancestor node objects shared between taxa\n\n    Args:\n        taxon_id_1: Unique taxonomy identifier in database\n        taxon_id_2: Unique taxonomy identifier in database\n\n    Raises:\n        sqlalchemy.orm.exc.NoResultFound: if ``taxon_id_1`` or\n        ``taxon_id_2`` do not exist or have no common ancestors\n    \"\"\"\n    taxon_1_ancestors = cls.fetch_ancestors(session, taxon_id_1)\n    taxon_2_ancestors = cls.fetch_ancestors(session, taxon_id_2)\n    if taxon_1_ancestors is None or taxon_2_ancestors is None:\n        raise NoResultFound()\n    ancestors_1 = list(taxon_1_ancestors)\n    ancestors_2 = list(taxon_2_ancestors)\n    ancestors_ids_1 = [taxon[\"taxon_id\"] for taxon in ancestors_1]\n    ancestors_ids_2 = [taxon[\"taxon_id\"] for taxon in ancestors_2]\n    common_ancestors = list(set(ancestors_ids_1).intersection(ancestors_ids_2))\n    common_ancestors.sort(key=lambda taxon_id: (-cls.num_descendants(session, taxon_id), taxon_id))\n    all_common_ancs = [cls.fetch_node_by_id(session, taxon_id) for taxon_id in common_ancestors]\n    return tuple(all_common_ancs)\n</code></pre>"},{"location":"reference/python/ensembl/ncbi_taxonomy/api/#python.ensembl.ncbi_taxonomy.api.Taxonomy.children","title":"<code>children(session, taxon_id)</code>  <code>classmethod</code>","text":"<p>Returns taxonomy node object for children nodes</p> <p>Parameters:</p> Name Type Description Default <code>taxon_id</code> <code>int</code> <p>Unique taxonomy identifier in database</p> required <p>Raises:</p> Type Description <code>NoResultFound</code> <p>if <code>taxon_id</code> does not exist</p> Source code in <code>src/python/ensembl/ncbi_taxonomy/api/utils.py</code> <pre><code>@classmethod\ndef children(cls, session: Session, taxon_id: int) -&gt; tuple:\n    \"\"\"Returns taxonomy node object for children nodes\n\n    Args:\n        taxon_id: Unique taxonomy identifier in database\n\n    Raises:\n        sqlalchemy.orm.exc.NoResultFound: if ``taxon_id`` does not exist\n        or has no children\n    \"\"\"\n    q = (\n        session.query(NCBITaxonomy)\n        .filter(NCBITaxonomy.parent_id == taxon_id)\n        .filter(NCBITaxonomy.name_class == \"scientific name\")\n        .all()\n    )\n    results = list(q)\n    rows = [x.__dict__ for x in results]\n    q = tuple(rows)\n    if not q:\n        raise NoResultFound()\n    return q\n</code></pre>"},{"location":"reference/python/ensembl/ncbi_taxonomy/api/#python.ensembl.ncbi_taxonomy.api.Taxonomy.fetch_ancestors","title":"<code>fetch_ancestors(session, taxon_id)</code>  <code>classmethod</code>","text":"<p>Returns a tuple of ancestor node objects from <code>taxon_id</code></p> <p>Parameters:</p> Name Type Description Default <code>taxon_id</code> <code>int</code> <p>Unique taxonomy identifier in database</p> required <p>Raises:</p> Type Description <code>NoResultFound</code> <p>if <code>taxon_id</code> does not exist</p> Source code in <code>src/python/ensembl/ncbi_taxonomy/api/utils.py</code> <pre><code>@classmethod\ndef fetch_ancestors(cls, session: Session, taxon_id: int) -&gt; Tuple:\n    \"\"\"Returns a tuple of ancestor node objects from ``taxon_id``\n\n    Args:\n        taxon_id: Unique taxonomy identifier in database\n\n    Raises:\n        sqlalchemy.orm.exc.NoResultFound: if ``taxon_id`` does not exist\n        or has no ancestors\n    \"\"\"\n    ParentTaxaNode = aliased(NCBITaxaNode)\n    q = (\n        session.query(ParentTaxaNode, NCBITaxaNode)\n        .outerjoin(\n            NCBITaxaNode,\n            and_(\n                NCBITaxaNode.left_index.between(ParentTaxaNode.left_index, ParentTaxaNode.right_index),\n                ParentTaxaNode.taxon_id != NCBITaxaNode.taxon_id,\n            ),\n        )\n        .filter(NCBITaxaNode.taxon_id == taxon_id)\n        .all()\n    )\n    if not q:\n        raise NoResultFound()\n    results = []\n    for row in q:\n        taxon = row[0].__dict__\n        results.append(taxon)\n    ordered_results = sorted(results, key=lambda x: x[\"taxon_id\"])\n    q = tuple(ordered_results)\n    return q\n</code></pre>"},{"location":"reference/python/ensembl/ncbi_taxonomy/api/#python.ensembl.ncbi_taxonomy.api.Taxonomy.fetch_node_by_id","title":"<code>fetch_node_by_id(session, taxon_id)</code>  <code>classmethod</code>","text":"<p>Returns taxonomy node object by <code>taxon_id</code></p> <p>Parameters:</p> Name Type Description Default <code>taxon_id</code> <code>int</code> <p>Unique taxonomy identifier in database</p> required <p>Raises:</p> Type Description <code>NoResultFound</code> <p>if <code>taxon_id</code> does not exist</p> Source code in <code>src/python/ensembl/ncbi_taxonomy/api/utils.py</code> <pre><code>@classmethod\ndef fetch_node_by_id(cls, session: Session, taxon_id: int) -&gt; NCBITaxonomy:\n    \"\"\"Returns taxonomy node object by ``taxon_id``\n\n    Args:\n        taxon_id: Unique taxonomy identifier in database\n\n    Raises:\n        sqlalchemy.orm.exc.NoResultFound: if ``taxon_id`` does not exist\n    \"\"\"\n    q = session.query(NCBITaxonomy).filter(NCBITaxonomy.taxon_id == taxon_id).first()\n    if not q:\n        raise NoResultFound()\n    return q\n</code></pre>"},{"location":"reference/python/ensembl/ncbi_taxonomy/api/#python.ensembl.ncbi_taxonomy.api.Taxonomy.fetch_taxon_by_species_name","title":"<code>fetch_taxon_by_species_name(session, name)</code>  <code>classmethod</code>","text":"<p>Returns first taxonomy object matching <code>name</code></p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Scientific ncbi_taxa_name.name in database</p> required <p>Raises:</p> Type Description <code>NoResultFound</code> <p>if <code>taxon_id</code> does not exist</p> Source code in <code>src/python/ensembl/ncbi_taxonomy/api/utils.py</code> <pre><code>@classmethod\ndef fetch_taxon_by_species_name(cls, session: Session, name: str) -&gt; NCBITaxonomy:\n    \"\"\"Returns first taxonomy object matching ``name``\n\n    Args:\n        name: Scientific ncbi_taxa_name.name in database\n\n    Raises:\n        sqlalchemy.orm.exc.NoResultFound: if ``taxon_id`` does not exist\n    \"\"\"\n    q = (\n        session.query(NCBITaxonomy)\n        .filter(NCBITaxonomy.name == (name.replace(\"_\", \" \")))\n        .filter(NCBITaxonomy.name_class == \"scientific name\")\n        .first()\n    )\n    if not q:\n        raise NoResultFound()\n    return q\n</code></pre>"},{"location":"reference/python/ensembl/ncbi_taxonomy/api/#python.ensembl.ncbi_taxonomy.api.Taxonomy.is_leaf","title":"<code>is_leaf(session, taxon_id)</code>  <code>classmethod</code>","text":"<p>Returns True if <code>taxon_id</code> is a leaf and False if not</p> <p>Parameters:</p> Name Type Description Default <code>taxon_id</code> <code>int</code> <p>Unique taxonomy identifier in database</p> required <p>Raises:</p> Type Description <code>NoResultFound</code> <p>if <code>taxon_id</code> does not exist</p> Source code in <code>src/python/ensembl/ncbi_taxonomy/api/utils.py</code> <pre><code>@classmethod\ndef is_leaf(cls, session: Session, taxon_id: int) -&gt; bool:\n    \"\"\"Returns True if ``taxon_id`` is a leaf and False if not\n\n    Args:\n        taxon_id: Unique taxonomy identifier in database\n\n    Raises:\n        sqlalchemy.orm.exc.NoResultFound: if ``taxon_id`` does not exist\n    \"\"\"\n    if cls.num_descendants(session, taxon_id) == 0:\n        return True\n    return False\n</code></pre>"},{"location":"reference/python/ensembl/ncbi_taxonomy/api/#python.ensembl.ncbi_taxonomy.api.Taxonomy.is_root","title":"<code>is_root(session, taxon_id)</code>  <code>classmethod</code>","text":"<p>Returns True if <code>taxon_id</code> is a root and False if not</p> <p>Parameters:</p> Name Type Description Default <code>taxon_id</code> <code>int</code> <p>Unique taxonomy identifier in database</p> required Source code in <code>src/python/ensembl/ncbi_taxonomy/api/utils.py</code> <pre><code>@classmethod\ndef is_root(cls, session: Session, taxon_id: int) -&gt; bool:\n    \"\"\"Returns True if ``taxon_id`` is a root and False if not\n\n    Args:\n        taxon_id: Unique taxonomy identifier in database\n    \"\"\"\n    try:\n        if (\n            session.query(NCBITaxaNode)\n            .filter(NCBITaxaNode.root_id == taxon_id, NCBITaxaNode.taxon_id == taxon_id)\n            .one()\n        ):\n            return True\n    except NoResultFound:\n        return False\n    return False\n</code></pre>"},{"location":"reference/python/ensembl/ncbi_taxonomy/api/#python.ensembl.ncbi_taxonomy.api.Taxonomy.last_common_ancestor","title":"<code>last_common_ancestor(session, taxon_id_1, taxon_id_2)</code>  <code>classmethod</code>","text":"<p>Returns most recent common ancestor node object shared between taxa</p> <p>Parameters:</p> Name Type Description Default <code>taxon_id_1</code> <code>int</code> <p>Unique taxonomy identifier in database</p> required <code>taxon_id_2</code> <code>int</code> <p>Unique taxonomy identifier in database</p> required <p>Raises:</p> Type Description <code>NoResultFound</code> <p>if <code>taxon_id_1</code> or</p> Source code in <code>src/python/ensembl/ncbi_taxonomy/api/utils.py</code> <pre><code>@classmethod\ndef last_common_ancestor(cls, session: Session, taxon_id_1: int, taxon_id_2: int) -&gt; NCBITaxonomy:\n    \"\"\"Returns most recent common ancestor node object shared between taxa\n\n    Args:\n        taxon_id_1: Unique taxonomy identifier in database\n        taxon_id_2: Unique taxonomy identifier in database\n\n    Raises:\n        sqlalchemy.orm.exc.NoResultFound: if ``taxon_id_1`` or\n        ``taxon_id_2`` do not exist or have no common ancestors\n    \"\"\"\n    common_ancestors = cls.all_common_ancestors(session, taxon_id_1, taxon_id_2)\n    return common_ancestors[-1]\n</code></pre>"},{"location":"reference/python/ensembl/ncbi_taxonomy/api/#python.ensembl.ncbi_taxonomy.api.Taxonomy.num_descendants","title":"<code>num_descendants(session, taxon_id)</code>  <code>classmethod</code>","text":"<p>Returns number of descendants from <code>taxon_id</code></p> <p>Parameters:</p> Name Type Description Default <code>taxon_id</code> <code>int</code> <p>Unique taxonomy identifier in database</p> required <p>Raises:</p> Type Description <code>NoResultFound</code> <p>if <code>taxon_id</code> does not exist</p> Source code in <code>src/python/ensembl/ncbi_taxonomy/api/utils.py</code> <pre><code>@classmethod\ndef num_descendants(cls, session: Session, taxon_id: int) -&gt; int:\n    \"\"\"Returns number of descendants from ``taxon_id``\n\n    Args:\n        taxon_id: Unique taxonomy identifier in database\n\n    Raises:\n        sqlalchemy.orm.exc.NoResultFound: if ``taxon_id`` does not exist\n    \"\"\"\n    session.query(NCBITaxaNode).filter(NCBITaxaNode.taxon_id == taxon_id).one()\n    right_index = (\n        session.query(NCBITaxaNode.right_index).filter(NCBITaxaNode.taxon_id == taxon_id).scalar()\n    )\n    left_index = session.query(NCBITaxaNode.left_index).filter(NCBITaxaNode.taxon_id == taxon_id).scalar()\n    return (right_index - left_index - 1) / 2\n</code></pre>"},{"location":"reference/python/ensembl/ncbi_taxonomy/api/#python.ensembl.ncbi_taxonomy.api.Taxonomy.parent","title":"<code>parent(session, taxon_id)</code>  <code>classmethod</code>","text":"<p>Returns taxonomy node object for parent node</p> <p>Parameters:</p> Name Type Description Default <code>taxon_id</code> <code>int</code> <p>Unique taxonomy identifier in database</p> required <p>Raises:</p> Type Description <code>NoResultFound</code> <p>if <code>taxon_id</code> does not exist</p> Source code in <code>src/python/ensembl/ncbi_taxonomy/api/utils.py</code> <pre><code>@classmethod\ndef parent(cls, session: Session, taxon_id: int) -&gt; NCBITaxonomy:\n    \"\"\"Returns taxonomy node object for parent node\n\n    Args:\n        taxon_id: Unique taxonomy identifier in database\n\n    Raises:\n        sqlalchemy.orm.exc.NoResultFound: if ``taxon_id`` does not exist\n    \"\"\"\n    ParentTaxonomy = aliased(NCBITaxonomy, name=\"parent_ncbi_taxonomy\")\n    q = (\n        session.query(NCBITaxonomy, ParentTaxonomy)\n        .outerjoin(ParentTaxonomy, NCBITaxonomy.parent_id == ParentTaxonomy.taxon_id)\n        .filter(NCBITaxonomy.taxon_id == taxon_id)\n        .filter(ParentTaxonomy.name_class == \"scientific name\")\n        .first()\n    )\n    try:\n        return q[1]\n    except TypeError as exc:\n        raise NoResultFound() from exc\n</code></pre>"},{"location":"reference/python/ensembl/ncbi_taxonomy/api/utils/","title":"utils","text":""},{"location":"reference/python/ensembl/ncbi_taxonomy/api/utils/#python.ensembl.ncbi_taxonomy.api.utils","title":"<code>python.ensembl.ncbi_taxonomy.api.utils</code>","text":"<p>Taxonomy API utils.</p> <p>This module constitutes a set of utils through a Taxonomy API main class given a Taxonomy ORM compatible database session.</p> <p>Typical usage example::</p> <pre><code>from ensembl.database import DBConnection\nfrom ensembl.ncbi_taxonomy.api.utils import Taxonomy\ndbc = DBConnection('mysql://user@mysql-host:port/dbname')\nwith dbc.session_scope() as session:\n    # Get the last common ancestor of dog and mouse\n    dog_node = Taxonomy.fetch_taxon_by_species_name(session, 'canis_lupus_familiaris')\n    mouse_node = Taxonomy.fetch_taxon_by_species_name(session, 'mus_musculus')\n    common_anc = Taxonomy.last_common_ancestor(session, dog_node.taxon_id, mouse_node.taxon_id)\n</code></pre>"},{"location":"reference/python/ensembl/ncbi_taxonomy/api/utils/#python.ensembl.ncbi_taxonomy.api.utils.Taxonomy","title":"<code>Taxonomy</code>","text":"<p>Contains all the taxonomy related functions over NCBITaxonomy ORM</p> <p>Attributes:</p> Name Type Description <code>session</code> <p>db Session()</p> Source code in <code>src/python/ensembl/ncbi_taxonomy/api/utils.py</code> <pre><code>@as_declarative()\nclass Taxonomy:\n    \"\"\"Contains all the taxonomy related functions over NCBITaxonomy ORM\n\n    Attributes:\n        session: db Session()\n    \"\"\"\n\n    @classmethod\n    def fetch_node_by_id(cls, session: Session, taxon_id: int) -&gt; NCBITaxonomy:\n        \"\"\"Returns taxonomy node object by ``taxon_id``\n\n        Args:\n            taxon_id: Unique taxonomy identifier in database\n\n        Raises:\n            sqlalchemy.orm.exc.NoResultFound: if ``taxon_id`` does not exist\n        \"\"\"\n        q = session.query(NCBITaxonomy).filter(NCBITaxonomy.taxon_id == taxon_id).first()\n        if not q:\n            raise NoResultFound()\n        return q\n\n    @classmethod\n    def fetch_taxon_by_species_name(cls, session: Session, name: str) -&gt; NCBITaxonomy:\n        \"\"\"Returns first taxonomy object matching ``name``\n\n        Args:\n            name: Scientific ncbi_taxa_name.name in database\n\n        Raises:\n            sqlalchemy.orm.exc.NoResultFound: if ``taxon_id`` does not exist\n        \"\"\"\n        q = (\n            session.query(NCBITaxonomy)\n            .filter(NCBITaxonomy.name == (name.replace(\"_\", \" \")))\n            .filter(NCBITaxonomy.name_class == \"scientific name\")\n            .first()\n        )\n        if not q:\n            raise NoResultFound()\n        return q\n\n    @classmethod\n    def parent(cls, session: Session, taxon_id: int) -&gt; NCBITaxonomy:\n        \"\"\"Returns taxonomy node object for parent node\n\n        Args:\n            taxon_id: Unique taxonomy identifier in database\n\n        Raises:\n            sqlalchemy.orm.exc.NoResultFound: if ``taxon_id`` does not exist\n        \"\"\"\n        ParentTaxonomy = aliased(NCBITaxonomy, name=\"parent_ncbi_taxonomy\")\n        q = (\n            session.query(NCBITaxonomy, ParentTaxonomy)\n            .outerjoin(ParentTaxonomy, NCBITaxonomy.parent_id == ParentTaxonomy.taxon_id)\n            .filter(NCBITaxonomy.taxon_id == taxon_id)\n            .filter(ParentTaxonomy.name_class == \"scientific name\")\n            .first()\n        )\n        try:\n            return q[1]\n        except TypeError as exc:\n            raise NoResultFound() from exc\n\n    @classmethod\n    def children(cls, session: Session, taxon_id: int) -&gt; tuple:\n        \"\"\"Returns taxonomy node object for children nodes\n\n        Args:\n            taxon_id: Unique taxonomy identifier in database\n\n        Raises:\n            sqlalchemy.orm.exc.NoResultFound: if ``taxon_id`` does not exist\n            or has no children\n        \"\"\"\n        q = (\n            session.query(NCBITaxonomy)\n            .filter(NCBITaxonomy.parent_id == taxon_id)\n            .filter(NCBITaxonomy.name_class == \"scientific name\")\n            .all()\n        )\n        results = list(q)\n        rows = [x.__dict__ for x in results]\n        q = tuple(rows)\n        if not q:\n            raise NoResultFound()\n        return q\n\n    @classmethod\n    def is_root(cls, session: Session, taxon_id: int) -&gt; bool:\n        \"\"\"Returns True if ``taxon_id`` is a root and False if not\n\n        Args:\n            taxon_id: Unique taxonomy identifier in database\n        \"\"\"\n        try:\n            if (\n                session.query(NCBITaxaNode)\n                .filter(NCBITaxaNode.root_id == taxon_id, NCBITaxaNode.taxon_id == taxon_id)\n                .one()\n            ):\n                return True\n        except NoResultFound:\n            return False\n        return False\n\n    @classmethod\n    def num_descendants(cls, session: Session, taxon_id: int) -&gt; int:\n        \"\"\"Returns number of descendants from ``taxon_id``\n\n        Args:\n            taxon_id: Unique taxonomy identifier in database\n\n        Raises:\n            sqlalchemy.orm.exc.NoResultFound: if ``taxon_id`` does not exist\n        \"\"\"\n        session.query(NCBITaxaNode).filter(NCBITaxaNode.taxon_id == taxon_id).one()\n        right_index = (\n            session.query(NCBITaxaNode.right_index).filter(NCBITaxaNode.taxon_id == taxon_id).scalar()\n        )\n        left_index = session.query(NCBITaxaNode.left_index).filter(NCBITaxaNode.taxon_id == taxon_id).scalar()\n        return (right_index - left_index - 1) / 2\n\n    @classmethod\n    def is_leaf(cls, session: Session, taxon_id: int) -&gt; bool:\n        \"\"\"Returns True if ``taxon_id`` is a leaf and False if not\n\n        Args:\n            taxon_id: Unique taxonomy identifier in database\n\n        Raises:\n            sqlalchemy.orm.exc.NoResultFound: if ``taxon_id`` does not exist\n        \"\"\"\n        if cls.num_descendants(session, taxon_id) == 0:\n            return True\n        return False\n\n    @classmethod\n    def fetch_ancestors(cls, session: Session, taxon_id: int) -&gt; Tuple:\n        \"\"\"Returns a tuple of ancestor node objects from ``taxon_id``\n\n        Args:\n            taxon_id: Unique taxonomy identifier in database\n\n        Raises:\n            sqlalchemy.orm.exc.NoResultFound: if ``taxon_id`` does not exist\n            or has no ancestors\n        \"\"\"\n        ParentTaxaNode = aliased(NCBITaxaNode)\n        q = (\n            session.query(ParentTaxaNode, NCBITaxaNode)\n            .outerjoin(\n                NCBITaxaNode,\n                and_(\n                    NCBITaxaNode.left_index.between(ParentTaxaNode.left_index, ParentTaxaNode.right_index),\n                    ParentTaxaNode.taxon_id != NCBITaxaNode.taxon_id,\n                ),\n            )\n            .filter(NCBITaxaNode.taxon_id == taxon_id)\n            .all()\n        )\n        if not q:\n            raise NoResultFound()\n        results = []\n        for row in q:\n            taxon = row[0].__dict__\n            results.append(taxon)\n        ordered_results = sorted(results, key=lambda x: x[\"taxon_id\"])\n        q = tuple(ordered_results)\n        return q\n\n    @classmethod\n    def all_common_ancestors(cls, session: Session, taxon_id_1: int, taxon_id_2: int) -&gt; tuple:\n        \"\"\"Returns a tuple of common ancestor node objects shared between taxa\n\n        Args:\n            taxon_id_1: Unique taxonomy identifier in database\n            taxon_id_2: Unique taxonomy identifier in database\n\n        Raises:\n            sqlalchemy.orm.exc.NoResultFound: if ``taxon_id_1`` or\n            ``taxon_id_2`` do not exist or have no common ancestors\n        \"\"\"\n        taxon_1_ancestors = cls.fetch_ancestors(session, taxon_id_1)\n        taxon_2_ancestors = cls.fetch_ancestors(session, taxon_id_2)\n        if taxon_1_ancestors is None or taxon_2_ancestors is None:\n            raise NoResultFound()\n        ancestors_1 = list(taxon_1_ancestors)\n        ancestors_2 = list(taxon_2_ancestors)\n        ancestors_ids_1 = [taxon[\"taxon_id\"] for taxon in ancestors_1]\n        ancestors_ids_2 = [taxon[\"taxon_id\"] for taxon in ancestors_2]\n        common_ancestors = list(set(ancestors_ids_1).intersection(ancestors_ids_2))\n        common_ancestors.sort(key=lambda taxon_id: (-cls.num_descendants(session, taxon_id), taxon_id))\n        all_common_ancs = [cls.fetch_node_by_id(session, taxon_id) for taxon_id in common_ancestors]\n        return tuple(all_common_ancs)\n\n    @classmethod\n    def last_common_ancestor(cls, session: Session, taxon_id_1: int, taxon_id_2: int) -&gt; NCBITaxonomy:\n        \"\"\"Returns most recent common ancestor node object shared between taxa\n\n        Args:\n            taxon_id_1: Unique taxonomy identifier in database\n            taxon_id_2: Unique taxonomy identifier in database\n\n        Raises:\n            sqlalchemy.orm.exc.NoResultFound: if ``taxon_id_1`` or\n            ``taxon_id_2`` do not exist or have no common ancestors\n        \"\"\"\n        common_ancestors = cls.all_common_ancestors(session, taxon_id_1, taxon_id_2)\n        return common_ancestors[-1]\n</code></pre>"},{"location":"reference/python/ensembl/ncbi_taxonomy/api/utils/#python.ensembl.ncbi_taxonomy.api.utils.Taxonomy.all_common_ancestors","title":"<code>all_common_ancestors(session, taxon_id_1, taxon_id_2)</code>  <code>classmethod</code>","text":"<p>Returns a tuple of common ancestor node objects shared between taxa</p> <p>Parameters:</p> Name Type Description Default <code>taxon_id_1</code> <code>int</code> <p>Unique taxonomy identifier in database</p> required <code>taxon_id_2</code> <code>int</code> <p>Unique taxonomy identifier in database</p> required <p>Raises:</p> Type Description <code>NoResultFound</code> <p>if <code>taxon_id_1</code> or</p> Source code in <code>src/python/ensembl/ncbi_taxonomy/api/utils.py</code> <pre><code>@classmethod\ndef all_common_ancestors(cls, session: Session, taxon_id_1: int, taxon_id_2: int) -&gt; tuple:\n    \"\"\"Returns a tuple of common ancestor node objects shared between taxa\n\n    Args:\n        taxon_id_1: Unique taxonomy identifier in database\n        taxon_id_2: Unique taxonomy identifier in database\n\n    Raises:\n        sqlalchemy.orm.exc.NoResultFound: if ``taxon_id_1`` or\n        ``taxon_id_2`` do not exist or have no common ancestors\n    \"\"\"\n    taxon_1_ancestors = cls.fetch_ancestors(session, taxon_id_1)\n    taxon_2_ancestors = cls.fetch_ancestors(session, taxon_id_2)\n    if taxon_1_ancestors is None or taxon_2_ancestors is None:\n        raise NoResultFound()\n    ancestors_1 = list(taxon_1_ancestors)\n    ancestors_2 = list(taxon_2_ancestors)\n    ancestors_ids_1 = [taxon[\"taxon_id\"] for taxon in ancestors_1]\n    ancestors_ids_2 = [taxon[\"taxon_id\"] for taxon in ancestors_2]\n    common_ancestors = list(set(ancestors_ids_1).intersection(ancestors_ids_2))\n    common_ancestors.sort(key=lambda taxon_id: (-cls.num_descendants(session, taxon_id), taxon_id))\n    all_common_ancs = [cls.fetch_node_by_id(session, taxon_id) for taxon_id in common_ancestors]\n    return tuple(all_common_ancs)\n</code></pre>"},{"location":"reference/python/ensembl/ncbi_taxonomy/api/utils/#python.ensembl.ncbi_taxonomy.api.utils.Taxonomy.children","title":"<code>children(session, taxon_id)</code>  <code>classmethod</code>","text":"<p>Returns taxonomy node object for children nodes</p> <p>Parameters:</p> Name Type Description Default <code>taxon_id</code> <code>int</code> <p>Unique taxonomy identifier in database</p> required <p>Raises:</p> Type Description <code>NoResultFound</code> <p>if <code>taxon_id</code> does not exist</p> Source code in <code>src/python/ensembl/ncbi_taxonomy/api/utils.py</code> <pre><code>@classmethod\ndef children(cls, session: Session, taxon_id: int) -&gt; tuple:\n    \"\"\"Returns taxonomy node object for children nodes\n\n    Args:\n        taxon_id: Unique taxonomy identifier in database\n\n    Raises:\n        sqlalchemy.orm.exc.NoResultFound: if ``taxon_id`` does not exist\n        or has no children\n    \"\"\"\n    q = (\n        session.query(NCBITaxonomy)\n        .filter(NCBITaxonomy.parent_id == taxon_id)\n        .filter(NCBITaxonomy.name_class == \"scientific name\")\n        .all()\n    )\n    results = list(q)\n    rows = [x.__dict__ for x in results]\n    q = tuple(rows)\n    if not q:\n        raise NoResultFound()\n    return q\n</code></pre>"},{"location":"reference/python/ensembl/ncbi_taxonomy/api/utils/#python.ensembl.ncbi_taxonomy.api.utils.Taxonomy.fetch_ancestors","title":"<code>fetch_ancestors(session, taxon_id)</code>  <code>classmethod</code>","text":"<p>Returns a tuple of ancestor node objects from <code>taxon_id</code></p> <p>Parameters:</p> Name Type Description Default <code>taxon_id</code> <code>int</code> <p>Unique taxonomy identifier in database</p> required <p>Raises:</p> Type Description <code>NoResultFound</code> <p>if <code>taxon_id</code> does not exist</p> Source code in <code>src/python/ensembl/ncbi_taxonomy/api/utils.py</code> <pre><code>@classmethod\ndef fetch_ancestors(cls, session: Session, taxon_id: int) -&gt; Tuple:\n    \"\"\"Returns a tuple of ancestor node objects from ``taxon_id``\n\n    Args:\n        taxon_id: Unique taxonomy identifier in database\n\n    Raises:\n        sqlalchemy.orm.exc.NoResultFound: if ``taxon_id`` does not exist\n        or has no ancestors\n    \"\"\"\n    ParentTaxaNode = aliased(NCBITaxaNode)\n    q = (\n        session.query(ParentTaxaNode, NCBITaxaNode)\n        .outerjoin(\n            NCBITaxaNode,\n            and_(\n                NCBITaxaNode.left_index.between(ParentTaxaNode.left_index, ParentTaxaNode.right_index),\n                ParentTaxaNode.taxon_id != NCBITaxaNode.taxon_id,\n            ),\n        )\n        .filter(NCBITaxaNode.taxon_id == taxon_id)\n        .all()\n    )\n    if not q:\n        raise NoResultFound()\n    results = []\n    for row in q:\n        taxon = row[0].__dict__\n        results.append(taxon)\n    ordered_results = sorted(results, key=lambda x: x[\"taxon_id\"])\n    q = tuple(ordered_results)\n    return q\n</code></pre>"},{"location":"reference/python/ensembl/ncbi_taxonomy/api/utils/#python.ensembl.ncbi_taxonomy.api.utils.Taxonomy.fetch_node_by_id","title":"<code>fetch_node_by_id(session, taxon_id)</code>  <code>classmethod</code>","text":"<p>Returns taxonomy node object by <code>taxon_id</code></p> <p>Parameters:</p> Name Type Description Default <code>taxon_id</code> <code>int</code> <p>Unique taxonomy identifier in database</p> required <p>Raises:</p> Type Description <code>NoResultFound</code> <p>if <code>taxon_id</code> does not exist</p> Source code in <code>src/python/ensembl/ncbi_taxonomy/api/utils.py</code> <pre><code>@classmethod\ndef fetch_node_by_id(cls, session: Session, taxon_id: int) -&gt; NCBITaxonomy:\n    \"\"\"Returns taxonomy node object by ``taxon_id``\n\n    Args:\n        taxon_id: Unique taxonomy identifier in database\n\n    Raises:\n        sqlalchemy.orm.exc.NoResultFound: if ``taxon_id`` does not exist\n    \"\"\"\n    q = session.query(NCBITaxonomy).filter(NCBITaxonomy.taxon_id == taxon_id).first()\n    if not q:\n        raise NoResultFound()\n    return q\n</code></pre>"},{"location":"reference/python/ensembl/ncbi_taxonomy/api/utils/#python.ensembl.ncbi_taxonomy.api.utils.Taxonomy.fetch_taxon_by_species_name","title":"<code>fetch_taxon_by_species_name(session, name)</code>  <code>classmethod</code>","text":"<p>Returns first taxonomy object matching <code>name</code></p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Scientific ncbi_taxa_name.name in database</p> required <p>Raises:</p> Type Description <code>NoResultFound</code> <p>if <code>taxon_id</code> does not exist</p> Source code in <code>src/python/ensembl/ncbi_taxonomy/api/utils.py</code> <pre><code>@classmethod\ndef fetch_taxon_by_species_name(cls, session: Session, name: str) -&gt; NCBITaxonomy:\n    \"\"\"Returns first taxonomy object matching ``name``\n\n    Args:\n        name: Scientific ncbi_taxa_name.name in database\n\n    Raises:\n        sqlalchemy.orm.exc.NoResultFound: if ``taxon_id`` does not exist\n    \"\"\"\n    q = (\n        session.query(NCBITaxonomy)\n        .filter(NCBITaxonomy.name == (name.replace(\"_\", \" \")))\n        .filter(NCBITaxonomy.name_class == \"scientific name\")\n        .first()\n    )\n    if not q:\n        raise NoResultFound()\n    return q\n</code></pre>"},{"location":"reference/python/ensembl/ncbi_taxonomy/api/utils/#python.ensembl.ncbi_taxonomy.api.utils.Taxonomy.is_leaf","title":"<code>is_leaf(session, taxon_id)</code>  <code>classmethod</code>","text":"<p>Returns True if <code>taxon_id</code> is a leaf and False if not</p> <p>Parameters:</p> Name Type Description Default <code>taxon_id</code> <code>int</code> <p>Unique taxonomy identifier in database</p> required <p>Raises:</p> Type Description <code>NoResultFound</code> <p>if <code>taxon_id</code> does not exist</p> Source code in <code>src/python/ensembl/ncbi_taxonomy/api/utils.py</code> <pre><code>@classmethod\ndef is_leaf(cls, session: Session, taxon_id: int) -&gt; bool:\n    \"\"\"Returns True if ``taxon_id`` is a leaf and False if not\n\n    Args:\n        taxon_id: Unique taxonomy identifier in database\n\n    Raises:\n        sqlalchemy.orm.exc.NoResultFound: if ``taxon_id`` does not exist\n    \"\"\"\n    if cls.num_descendants(session, taxon_id) == 0:\n        return True\n    return False\n</code></pre>"},{"location":"reference/python/ensembl/ncbi_taxonomy/api/utils/#python.ensembl.ncbi_taxonomy.api.utils.Taxonomy.is_root","title":"<code>is_root(session, taxon_id)</code>  <code>classmethod</code>","text":"<p>Returns True if <code>taxon_id</code> is a root and False if not</p> <p>Parameters:</p> Name Type Description Default <code>taxon_id</code> <code>int</code> <p>Unique taxonomy identifier in database</p> required Source code in <code>src/python/ensembl/ncbi_taxonomy/api/utils.py</code> <pre><code>@classmethod\ndef is_root(cls, session: Session, taxon_id: int) -&gt; bool:\n    \"\"\"Returns True if ``taxon_id`` is a root and False if not\n\n    Args:\n        taxon_id: Unique taxonomy identifier in database\n    \"\"\"\n    try:\n        if (\n            session.query(NCBITaxaNode)\n            .filter(NCBITaxaNode.root_id == taxon_id, NCBITaxaNode.taxon_id == taxon_id)\n            .one()\n        ):\n            return True\n    except NoResultFound:\n        return False\n    return False\n</code></pre>"},{"location":"reference/python/ensembl/ncbi_taxonomy/api/utils/#python.ensembl.ncbi_taxonomy.api.utils.Taxonomy.last_common_ancestor","title":"<code>last_common_ancestor(session, taxon_id_1, taxon_id_2)</code>  <code>classmethod</code>","text":"<p>Returns most recent common ancestor node object shared between taxa</p> <p>Parameters:</p> Name Type Description Default <code>taxon_id_1</code> <code>int</code> <p>Unique taxonomy identifier in database</p> required <code>taxon_id_2</code> <code>int</code> <p>Unique taxonomy identifier in database</p> required <p>Raises:</p> Type Description <code>NoResultFound</code> <p>if <code>taxon_id_1</code> or</p> Source code in <code>src/python/ensembl/ncbi_taxonomy/api/utils.py</code> <pre><code>@classmethod\ndef last_common_ancestor(cls, session: Session, taxon_id_1: int, taxon_id_2: int) -&gt; NCBITaxonomy:\n    \"\"\"Returns most recent common ancestor node object shared between taxa\n\n    Args:\n        taxon_id_1: Unique taxonomy identifier in database\n        taxon_id_2: Unique taxonomy identifier in database\n\n    Raises:\n        sqlalchemy.orm.exc.NoResultFound: if ``taxon_id_1`` or\n        ``taxon_id_2`` do not exist or have no common ancestors\n    \"\"\"\n    common_ancestors = cls.all_common_ancestors(session, taxon_id_1, taxon_id_2)\n    return common_ancestors[-1]\n</code></pre>"},{"location":"reference/python/ensembl/ncbi_taxonomy/api/utils/#python.ensembl.ncbi_taxonomy.api.utils.Taxonomy.num_descendants","title":"<code>num_descendants(session, taxon_id)</code>  <code>classmethod</code>","text":"<p>Returns number of descendants from <code>taxon_id</code></p> <p>Parameters:</p> Name Type Description Default <code>taxon_id</code> <code>int</code> <p>Unique taxonomy identifier in database</p> required <p>Raises:</p> Type Description <code>NoResultFound</code> <p>if <code>taxon_id</code> does not exist</p> Source code in <code>src/python/ensembl/ncbi_taxonomy/api/utils.py</code> <pre><code>@classmethod\ndef num_descendants(cls, session: Session, taxon_id: int) -&gt; int:\n    \"\"\"Returns number of descendants from ``taxon_id``\n\n    Args:\n        taxon_id: Unique taxonomy identifier in database\n\n    Raises:\n        sqlalchemy.orm.exc.NoResultFound: if ``taxon_id`` does not exist\n    \"\"\"\n    session.query(NCBITaxaNode).filter(NCBITaxaNode.taxon_id == taxon_id).one()\n    right_index = (\n        session.query(NCBITaxaNode.right_index).filter(NCBITaxaNode.taxon_id == taxon_id).scalar()\n    )\n    left_index = session.query(NCBITaxaNode.left_index).filter(NCBITaxaNode.taxon_id == taxon_id).scalar()\n    return (right_index - left_index - 1) / 2\n</code></pre>"},{"location":"reference/python/ensembl/ncbi_taxonomy/api/utils/#python.ensembl.ncbi_taxonomy.api.utils.Taxonomy.parent","title":"<code>parent(session, taxon_id)</code>  <code>classmethod</code>","text":"<p>Returns taxonomy node object for parent node</p> <p>Parameters:</p> Name Type Description Default <code>taxon_id</code> <code>int</code> <p>Unique taxonomy identifier in database</p> required <p>Raises:</p> Type Description <code>NoResultFound</code> <p>if <code>taxon_id</code> does not exist</p> Source code in <code>src/python/ensembl/ncbi_taxonomy/api/utils.py</code> <pre><code>@classmethod\ndef parent(cls, session: Session, taxon_id: int) -&gt; NCBITaxonomy:\n    \"\"\"Returns taxonomy node object for parent node\n\n    Args:\n        taxon_id: Unique taxonomy identifier in database\n\n    Raises:\n        sqlalchemy.orm.exc.NoResultFound: if ``taxon_id`` does not exist\n    \"\"\"\n    ParentTaxonomy = aliased(NCBITaxonomy, name=\"parent_ncbi_taxonomy\")\n    q = (\n        session.query(NCBITaxonomy, ParentTaxonomy)\n        .outerjoin(ParentTaxonomy, NCBITaxonomy.parent_id == ParentTaxonomy.taxon_id)\n        .filter(NCBITaxonomy.taxon_id == taxon_id)\n        .filter(ParentTaxonomy.name_class == \"scientific name\")\n        .first()\n    )\n    try:\n        return q[1]\n    except TypeError as exc:\n        raise NoResultFound() from exc\n</code></pre>"},{"location":"reference/python/ensembl/xrefs/xref_source_db_model/","title":"xref_source_db_model","text":""},{"location":"reference/python/ensembl/xrefs/xref_source_db_model/#python.ensembl.xrefs.xref_source_db_model","title":"<code>python.ensembl.xrefs.xref_source_db_model</code>","text":"<p>Xref Source database ORM.</p>"},{"location":"reference/python/ensembl/xrefs/xref_source_db_model/#python.ensembl.xrefs.xref_source_db_model.Base","title":"<code>Base = declarative_base()</code>  <code>module-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_source_db_model/#python.ensembl.xrefs.xref_source_db_model.ChecksumXref","title":"<code>ChecksumXref</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/xrefs/xref_source_db_model.py</code> <pre><code>class ChecksumXref(Base):\n    __tablename__ = \"checksum_xref\"\n    __table_args__ = (Index(\"checksum_idx\", \"checksum\", mysql_length=10), {\"mysql_engine\": \"MyISAM\"})\n\n    checksum_xref_id: Column = Column(INTEGER, primary_key=True, autoincrement=True)\n    source_id: Column = Column(INTEGER, nullable=False)\n    accession: Column = Column(VARCHAR(14), nullable=False)\n    checksum: Column = Column(VARCHAR(32), nullable=False)\n</code></pre>"},{"location":"reference/python/ensembl/xrefs/xref_source_db_model/#python.ensembl.xrefs.xref_source_db_model.ChecksumXref.accession","title":"<code>accession = Column(VARCHAR(14), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_source_db_model/#python.ensembl.xrefs.xref_source_db_model.ChecksumXref.checksum","title":"<code>checksum = Column(VARCHAR(32), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_source_db_model/#python.ensembl.xrefs.xref_source_db_model.ChecksumXref.checksum_xref_id","title":"<code>checksum_xref_id = Column(INTEGER, primary_key=True, autoincrement=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_source_db_model/#python.ensembl.xrefs.xref_source_db_model.ChecksumXref.source_id","title":"<code>source_id = Column(INTEGER, nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_source_db_model/#python.ensembl.xrefs.xref_source_db_model.Source","title":"<code>Source</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/xrefs/xref_source_db_model.py</code> <pre><code>class Source(Base):\n    __tablename__ = \"source\"\n\n    source_id: Column = Column(INTEGER(10), primary_key=True, autoincrement=True)\n    name: Column = Column(VARCHAR(128), index=True, unique=True)\n    parser: Column = Column(VARCHAR(128))\n</code></pre>"},{"location":"reference/python/ensembl/xrefs/xref_source_db_model/#python.ensembl.xrefs.xref_source_db_model.Source.name","title":"<code>name = Column(VARCHAR(128), index=True, unique=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_source_db_model/#python.ensembl.xrefs.xref_source_db_model.Source.parser","title":"<code>parser = Column(VARCHAR(128))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_source_db_model/#python.ensembl.xrefs.xref_source_db_model.Source.source_id","title":"<code>source_id = Column(INTEGER(10), primary_key=True, autoincrement=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_source_db_model/#python.ensembl.xrefs.xref_source_db_model.Version","title":"<code>Version</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/xrefs/xref_source_db_model.py</code> <pre><code>class Version(Base):\n    __tablename__ = \"version\"\n    __table_args__ = (Index(\"version_idx\", \"source_id\", \"revision\"),)\n\n    version_id: Column = Column(INTEGER(10), primary_key=True, autoincrement=True)\n    source_id: Column = Column(INTEGER(10), ForeignKey(\"source.source_id\"))\n    revision: Column = Column(VARCHAR(255))\n    priority: Column = Column(INTEGER(10), nullable=False)\n    file_path: Column = Column(VARCHAR(255))\n    db: Column = Column(VARCHAR(255))\n    clean_path: Column = Column(VARCHAR(255))\n</code></pre>"},{"location":"reference/python/ensembl/xrefs/xref_source_db_model/#python.ensembl.xrefs.xref_source_db_model.Version.clean_path","title":"<code>clean_path = Column(VARCHAR(255))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_source_db_model/#python.ensembl.xrefs.xref_source_db_model.Version.db","title":"<code>db = Column(VARCHAR(255))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_source_db_model/#python.ensembl.xrefs.xref_source_db_model.Version.file_path","title":"<code>file_path = Column(VARCHAR(255))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_source_db_model/#python.ensembl.xrefs.xref_source_db_model.Version.priority","title":"<code>priority = Column(INTEGER(10), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_source_db_model/#python.ensembl.xrefs.xref_source_db_model.Version.revision","title":"<code>revision = Column(VARCHAR(255))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_source_db_model/#python.ensembl.xrefs.xref_source_db_model.Version.source_id","title":"<code>source_id = Column(INTEGER(10), ForeignKey('source.source_id'))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_source_db_model/#python.ensembl.xrefs.xref_source_db_model.Version.version_id","title":"<code>version_id = Column(INTEGER(10), primary_key=True, autoincrement=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/","title":"xref_update_db_model","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model","title":"<code>python.ensembl.xrefs.xref_update_db_model</code>","text":"<p>Xref Update database ORM.</p>"},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.Base","title":"<code>Base = declarative_base()</code>  <code>module-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.AltAllele","title":"<code>AltAllele</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/xrefs/xref_update_db_model.py</code> <pre><code>class AltAllele(Base):\n    __tablename__ = \"alt_allele\"\n\n    alt_allele_id: Column = Column(INTEGER(10, unsigned=True), primary_key=True)\n    gene_id: Column = Column(INTEGER(10, unsigned=True), index=True, primary_key=True)\n    is_reference: Column = Column(INTEGER(2, unsigned=True), server_default=text(\"0\"))\n</code></pre>"},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.AltAllele.alt_allele_id","title":"<code>alt_allele_id = Column(INTEGER(10, unsigned=True), primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.AltAllele.gene_id","title":"<code>gene_id = Column(INTEGER(10, unsigned=True), index=True, primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.AltAllele.is_reference","title":"<code>is_reference = Column(INTEGER(2, unsigned=True), server_default=(text('0')))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.ChecksumXref","title":"<code>ChecksumXref</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/xrefs/xref_update_db_model.py</code> <pre><code>class ChecksumXref(Base):\n    __tablename__ = \"checksum_xref\"\n    __table_args__ = (Index(\"checksum_idx\", \"checksum\", mysql_length=10),)\n\n    checksum_xref_id: Column = Column(INTEGER(10, unsigned=True), primary_key=True, autoincrement=True)\n    source_id: Column = Column(INTEGER(10, unsigned=True), nullable=False)\n    accession: Column = Column(CHAR(14), nullable=False)\n    checksum: Column = Column(CHAR(32), nullable=False)\n</code></pre>"},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.ChecksumXref.accession","title":"<code>accession = Column(CHAR(14), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.ChecksumXref.checksum","title":"<code>checksum = Column(CHAR(32), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.ChecksumXref.checksum_xref_id","title":"<code>checksum_xref_id = Column(INTEGER(10, unsigned=True), primary_key=True, autoincrement=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.ChecksumXref.source_id","title":"<code>source_id = Column(INTEGER(10, unsigned=True), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.CoordinateXref","title":"<code>CoordinateXref</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/xrefs/xref_update_db_model.py</code> <pre><code>class CoordinateXref(Base):\n    __tablename__ = \"coordinate_xref\"\n    __table_args__ = (\n        Index(\"start_pos_idx\", \"species_id\", \"chromosome\", \"strand\", \"txStart\"),\n        Index(\"end_pos_idx\", \"species_id\", \"chromosome\", \"strand\", \"txEnd\"),\n    )\n\n    coord_xref_id: Column = Column(INTEGER(10, unsigned=True), primary_key=True, autoincrement=True)\n    source_id: Column = Column(INTEGER(10, unsigned=True), nullable=False)\n    species_id: Column = Column(INTEGER(10, unsigned=True), nullable=False)\n    accession: Column = Column(VARCHAR(255), nullable=False)\n    chromosome: Column = Column(VARCHAR(255), nullable=False)\n    strand: Column = Column(TINYINT(2), nullable=False)\n    txStart: Column = Column(INTEGER(10), nullable=False)\n    txEnd: Column = Column(INTEGER(10), nullable=False)\n    cdsStart: Column = Column(INTEGER(10))\n    cdsEnd: Column = Column(INTEGER(10))\n    exonStarts: Column = Column(TEXT, nullable=False)\n    exonEnds: Column = Column(TEXT, nullable=False)\n</code></pre>"},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.CoordinateXref.accession","title":"<code>accession = Column(VARCHAR(255), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.CoordinateXref.cdsEnd","title":"<code>cdsEnd = Column(INTEGER(10))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.CoordinateXref.cdsStart","title":"<code>cdsStart = Column(INTEGER(10))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.CoordinateXref.chromosome","title":"<code>chromosome = Column(VARCHAR(255), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.CoordinateXref.coord_xref_id","title":"<code>coord_xref_id = Column(INTEGER(10, unsigned=True), primary_key=True, autoincrement=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.CoordinateXref.exonEnds","title":"<code>exonEnds = Column(TEXT, nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.CoordinateXref.exonStarts","title":"<code>exonStarts = Column(TEXT, nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.CoordinateXref.source_id","title":"<code>source_id = Column(INTEGER(10, unsigned=True), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.CoordinateXref.species_id","title":"<code>species_id = Column(INTEGER(10, unsigned=True), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.CoordinateXref.strand","title":"<code>strand = Column(TINYINT(2), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.CoordinateXref.txEnd","title":"<code>txEnd = Column(INTEGER(10), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.CoordinateXref.txStart","title":"<code>txStart = Column(INTEGER(10), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.DependentXref","title":"<code>DependentXref</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/xrefs/xref_update_db_model.py</code> <pre><code>class DependentXref(Base):\n    __tablename__ = \"dependent_xref\"\n\n    object_xref_id: Column = Column(INTEGER(10, unsigned=True), index=True)\n    master_xref_id: Column = Column(INTEGER(10, unsigned=True), index=True, primary_key=True)\n    dependent_xref_id: Column = Column(INTEGER(10, unsigned=True), index=True, primary_key=True)\n    linkage_annotation: Column = Column(VARCHAR(255))\n    linkage_source_id: Column = Column(INTEGER(10, unsigned=True), nullable=False, primary_key=True)\n</code></pre>"},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.DependentXref.dependent_xref_id","title":"<code>dependent_xref_id = Column(INTEGER(10, unsigned=True), index=True, primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.DependentXref.linkage_annotation","title":"<code>linkage_annotation = Column(VARCHAR(255))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.DependentXref.linkage_source_id","title":"<code>linkage_source_id = Column(INTEGER(10, unsigned=True), nullable=False, primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.DependentXref.master_xref_id","title":"<code>master_xref_id = Column(INTEGER(10, unsigned=True), index=True, primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.DependentXref.object_xref_id","title":"<code>object_xref_id = Column(INTEGER(10, unsigned=True), index=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.DisplayXrefPriority","title":"<code>DisplayXrefPriority</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/xrefs/xref_update_db_model.py</code> <pre><code>class DisplayXrefPriority(Base):\n    __tablename__ = \"display_xref_priority\"\n\n    ensembl_object_type: Column = Column(VARCHAR(100), primary_key=True)\n    source_id: Column = Column(INTEGER(10, unsigned=True), primary_key=True)\n    priority: Column = Column(SMALLINT(unsigned=True), nullable=False)\n</code></pre>"},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.DisplayXrefPriority.ensembl_object_type","title":"<code>ensembl_object_type = Column(VARCHAR(100), primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.DisplayXrefPriority.priority","title":"<code>priority = Column(SMALLINT(unsigned=True), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.DisplayXrefPriority.source_id","title":"<code>source_id = Column(INTEGER(10, unsigned=True), primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.GeneDescPriority","title":"<code>GeneDescPriority</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/xrefs/xref_update_db_model.py</code> <pre><code>class GeneDescPriority(Base):\n    __tablename__ = \"gene_desc_priority\"\n\n    source_id: Column = Column(INTEGER(10, unsigned=True), primary_key=True)\n    priority: Column = Column(SMALLINT(unsigned=True), nullable=False)\n</code></pre>"},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.GeneDescPriority.priority","title":"<code>priority = Column(SMALLINT(unsigned=True), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.GeneDescPriority.source_id","title":"<code>source_id = Column(INTEGER(10, unsigned=True), primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.GeneDirectXref","title":"<code>GeneDirectXref</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/xrefs/xref_update_db_model.py</code> <pre><code>class GeneDirectXref(Base):\n    __tablename__ = \"gene_direct_xref\"\n\n    general_xref_id: Column = Column(INTEGER(10, unsigned=True), index=True, primary_key=True)\n    ensembl_stable_id: Column = Column(VARCHAR(255), index=True, primary_key=True)\n    linkage_xref: Column = Column(VARCHAR(255))\n</code></pre>"},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.GeneDirectXref.ensembl_stable_id","title":"<code>ensembl_stable_id = Column(VARCHAR(255), index=True, primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.GeneDirectXref.general_xref_id","title":"<code>general_xref_id = Column(INTEGER(10, unsigned=True), index=True, primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.GeneDirectXref.linkage_xref","title":"<code>linkage_xref = Column(VARCHAR(255))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.GeneStableId","title":"<code>GeneStableId</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/xrefs/xref_update_db_model.py</code> <pre><code>class GeneStableId(Base):\n    __tablename__ = \"gene_stable_id\"\n\n    internal_id: Column = Column(INTEGER(10, unsigned=True), nullable=False, index=True)\n    stable_id: Column = Column(VARCHAR(128), primary_key=True)\n    display_xref_id: Column = Column(INTEGER(10, unsigned=True))\n    desc_set: Column = Column(INTEGER(10, unsigned=True), server_default=text(\"0\"))\n</code></pre>"},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.GeneStableId.desc_set","title":"<code>desc_set = Column(INTEGER(10, unsigned=True), server_default=(text('0')))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.GeneStableId.display_xref_id","title":"<code>display_xref_id = Column(INTEGER(10, unsigned=True))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.GeneStableId.internal_id","title":"<code>internal_id = Column(INTEGER(10, unsigned=True), nullable=False, index=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.GeneStableId.stable_id","title":"<code>stable_id = Column(VARCHAR(128), primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.GeneTranscriptTranslation","title":"<code>GeneTranscriptTranslation</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/xrefs/xref_update_db_model.py</code> <pre><code>class GeneTranscriptTranslation(Base):\n    __tablename__ = \"gene_transcript_translation\"\n\n    gene_id: Column = Column(INTEGER(10, unsigned=True), nullable=False, index=True)\n    transcript_id: Column = Column(INTEGER(10, unsigned=True), primary_key=True)\n    translation_id: Column = Column(INTEGER(10, unsigned=True), index=True)\n</code></pre>"},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.GeneTranscriptTranslation.gene_id","title":"<code>gene_id = Column(INTEGER(10, unsigned=True), nullable=False, index=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.GeneTranscriptTranslation.transcript_id","title":"<code>transcript_id = Column(INTEGER(10, unsigned=True), primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.GeneTranscriptTranslation.translation_id","title":"<code>translation_id = Column(INTEGER(10, unsigned=True), index=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.IdentityXref","title":"<code>IdentityXref</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/xrefs/xref_update_db_model.py</code> <pre><code>class IdentityXref(Base):\n    __tablename__ = \"identity_xref\"\n\n    object_xref_id: Column = Column(INTEGER(10, unsigned=True), primary_key=True)\n    query_identity: Column = Column(INTEGER(5))\n    target_identity: Column = Column(INTEGER(5))\n    hit_start: Column = Column(INTEGER(10))\n    hit_end: Column = Column(INTEGER(10))\n    translation_start: Column = Column(INTEGER(10))\n    translation_end: Column = Column(INTEGER(10))\n    cigar_line: Column = Column(TEXT)\n    score: Column = Column(DOUBLE)\n    evalue: Column = Column(DOUBLE)\n</code></pre>"},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.IdentityXref.cigar_line","title":"<code>cigar_line = Column(TEXT)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.IdentityXref.evalue","title":"<code>evalue = Column(DOUBLE)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.IdentityXref.hit_end","title":"<code>hit_end = Column(INTEGER(10))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.IdentityXref.hit_start","title":"<code>hit_start = Column(INTEGER(10))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.IdentityXref.object_xref_id","title":"<code>object_xref_id = Column(INTEGER(10, unsigned=True), primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.IdentityXref.query_identity","title":"<code>query_identity = Column(INTEGER(5))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.IdentityXref.score","title":"<code>score = Column(DOUBLE)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.IdentityXref.target_identity","title":"<code>target_identity = Column(INTEGER(5))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.IdentityXref.translation_end","title":"<code>translation_end = Column(INTEGER(10))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.IdentityXref.translation_start","title":"<code>translation_start = Column(INTEGER(10))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.Mapping","title":"<code>Mapping</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/xrefs/xref_update_db_model.py</code> <pre><code>class Mapping(Base):\n    __tablename__ = \"mapping\"\n\n    job_id: Column = Column(INTEGER(10, unsigned=True), primary_key=True)\n    type: Column = Column(Enum(\"dna\", \"peptide\", \"UCSC\"))\n    command_line: Column = Column(TEXT)\n    percent_query_cutoff: Column = Column(INTEGER(10, unsigned=True))\n    percent_target_cutoff: Column = Column(INTEGER(10, unsigned=True))\n    method: Column = Column(VARCHAR(255))\n    array_size: Column = Column(INTEGER(10, unsigned=True))\n</code></pre>"},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.Mapping.array_size","title":"<code>array_size = Column(INTEGER(10, unsigned=True))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.Mapping.command_line","title":"<code>command_line = Column(TEXT)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.Mapping.job_id","title":"<code>job_id = Column(INTEGER(10, unsigned=True), primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.Mapping.method","title":"<code>method = Column(VARCHAR(255))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.Mapping.percent_query_cutoff","title":"<code>percent_query_cutoff = Column(INTEGER(10, unsigned=True))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.Mapping.percent_target_cutoff","title":"<code>percent_target_cutoff = Column(INTEGER(10, unsigned=True))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.Mapping.type","title":"<code>type = Column(Enum('dna', 'peptide', 'UCSC'))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.MappingJobs","title":"<code>MappingJobs</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/xrefs/xref_update_db_model.py</code> <pre><code>class MappingJobs(Base):\n    __tablename__ = \"mapping_jobs\"\n\n    mapping_job_id: Column = Column(INTEGER(10), primary_key=True, autoincrement=True)\n    root_dir: Column = Column(TEXT)\n    map_file: Column = Column(VARCHAR(255))\n    status: Column = Column(Enum(\"SUBMITTED\", \"FAILED\", \"SUCCESS\"))\n    out_file: Column = Column(VARCHAR(255))\n    err_file: Column = Column(VARCHAR(255))\n    array_number: Column = Column(INTEGER(10, unsigned=True))\n    job_id: Column = Column(INTEGER(10, unsigned=True))\n    failed_reason: Column = Column(VARCHAR(255))\n    object_xref_start: Column = Column(INTEGER(10, unsigned=True))\n    object_xref_end: Column = Column(INTEGER(10, unsigned=True))\n</code></pre>"},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.MappingJobs.array_number","title":"<code>array_number = Column(INTEGER(10, unsigned=True))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.MappingJobs.err_file","title":"<code>err_file = Column(VARCHAR(255))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.MappingJobs.failed_reason","title":"<code>failed_reason = Column(VARCHAR(255))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.MappingJobs.job_id","title":"<code>job_id = Column(INTEGER(10, unsigned=True))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.MappingJobs.map_file","title":"<code>map_file = Column(VARCHAR(255))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.MappingJobs.mapping_job_id","title":"<code>mapping_job_id = Column(INTEGER(10), primary_key=True, autoincrement=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.MappingJobs.object_xref_end","title":"<code>object_xref_end = Column(INTEGER(10, unsigned=True))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.MappingJobs.object_xref_start","title":"<code>object_xref_start = Column(INTEGER(10, unsigned=True))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.MappingJobs.out_file","title":"<code>out_file = Column(VARCHAR(255))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.MappingJobs.root_dir","title":"<code>root_dir = Column(TEXT)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.MappingJobs.status","title":"<code>status = Column(Enum('SUBMITTED', 'FAILED', 'SUCCESS'))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.Meta","title":"<code>Meta</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/xrefs/xref_update_db_model.py</code> <pre><code>class Meta(Base):\n    __tablename__ = \"meta\"\n    __table_args__ = (\n        Index(\"species_key_value_idx\", \"meta_id\", \"species_id\", \"meta_key\", \"meta_value\", unique=True),\n        Index(\"species_value_idx\", \"species_id\", \"meta_value\"),\n    )\n\n    meta_id: Column = Column(INTEGER(10), primary_key=True, autoincrement=True)\n    species_id: Column = Column(INTEGER(10, unsigned=True), server_default=text(\"1\"))\n    meta_key: Column = Column(VARCHAR(40), nullable=False)\n    meta_value: Column = Column(VARCHAR(255, binary=True), nullable=False)\n    date: Column = Column(DateTime, nullable=False)\n</code></pre>"},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.Meta.date","title":"<code>date = Column(DateTime, nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.Meta.meta_id","title":"<code>meta_id = Column(INTEGER(10), primary_key=True, autoincrement=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.Meta.meta_key","title":"<code>meta_key = Column(VARCHAR(40), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.Meta.meta_value","title":"<code>meta_value = Column(VARCHAR(255, binary=True), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.Meta.species_id","title":"<code>species_id = Column(INTEGER(10, unsigned=True), server_default=(text('1')))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.ObjectXref","title":"<code>ObjectXref</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/xrefs/xref_update_db_model.py</code> <pre><code>class ObjectXref(Base):\n    __tablename__ = \"object_xref\"\n    __table_args__ = (\n        Index(\n            \"unique_idx\",\n            \"ensembl_object_type\",\n            \"ensembl_id\",\n            \"xref_id\",\n            \"ox_status\",\n            \"master_xref_id\",\n            unique=True,\n        ),\n        Index(\"oxref_idx\", \"object_xref_id\", \"xref_id\", \"ensembl_object_type\", \"ensembl_id\"),\n        Index(\"xref_idx\", \"xref_id\", \"ensembl_object_type\"),\n    )\n\n    object_xref_id: Column = Column(INTEGER(10, unsigned=True), primary_key=True, autoincrement=True)\n    ensembl_id: Column = Column(INTEGER(10, unsigned=True), nullable=False)\n    ensembl_object_type: Column = Column(\n        Enum(\"RawContig\", \"Transcript\", \"Gene\", \"Translation\"), nullable=False\n    )\n    xref_id: Column = Column(INTEGER(10, unsigned=True), nullable=False)\n    linkage_annotation: Column = Column(VARCHAR(255))\n    linkage_type: Column = Column(\n        Enum(\n            \"PROJECTION\",\n            \"MISC\",\n            \"DEPENDENT\",\n            \"DIRECT\",\n            \"SEQUENCE_MATCH\",\n            \"INFERRED_PAIR\",\n            \"PROBE\",\n            \"UNMAPPED\",\n            \"COORDINATE_OVERLAP\",\n            \"CHECKSUM\",\n        )\n    )\n    ox_status: Column = Column(\n        Enum(\"DUMP_OUT\", \"FAILED_PRIORITY\", \"FAILED_CUTOFF\", \"NO_DISPLAY\", \"MULTI_DELETE\"),\n        nullable=False,\n        server_default=text(\"'DUMP_OUT'\"),\n    )\n    unused_priority: Column = Column(INTEGER(10, unsigned=True))\n    master_xref_id: Column = Column(INTEGER(10, unsigned=True))\n</code></pre>"},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.ObjectXref.ensembl_id","title":"<code>ensembl_id = Column(INTEGER(10, unsigned=True), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.ObjectXref.ensembl_object_type","title":"<code>ensembl_object_type = Column(Enum('RawContig', 'Transcript', 'Gene', 'Translation'), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.ObjectXref.linkage_annotation","title":"<code>linkage_annotation = Column(VARCHAR(255))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.ObjectXref.linkage_type","title":"<code>linkage_type = Column(Enum('PROJECTION', 'MISC', 'DEPENDENT', 'DIRECT', 'SEQUENCE_MATCH', 'INFERRED_PAIR', 'PROBE', 'UNMAPPED', 'COORDINATE_OVERLAP', 'CHECKSUM'))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.ObjectXref.master_xref_id","title":"<code>master_xref_id = Column(INTEGER(10, unsigned=True))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.ObjectXref.object_xref_id","title":"<code>object_xref_id = Column(INTEGER(10, unsigned=True), primary_key=True, autoincrement=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.ObjectXref.ox_status","title":"<code>ox_status = Column(Enum('DUMP_OUT', 'FAILED_PRIORITY', 'FAILED_CUTOFF', 'NO_DISPLAY', 'MULTI_DELETE'), nullable=False, server_default=(text(\"'DUMP_OUT'\")))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.ObjectXref.unused_priority","title":"<code>unused_priority = Column(INTEGER(10, unsigned=True))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.ObjectXref.xref_id","title":"<code>xref_id = Column(INTEGER(10, unsigned=True), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.Pairs","title":"<code>Pairs</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/xrefs/xref_update_db_model.py</code> <pre><code>class Pairs(Base):\n    __tablename__ = \"pairs\"\n\n    pair_id: Column = Column(INTEGER(10, unsigned=True), primary_key=True, autoincrement=True)\n    source_id: Column = Column(INTEGER(10, unsigned=True), nullable=False)\n    accession1: Column = Column(VARCHAR(255), nullable=False, index=True)\n    accession2: Column = Column(VARCHAR(255), nullable=False, index=True)\n</code></pre>"},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.Pairs.accession1","title":"<code>accession1 = Column(VARCHAR(255), nullable=False, index=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.Pairs.accession2","title":"<code>accession2 = Column(VARCHAR(255), nullable=False, index=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.Pairs.pair_id","title":"<code>pair_id = Column(INTEGER(10, unsigned=True), primary_key=True, autoincrement=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.Pairs.source_id","title":"<code>source_id = Column(INTEGER(10, unsigned=True), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.PrimaryXref","title":"<code>PrimaryXref</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/xrefs/xref_update_db_model.py</code> <pre><code>class PrimaryXref(Base):\n    __tablename__ = \"primary_xref\"\n\n    xref_id: Column = Column(INTEGER(10, unsigned=True), primary_key=True)\n    sequence: Column = Column(MEDIUMTEXT)\n    sequence_type: Column = Column(Enum(\"dna\", \"peptide\"))\n    status: Column = Column(Enum(\"experimental\", \"predicted\"))\n</code></pre>"},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.PrimaryXref.sequence","title":"<code>sequence = Column(MEDIUMTEXT)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.PrimaryXref.sequence_type","title":"<code>sequence_type = Column(Enum('dna', 'peptide'))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.PrimaryXref.status","title":"<code>status = Column(Enum('experimental', 'predicted'))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.PrimaryXref.xref_id","title":"<code>xref_id = Column(INTEGER(10, unsigned=True), primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.ProcessStatus","title":"<code>ProcessStatus</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/xrefs/xref_update_db_model.py</code> <pre><code>class ProcessStatus(Base):\n    __tablename__ = \"process_status\"\n\n    id: Column = Column(INTEGER(10, unsigned=True), primary_key=True, autoincrement=True)\n    status: Column = Column(\n        Enum(\n            \"xref_created\",\n            \"parsing_started\",\n            \"parsing_finished\",\n            \"alt_alleles_added\",\n            \"xref_fasta_dumped\",\n            \"core_fasta_dumped\",\n            \"core_data_loaded\",\n            \"mapping_submitted\",\n            \"mapping_finished\",\n            \"mapping_processed\",\n            \"direct_xrefs_parsed\",\n            \"prioritys_flagged\",\n            \"processed_pairs\",\n            \"biomart_test_finished\",\n            \"source_level_move_finished\",\n            \"alt_alleles_processed\",\n            \"official_naming_done\",\n            \"checksum_xrefs_started\",\n            \"checksum_xrefs_finished\",\n            \"coordinate_xrefs_started\",\n            \"coordinate_xref_finished\",\n            \"tests_started\",\n            \"tests_failed\",\n            \"tests_finished\",\n            \"core_loaded\",\n            \"display_xref_done\",\n            \"gene_description_done\",\n        )\n    )\n    date: Column = Column(DateTime, nullable=False)\n</code></pre>"},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.ProcessStatus.date","title":"<code>date = Column(DateTime, nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.ProcessStatus.id","title":"<code>id = Column(INTEGER(10, unsigned=True), primary_key=True, autoincrement=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.ProcessStatus.status","title":"<code>status = Column(Enum('xref_created', 'parsing_started', 'parsing_finished', 'alt_alleles_added', 'xref_fasta_dumped', 'core_fasta_dumped', 'core_data_loaded', 'mapping_submitted', 'mapping_finished', 'mapping_processed', 'direct_xrefs_parsed', 'prioritys_flagged', 'processed_pairs', 'biomart_test_finished', 'source_level_move_finished', 'alt_alleles_processed', 'official_naming_done', 'checksum_xrefs_started', 'checksum_xrefs_finished', 'coordinate_xrefs_started', 'coordinate_xref_finished', 'tests_started', 'tests_failed', 'tests_finished', 'core_loaded', 'display_xref_done', 'gene_description_done'))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.Source","title":"<code>Source</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/xrefs/xref_update_db_model.py</code> <pre><code>class Source(Base):\n    __tablename__ = \"source\"\n\n    source_id: Column = Column(INTEGER(10, unsigned=True), primary_key=True, autoincrement=True)\n    name: Column = Column(VARCHAR(255), nullable=False, index=True)\n    status: Column = Column(\n        Enum(\"KNOWN\", \"XREF\", \"PRED\", \"ORTH\", \"PSEUDO\", \"LOWEVIDENCE\", \"NOIDEA\"),\n        nullable=False,\n        server_default=text(\"'NOIDEA'\"),\n    )\n    source_release: Column = Column(VARCHAR(255))\n    ordered: Column = Column(INTEGER(10, unsigned=True), nullable=False)\n    priority: Column = Column(INTEGER(5, unsigned=True), server_default=text(\"1\"))\n    priority_description: Column = Column(VARCHAR(40), server_default=text(\"''\"))\n</code></pre>"},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.Source.name","title":"<code>name = Column(VARCHAR(255), nullable=False, index=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.Source.ordered","title":"<code>ordered = Column(INTEGER(10, unsigned=True), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.Source.priority","title":"<code>priority = Column(INTEGER(5, unsigned=True), server_default=(text('1')))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.Source.priority_description","title":"<code>priority_description = Column(VARCHAR(40), server_default=(text(\"''\")))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.Source.source_id","title":"<code>source_id = Column(INTEGER(10, unsigned=True), primary_key=True, autoincrement=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.Source.source_release","title":"<code>source_release = Column(VARCHAR(255))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.Source.status","title":"<code>status = Column(Enum('KNOWN', 'XREF', 'PRED', 'ORTH', 'PSEUDO', 'LOWEVIDENCE', 'NOIDEA'), nullable=False, server_default=(text(\"'NOIDEA'\")))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.SourceURL","title":"<code>SourceURL</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/xrefs/xref_update_db_model.py</code> <pre><code>class SourceURL(Base):\n    __tablename__ = \"source_url\"\n\n    source_url_id: Column = Column(INTEGER(10, unsigned=True), primary_key=True, autoincrement=True)\n    source_id: Column = Column(INTEGER(10, unsigned=True), nullable=False, index=True)\n    species_id: Column = Column(INTEGER(10, unsigned=True), nullable=False)\n    parser: Column = Column(VARCHAR(255))\n</code></pre>"},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.SourceURL.parser","title":"<code>parser = Column(VARCHAR(255))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.SourceURL.source_id","title":"<code>source_id = Column(INTEGER(10, unsigned=True), nullable=False, index=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.SourceURL.source_url_id","title":"<code>source_url_id = Column(INTEGER(10, unsigned=True), primary_key=True, autoincrement=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.SourceURL.species_id","title":"<code>species_id = Column(INTEGER(10, unsigned=True), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.Species","title":"<code>Species</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/xrefs/xref_update_db_model.py</code> <pre><code>class Species(Base):\n    __tablename__ = \"species\"\n\n    species_id: Column = Column(INTEGER(10, unsigned=True), nullable=False, index=True, primary_key=True)\n    taxonomy_id: Column = Column(INTEGER(10, unsigned=True), nullable=False, index=True, primary_key=True)\n    name: Column = Column(VARCHAR(255), nullable=False, index=True)\n    aliases: Column = Column(VARCHAR(255))\n</code></pre>"},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.Species.aliases","title":"<code>aliases = Column(VARCHAR(255))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.Species.name","title":"<code>name = Column(VARCHAR(255), nullable=False, index=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.Species.species_id","title":"<code>species_id = Column(INTEGER(10, unsigned=True), nullable=False, index=True, primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.Species.taxonomy_id","title":"<code>taxonomy_id = Column(INTEGER(10, unsigned=True), nullable=False, index=True, primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.Synonym","title":"<code>Synonym</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/xrefs/xref_update_db_model.py</code> <pre><code>class Synonym(Base):\n    __tablename__ = \"synonym\"\n\n    xref_id: Column = Column(INTEGER(10, unsigned=True), index=True, primary_key=True)\n    synonym: Column = Column(VARCHAR(255), index=True, primary_key=True)\n</code></pre>"},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.Synonym.synonym","title":"<code>synonym = Column(VARCHAR(255), index=True, primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.Synonym.xref_id","title":"<code>xref_id = Column(INTEGER(10, unsigned=True), index=True, primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.TranscriptDirectXref","title":"<code>TranscriptDirectXref</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/xrefs/xref_update_db_model.py</code> <pre><code>class TranscriptDirectXref(Base):\n    __tablename__ = \"transcript_direct_xref\"\n\n    general_xref_id: Column = Column(INTEGER(10, unsigned=True), index=True, primary_key=True)\n    ensembl_stable_id: Column = Column(VARCHAR(255), index=True, primary_key=True)\n    linkage_xref: Column = Column(VARCHAR(255))\n</code></pre>"},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.TranscriptDirectXref.ensembl_stable_id","title":"<code>ensembl_stable_id = Column(VARCHAR(255), index=True, primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.TranscriptDirectXref.general_xref_id","title":"<code>general_xref_id = Column(INTEGER(10, unsigned=True), index=True, primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.TranscriptDirectXref.linkage_xref","title":"<code>linkage_xref = Column(VARCHAR(255))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.TranscriptStableId","title":"<code>TranscriptStableId</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/xrefs/xref_update_db_model.py</code> <pre><code>class TranscriptStableId(Base):\n    __tablename__ = \"transcript_stable_id\"\n\n    internal_id: Column = Column(INTEGER(10, unsigned=True), nullable=False, index=True)\n    stable_id: Column = Column(VARCHAR(128), primary_key=True)\n    display_xref_id: Column = Column(INTEGER(10, unsigned=True))\n    biotype: Column = Column(VARCHAR(40), nullable=False)\n</code></pre>"},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.TranscriptStableId.biotype","title":"<code>biotype = Column(VARCHAR(40), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.TranscriptStableId.display_xref_id","title":"<code>display_xref_id = Column(INTEGER(10, unsigned=True))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.TranscriptStableId.internal_id","title":"<code>internal_id = Column(INTEGER(10, unsigned=True), nullable=False, index=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.TranscriptStableId.stable_id","title":"<code>stable_id = Column(VARCHAR(128), primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.TranslationDirectXref","title":"<code>TranslationDirectXref</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/xrefs/xref_update_db_model.py</code> <pre><code>class TranslationDirectXref(Base):\n    __tablename__ = \"translation_direct_xref\"\n\n    general_xref_id: Column = Column(INTEGER(10, unsigned=True), index=True, primary_key=True)\n    ensembl_stable_id: Column = Column(VARCHAR(255), index=True, primary_key=True)\n    linkage_xref: Column = Column(VARCHAR(255))\n</code></pre>"},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.TranslationDirectXref.ensembl_stable_id","title":"<code>ensembl_stable_id = Column(VARCHAR(255), index=True, primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.TranslationDirectXref.general_xref_id","title":"<code>general_xref_id = Column(INTEGER(10, unsigned=True), index=True, primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.TranslationDirectXref.linkage_xref","title":"<code>linkage_xref = Column(VARCHAR(255))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.TranslationStableId","title":"<code>TranslationStableId</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/xrefs/xref_update_db_model.py</code> <pre><code>class TranslationStableId(Base):\n    __tablename__ = \"translation_stable_id\"\n\n    internal_id: Column = Column(INTEGER(10, unsigned=True), primary_key=True)\n    stable_id: Column = Column(VARCHAR(128), nullable=False, index=True)\n</code></pre>"},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.TranslationStableId.internal_id","title":"<code>internal_id = Column(INTEGER(10, unsigned=True), primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.TranslationStableId.stable_id","title":"<code>stable_id = Column(VARCHAR(128), nullable=False, index=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.Xref","title":"<code>Xref</code>","text":"<p>               Bases: <code>Base</code></p> Source code in <code>src/python/ensembl/xrefs/xref_update_db_model.py</code> <pre><code>class Xref(Base):\n    __tablename__ = \"xref\"\n    __table_args__ = (\n        Index(\n            \"acession_idx\",\n            \"accession\",\n            \"source_id\",\n            \"species_id\",\n            \"label\",\n            unique=True,\n            mysql_length={\"accession\": 100, \"label\": 100},\n        ),\n        Index(\"species_source_idx\", \"species_id\", \"source_id\"),\n    )\n\n    xref_id: Column = Column(INTEGER(10, unsigned=True), primary_key=True, autoincrement=True)\n    accession: Column = Column(VARCHAR(255), nullable=False)\n    version: Column = Column(INTEGER(10, unsigned=True))\n    label: Column = Column(VARCHAR(255))\n    description: Column = Column(TEXT)\n    source_id: Column = Column(INTEGER(10, unsigned=True), nullable=False)\n    species_id: Column = Column(INTEGER(10, unsigned=True), nullable=False)\n    info_type: Column = Column(\n        Enum(\n            \"NONE\",\n            \"PROJECTION\",\n            \"MISC\",\n            \"DEPENDENT\",\n            \"DIRECT\",\n            \"SEQUENCE_MATCH\",\n            \"INFERRED_PAIR\",\n            \"PROBE\",\n            \"UNMAPPED\",\n            \"COORDINATE_OVERLAP\",\n            \"CHECKSUM\",\n        ),\n        nullable=False,\n        server_default=text(\"'NONE'\"),\n    )\n    info_text: Column = Column(VARCHAR(255), nullable=False, server_default=text(\"''\"))\n    dumped: Column = Column(\n        Enum(\n            \"MAPPED\",\n            \"NO_DUMP_ANOTHER_PRIORITY\",\n            \"UNMAPPED_NO_MAPPING\",\n            \"UNMAPPED_NO_MASTER\",\n            \"UNMAPPED_MASTER_FAILED\",\n            \"UNMAPPED_NO_STABLE_ID\",\n            \"UNMAPPED_INTERPRO\",\n        )\n    )\n</code></pre>"},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.Xref.accession","title":"<code>accession = Column(VARCHAR(255), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.Xref.description","title":"<code>description = Column(TEXT)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.Xref.dumped","title":"<code>dumped = Column(Enum('MAPPED', 'NO_DUMP_ANOTHER_PRIORITY', 'UNMAPPED_NO_MAPPING', 'UNMAPPED_NO_MASTER', 'UNMAPPED_MASTER_FAILED', 'UNMAPPED_NO_STABLE_ID', 'UNMAPPED_INTERPRO'))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.Xref.info_text","title":"<code>info_text = Column(VARCHAR(255), nullable=False, server_default=(text(\"''\")))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.Xref.info_type","title":"<code>info_type = Column(Enum('NONE', 'PROJECTION', 'MISC', 'DEPENDENT', 'DIRECT', 'SEQUENCE_MATCH', 'INFERRED_PAIR', 'PROBE', 'UNMAPPED', 'COORDINATE_OVERLAP', 'CHECKSUM'), nullable=False, server_default=(text(\"'NONE'\")))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.Xref.label","title":"<code>label = Column(VARCHAR(255))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.Xref.source_id","title":"<code>source_id = Column(INTEGER(10, unsigned=True), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.Xref.species_id","title":"<code>species_id = Column(INTEGER(10, unsigned=True), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.Xref.version","title":"<code>version = Column(INTEGER(10, unsigned=True))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/ensembl/xrefs/xref_update_db_model/#python.ensembl.xrefs.xref_update_db_model.Xref.xref_id","title":"<code>xref_id = Column(INTEGER(10, unsigned=True), primary_key=True, autoincrement=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/tests/core/compare_core_model/","title":"compare_core_model","text":""},{"location":"reference/python/tests/core/compare_core_model/#python.tests.core.compare_core_model","title":"<code>python.tests.core.compare_core_model</code>","text":"<p>Check the current ensembl-py core model against a core created from Ensembl SQL. This script gets one row for each table in the ORM to check that SQLAlchemy can correctly query the table. If not, it will show the <code>OperationalError</code> exception to explain what is wrong in the ORM.</p> <p>Use this script to check the ORM (and fix it if needed).</p>"},{"location":"reference/python/tests/core/compare_core_model/#python.tests.core.compare_core_model.check_tables","title":"<code>check_tables(session, only_table='')</code>","text":"<p>Load data from a core using the ORM to check for any discrepancies in the definitions.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>Session</code> <p>SQLAlchemy session.</p> required <code>only_table</code> <code>str</code> <p>Only check this one table instead of all of the tables defined in the ORM.</p> <code>''</code> Source code in <code>src/python/tests/core/compare_core_model.py</code> <pre><code>def check_tables(session: Session, only_table: str = \"\") -&gt; None:\n    \"\"\"Load data from a core using the ORM to check for any discrepancies in the definitions.\n\n    Args:\n        session: SQLAlchemy session.\n        only_table: Only check this one table instead of all of the tables defined in the ORM.\n    \"\"\"\n    success = []\n    errors = []\n    for table_name, table in Base.metadata.tables.items():\n        if isinstance(table_name, tuple):\n            table_name = table_name[0]\n        if only_table and table_name != only_table:\n            continue\n        logging.debug(f\"Check table {table_name}\")\n        stmt = select(table)\n        try:\n            session.execute(stmt).one()\n            success.append(table_name)\n        except (NoResultFound, MultipleResultsFound):\n            success.append(table_name)\n        except (OperationalError, ProgrammingError) as err:\n            # Show the problematic query and continue\n            logging.warning(f\"{table_name}: {err}\")\n            errors.append(table_name)\n\n    logging.info(f\"{len(success)} tables successfully queried with the ORM\")\n    if errors:\n        logging.warning(f\"{len(errors)} tables failed to be queried with the ORM: {', '.join(errors)}\")\n    else:\n        logging.info(\"No errors found\")\n</code></pre>"},{"location":"reference/python/tests/core/compare_core_model/#python.tests.core.compare_core_model.main","title":"<code>main()</code>","text":"<p>Main script entry-point.</p> Source code in <code>src/python/tests/core/compare_core_model.py</code> <pre><code>def main() -&gt; None:\n    \"\"\"Main script entry-point.\"\"\"\n    parser = ArgumentParser(description=__doc__)\n    parser.add_server_arguments(include_database=True, help=\"Ensembl MySQL core database\")\n    parser.add_argument(\"--table\", type=str, help=\"Test this one table only\")\n    parser.add_log_arguments(add_log_file=True)\n    args = parser.parse_args()\n    init_logging_with_args(args)\n    dbc = DBConnection(args.url, reflect=False)\n    with dbc.session_scope() as session:\n        check_tables(session, only_table=args.table)\n</code></pre>"},{"location":"reference/python/tests/core/test_core/","title":"test_core","text":""},{"location":"reference/python/tests/core/test_core/#python.tests.core.test_core","title":"<code>python.tests.core.test_core</code>","text":"<p>Unit testing of <code>ensembl.core.models</code> module.</p>"},{"location":"reference/python/tests/core/test_core/#python.tests.core.test_core.TestCoreModels","title":"<code>TestCoreModels</code>","text":"<p>Tests the <code>~ensembl.core.models</code> ORMs</p> Source code in <code>src/python/tests/core/test_core.py</code> <pre><code>@pytest.mark.parametrize(\"test_dbs\", [[{\"src\": \"core_db\", \"metadata\": Base.metadata}]], indirect=True)\nclass TestCoreModels:\n    \"\"\"Tests the `~ensembl.core.models` ORMs\"\"\"\n\n    dbc: UnitTestDB = None\n\n    @pytest.fixture(scope=\"class\", autouse=True)\n    def setup(self, test_dbs: dict[str, UnitTestDB]) -&gt; None:\n        \"\"\"Loads the required fixtures and values as class attributes.\n\n        Args:\n            test_dbs: Generator of unit test databases (fixture).\n        \"\"\"\n        type(self).dbc = test_dbs[\"core_db\"].dbc\n\n    def test_create_db(self) -&gt; None:\n        \"\"\"Test the creation of a database with the core models schema.\"\"\"\n        assert set(self.dbc.tables.keys()) == set(Base.metadata.tables.keys())\n</code></pre>"},{"location":"reference/python/tests/core/test_core/#python.tests.core.test_core.TestCoreModels.dbc","title":"<code>dbc = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/tests/core/test_core/#python.tests.core.test_core.TestCoreModels.setup","title":"<code>setup(test_dbs)</code>","text":"<p>Loads the required fixtures and values as class attributes.</p> <p>Parameters:</p> Name Type Description Default <code>test_dbs</code> <code>dict[str, UnitTestDB]</code> <p>Generator of unit test databases (fixture).</p> required Source code in <code>src/python/tests/core/test_core.py</code> <pre><code>@pytest.fixture(scope=\"class\", autouse=True)\ndef setup(self, test_dbs: dict[str, UnitTestDB]) -&gt; None:\n    \"\"\"Loads the required fixtures and values as class attributes.\n\n    Args:\n        test_dbs: Generator of unit test databases (fixture).\n    \"\"\"\n    type(self).dbc = test_dbs[\"core_db\"].dbc\n</code></pre>"},{"location":"reference/python/tests/core/test_core/#python.tests.core.test_core.TestCoreModels.test_create_db","title":"<code>test_create_db()</code>","text":"<p>Test the creation of a database with the core models schema.</p> Source code in <code>src/python/tests/core/test_core.py</code> <pre><code>def test_create_db(self) -&gt; None:\n    \"\"\"Test the creation of a database with the core models schema.\"\"\"\n    assert set(self.dbc.tables.keys()) == set(Base.metadata.tables.keys())\n</code></pre>"},{"location":"reference/python/tests/ncbi_taxonomy/test_ncbi_taxonomy/","title":"test_ncbi_taxonomy","text":""},{"location":"reference/python/tests/ncbi_taxonomy/test_ncbi_taxonomy/#python.tests.ncbi_taxonomy.test_ncbi_taxonomy","title":"<code>python.tests.ncbi_taxonomy.test_ncbi_taxonomy</code>","text":"<p>Unit testing of :mod:<code>ncbi_taxonomy</code> module.</p> <p>Typical usage example::</p> <pre><code>$ pytest test_ncbi_taxonomy.py\n</code></pre>"},{"location":"reference/python/tests/ncbi_taxonomy/test_ncbi_taxonomy/#python.tests.ncbi_taxonomy.test_ncbi_taxonomy.TestNCBITaxonomyUtils","title":"<code>TestNCBITaxonomyUtils</code>","text":"<p>Tests :class:<code>~ensembl.ncbi_taxonomy.api.utils.Taxonomy</code> in utils.py</p> Source code in <code>src/python/tests/ncbi_taxonomy/test_ncbi_taxonomy.py</code> <pre><code>@pytest.mark.parametrize(\"test_dbs\", [[{\"src\": \"ncbi_db\"}]], indirect=True)\nclass TestNCBITaxonomyUtils:\n    \"\"\"Tests :class:`~ensembl.ncbi_taxonomy.api.utils.Taxonomy` in utils.py\"\"\"\n\n    dbc: UnitTestDB = None\n\n    @pytest.fixture(scope=\"class\", autouse=True)\n    def setup(self, test_dbs: dict[str, UnitTestDB]) -&gt; None:\n        \"\"\"Loads the required fixtures and values as class attributes.\n\n        Args:\n            db: Generator of unit test database (fixture).\n        \"\"\"\n        type(self).dbc = test_dbs[\"ncbi_db\"].dbc\n\n    result_dict = {\n        \"taxon_id\": 9615,\n        \"name\": \"beagle dog\",\n        \"name_class\": \"includes\",\n        \"parent_id\": 9612,\n        \"rank\": \"subspecies\",\n        \"genbank_hidden_flag\": 1,\n        \"left_index\": 595,\n        \"right_index\": 596,\n        \"root_id\": 1,\n    }\n\n    @pytest.mark.parametrize(\"taxon_id, expectation\", [(9615, result_dict)])\n    def test_fetch_node_by_id(self, taxon_id: int, expectation: NCBITaxonomy) -&gt; None:\n        \"\"\"Tests :func:`fetch_node_by_id()`\n\n        Args:\n            taxon_id: An existing taxon_id as in ncbi_taxonomy.\n            expectation: NCBITaxonomy object.\n        \"\"\"\n        with self.dbc.session_scope() as session:\n            result = Taxonomy.fetch_node_by_id(session, taxon_id)\n            result = result.__dict__\n            result.pop(\"_sa_instance_state\")\n            assert result == expectation\n\n    @pytest.mark.parametrize(\"taxon_id, expectation\", [(9616, raises(NoResultFound))])\n    def test_fetch_node_by_id_false_id(self, taxon_id: int, expectation: ContextManager) -&gt; None:\n        \"\"\"Tests :func:`fetch_node_by_id()` with a non-existant taxon_id.\n\n        Args:\n            taxon_id: A taxon_id that is not in ncbi_taxonomy.\n            expectation: NoResultFound() exception.\n        \"\"\"\n        with expectation:\n            with self.dbc.session_scope() as session:\n                result = Taxonomy.fetch_node_by_id(session, taxon_id)\n                assert result == expectation\n\n    result_dict2 = {\n        \"taxon_id\": 9615,\n        \"name\": \"Canis lupus familiaris\",\n        \"name_class\": \"scientific name\",\n        \"parent_id\": 9612,\n        \"rank\": \"subspecies\",\n        \"genbank_hidden_flag\": 1,\n        \"left_index\": 595,\n        \"right_index\": 596,\n        \"root_id\": 1,\n    }\n\n    @pytest.mark.parametrize(\"name, expectation\", [(\"Canis lupus familiaris\", result_dict2)])\n    def test_fetch_taxon_by_species_name(self, name: int, expectation: NCBITaxonomy) -&gt; None:\n        \"\"\"Tests :func:`fetch_taxon_by_species_name()`.\n\n        Args:\n            name: An existing scientific name as in ncbi_taxonomy.\n            expectation: Class NCBITaxonomy object.\n        \"\"\"\n        with self.dbc.session_scope() as session:\n            result = Taxonomy.fetch_taxon_by_species_name(session, name)\n            result = result.__dict__\n            result.pop(\"_sa_instance_state\")\n            assert result == expectation\n\n    @pytest.mark.parametrize(\"name, expectation\", [(\"Canis loopy familiaris\", raises(NoResultFound))])\n    def test_fetch_taxon_by_species_name_false_name(self, name: int, expectation: ContextManager) -&gt; None:\n        \"\"\"Tests :func:`fetch_taxon_by_species_name()` with a non-existant name.\n\n        Args:\n            name: A false scientific name not in ncbi_taxonomy.\n            expectation: NoResultFound() exception.\n        \"\"\"\n        with expectation:\n            with self.dbc.session_scope() as session:\n                result = Taxonomy.fetch_taxon_by_species_name(session, name)\n                assert result == expectation\n\n    result_dict3 = {\n        \"taxon_id\": 9612,\n        \"name\": \"Canis lupus\",\n        \"name_class\": \"scientific name\",\n        \"parent_id\": 9611,\n        \"rank\": \"species\",\n        \"genbank_hidden_flag\": 1,\n        \"left_index\": 594,\n        \"right_index\": 597,\n        \"root_id\": 1,\n    }\n\n    @pytest.mark.parametrize(\"taxon_id, expectation\", [(9615, result_dict3)])\n    def test_parent(self, taxon_id: int, expectation: NCBITaxonomy) -&gt; None:\n        \"\"\"Tests :func:`parent()`.\n\n        Args:\n            taxon_id: An existing taxon_id as in ncbi_taxonomy.\n            expectation: Class NCBITaxonomy object.\n        \"\"\"\n        with self.dbc.session_scope() as session:\n            result = Taxonomy.parent(session, taxon_id)\n            result = result.__dict__\n            result.pop(\"_sa_instance_state\")\n            assert result == expectation\n\n    @pytest.mark.parametrize(\"taxon_id, expectation\", [(9616, raises(NoResultFound))])\n    def test_parent_false_id(self, taxon_id: int, expectation: ContextManager) -&gt; None:\n        \"\"\"Tests :func:`parent()` with non-existant taxon_id.\n\n        Args:\n            taxon_id: A false taxon_id not in ncbi_taxonomy.\n            expectation: NoResultFound() exception.\n        \"\"\"\n        with expectation:\n            with self.dbc.session_scope() as session:\n                result = Taxonomy.parent(session, taxon_id)\n                assert result == expectation\n\n    @pytest.mark.parametrize(\"taxon_id, expectation\", [(1, raises(NoResultFound))])\n    def test_parent_as_root_id(self, taxon_id: int, expectation: ContextManager) -&gt; None:\n        \"\"\"Tests :func:`parent()` with root taxon_id, no parent expected of course.\n\n        Args:\n            taxon_id: The root taxon_id not in ncbi_taxonomy.\n            expectation: NoResultFound() exception.\n        \"\"\"\n        with expectation:\n            with self.dbc.session_scope() as session:\n                result = Taxonomy.parent(session, taxon_id)\n                assert result == expectation\n\n    result_tuple = (\n        {\n            \"genbank_hidden_flag\": 0,\n            \"left_index\": 356,\n            \"name\": \"Hystricognathi\",\n            \"name_class\": \"scientific name\",\n            \"parent_id\": 9989,\n            \"rank\": \"suborder\",\n            \"right_index\": 363,\n            \"root_id\": 1,\n            \"taxon_id\": 33550,\n        },\n        {\n            \"genbank_hidden_flag\": 0,\n            \"left_index\": 364,\n            \"name\": \"Sciurognathi\",\n            \"name_class\": \"scientific name\",\n            \"parent_id\": 9989,\n            \"rank\": \"suborder\",\n            \"right_index\": 399,\n            \"root_id\": 1,\n            \"taxon_id\": 33553,\n        },\n    )\n\n    @pytest.mark.parametrize(\"taxon_id, expectation\", [(9989, result_tuple)])\n    def test_children(self, taxon_id: int, expectation: tuple) -&gt; None:\n        \"\"\"Tests :func:`children()`.\n\n        Args:\n            taxon_id: An existing taxon_id as in ncbi_taxonomy.\n            expectation: A tuple of Class NCBITaxonomy objects.\n        \"\"\"\n        with self.dbc.session_scope() as session:\n            results = Taxonomy.children(session, taxon_id)\n            rows = list(results)\n            for row in rows:\n                row.pop(\"_sa_instance_state\")\n            results = tuple(rows)\n            assert results == expectation\n\n    @pytest.mark.parametrize(\"taxon_id, expectation\", [(9615, raises(NoResultFound))])\n    def test_children_none(self, taxon_id: int, expectation: ContextManager) -&gt; None:\n        \"\"\"Tests :func:`children()` with extant leaf taxon_id, no children expected of course.\n\n        Args:\n            taxon_id: The root taxon_id not in ncbi_taxonomy.\n            expectation: NoResultFound() exception.\n        \"\"\"\n        with expectation:\n            with self.dbc.session_scope() as session:\n                results = Taxonomy.children(session, taxon_id)\n                assert results == expectation\n\n    @pytest.mark.parametrize(\"taxon_id, expectation\", [(1, True)])\n    def test_is_root(self, taxon_id: int, expectation: bool) -&gt; None:\n        \"\"\"Tests :func:`is_root()`.\n\n        Args:\n            taxon_id: Root taxon_id as in ncbi_taxonomy.\n            expectation: True.\n        \"\"\"\n        with self.dbc.session_scope() as session:\n            result = Taxonomy.is_root(session, taxon_id)\n            assert result == expectation\n\n    @pytest.mark.parametrize(\"taxon_id, expectation\", [(9615, False)])\n    def test_is_root_not_root(self, taxon_id: int, expectation: bool) -&gt; None:\n        \"\"\"Tests :func:`is_root()` with extant leaf taxon_id, not a root.\n\n        Args:\n            taxon_id: A leaf taxon_id in ncbi_taxonomy.\n            expectation: False.\n        \"\"\"\n        with self.dbc.session_scope() as session:\n            result = Taxonomy.is_root(session, taxon_id)\n            assert result == expectation\n\n    @pytest.mark.parametrize(\"taxon_id, expectation\", [(9612, 1)])\n    def test_num_descendants(self, taxon_id: int, expectation: int) -&gt; None:\n        \"\"\"Tests :func:`num_descendants()`.\n\n        Args:\n            taxon_id: An internal node taxon_id in ncbi_taxonomy.\n            expectation: Correct number of descendants.\n        \"\"\"\n        with self.dbc.session_scope() as session:\n            result = Taxonomy.num_descendants(session, taxon_id)\n            assert result == expectation\n\n    @pytest.mark.parametrize(\"taxon_id, expectation\", [(1, 381)])\n    def test_num_descendants_large(self, taxon_id: int, expectation: int) -&gt; None:\n        \"\"\"Tests :func:`num_descendants()`.\n\n        Args:\n            taxon_id: The root node taxon_id in ncbi_taxonomy.\n            expectation: The total number taxon entries in db - 1.\n        \"\"\"\n        with self.dbc.session_scope() as session:\n            result = Taxonomy.num_descendants(session, taxon_id)\n            assert result == expectation\n\n    @pytest.mark.parametrize(\"taxon_id, expectation\", [(9615, 0)])\n    def test_num_descendants_leaf_taxon(self, taxon_id: int, expectation: int) -&gt; None:\n        \"\"\"Tests :func:`num_descendants()` with leaf taxon_id.\n\n        Args:\n            taxon_id: Leaf taxon_id not in ncbi_taxonomy.\n            expectation: Correct number of descendants.\n        \"\"\"\n        with self.dbc.session_scope() as session:\n            result = Taxonomy.num_descendants(session, taxon_id)\n            assert result == expectation\n\n    @pytest.mark.parametrize(\"taxon_id, expectation\", [(0, raises(NoResultFound))])\n    def test_num_descendants_false_taxon(self, taxon_id: int, expectation: ContextManager) -&gt; None:\n        \"\"\"Tests :func:`num_descendants()` with leaf taxon_id.\n\n        Args:\n            taxon_id: Leaf taxon_id not in ncbi_taxonomy.\n            expectation: Correct number of descendants.\n        \"\"\"\n        with expectation:\n            with self.dbc.session_scope() as session:\n                result = Taxonomy.num_descendants(session, taxon_id)\n                assert result == expectation\n\n    @pytest.mark.parametrize(\"taxon_id, expectation\", [(9615, True)])\n    def test_is_leaf(self, taxon_id: int, expectation: bool) -&gt; None:\n        \"\"\"Tests :func:`is_leaf()`.\n\n        Args:\n            taxon_id: leaf taxon_id as in ncbi_taxonomy.\n            expectation: True.\n        \"\"\"\n        with self.dbc.session_scope() as session:\n            result = Taxonomy.is_leaf(session, taxon_id)\n            assert result == expectation\n\n    @pytest.mark.parametrize(\"taxon_id, expectation\", [(1, False)])\n    def test_is_leaf_not_leaf(self, taxon_id: int, expectation: bool) -&gt; None:\n        \"\"\"Tests :func:`is_leaf()` with root taxon_id - so not a leaf.\n\n        Args:\n            taxon_id: The root taxon_id in ncbi_taxonomy.\n            expectation: False.\n        \"\"\"\n        with self.dbc.session_scope() as session:\n            result = Taxonomy.is_leaf(session, taxon_id)\n            assert result == expectation\n\n    result_tuple2 = (\n        {\n            \"genbank_hidden_flag\": 0,\n            \"left_index\": 1,\n            \"parent_id\": 0,\n            \"rank\": \"no rank\",\n            \"right_index\": 764,\n            \"root_id\": 1,\n            \"taxon_id\": 1,\n        },\n        {\n            \"genbank_hidden_flag\": 0,\n            \"left_index\": 3,\n            \"parent_id\": 131567,\n            \"rank\": \"superkingdom\",\n            \"right_index\": 762,\n            \"root_id\": 1,\n            \"taxon_id\": 2759,\n        },\n        {\n            \"genbank_hidden_flag\": 1,\n            \"left_index\": 4,\n            \"parent_id\": 2759,\n            \"rank\": \"no rank\",\n            \"right_index\": 761,\n            \"root_id\": 1,\n            \"taxon_id\": 33154,\n        },\n        {\n            \"genbank_hidden_flag\": 1,\n            \"left_index\": 2,\n            \"parent_id\": 1,\n            \"rank\": \"no rank\",\n            \"right_index\": 763,\n            \"root_id\": 1,\n            \"taxon_id\": 131567,\n        },\n    )\n\n    @pytest.mark.parametrize(\"taxon_id, expectation\", [(33208, result_tuple2)])\n    def test_fetch_ancestors(self, taxon_id: int, expectation: tuple) -&gt; None:\n        \"\"\"Tests :func:`fetch_ancestors()`.\n\n        Args:\n            taxon_id: An existing taxon_id as in ncbi_taxonomy.\n            expectation: A tuple of dictionary from Taxonomy objects.\n        \"\"\"\n        with self.dbc.session_scope() as session:\n            results = Taxonomy.fetch_ancestors(session, taxon_id)\n            rows = list(results)\n            for row in rows:\n                row.pop(\"_sa_instance_state\")\n            results = tuple(rows)\n            assert results == expectation\n\n    @pytest.mark.parametrize(\"taxon_id, expectation\", [(1, raises(NoResultFound))])\n    def test_fetch_ancestors_root(self, taxon_id: int, expectation: ContextManager) -&gt; None:\n        \"\"\"Tests :func:`fetch_ancestors()` with root taxon_id.\n\n        Args:\n            taxon_id: The root taxon_id as in ncbi_taxonomy.\n            expectation: NoResultFound() exception.\n        \"\"\"\n        with expectation:\n            with self.dbc.session_scope() as session:\n                result = Taxonomy.fetch_ancestors(session, taxon_id)\n                assert result == expectation\n\n    @pytest.mark.parametrize(\"taxon_id, expectation\", [(0, raises(NoResultFound))])\n    def test_fetch_ancestors_false_taxon(self, taxon_id: int, expectation: ContextManager) -&gt; None:\n        \"\"\"Tests :func:`fetch_ancestors()` with non-existant taxon_id.\n\n        Args:\n            taxon_id: False taxon_id not in ncbi_taxonomy.\n            expectation: NoResultFound() exception.\n        \"\"\"\n        with expectation:\n            with self.dbc.session_scope() as session:\n                result = Taxonomy.fetch_ancestors(session, taxon_id)\n                assert result == expectation\n\n    result_tuple3 = (\n        {\n            \"genbank_hidden_flag\": 0,\n            \"left_index\": 1,\n            \"name\": \"all\",\n            \"name_class\": \"synonym\",\n            \"parent_id\": 0,\n            \"rank\": \"no rank\",\n            \"right_index\": 764,\n            \"root_id\": 1,\n            \"taxon_id\": 1,\n        },\n        {\n            \"genbank_hidden_flag\": 1,\n            \"left_index\": 2,\n            \"name\": \"biota\",\n            \"name_class\": \"synonym\",\n            \"parent_id\": 1,\n            \"rank\": \"no rank\",\n            \"right_index\": 763,\n            \"root_id\": 1,\n            \"taxon_id\": 131567,\n        },\n        {\n            \"genbank_hidden_flag\": 0,\n            \"left_index\": 3,\n            \"name\": \"Eucarya\",\n            \"name_class\": \"synonym\",\n            \"parent_id\": 131567,\n            \"rank\": \"superkingdom\",\n            \"right_index\": 762,\n            \"root_id\": 1,\n            \"taxon_id\": 2759,\n        },\n        {\n            \"genbank_hidden_flag\": 1,\n            \"left_index\": 4,\n            \"name\": \"1500\",\n            \"name_class\": \"ensembl timetree mya\",\n            \"parent_id\": 2759,\n            \"rank\": \"no rank\",\n            \"right_index\": 761,\n            \"root_id\": 1,\n            \"taxon_id\": 33154,\n        },\n    )\n\n    @pytest.mark.parametrize(\"taxon_id1, taxon_id2, expectation\", [(33208, 4751, result_tuple3)])\n    def test_all_common_ancestors(self, taxon_id1: int, taxon_id2: int, expectation: tuple) -&gt; None:\n        \"\"\"Tests :func:`all_common_ancestors()`.\n\n        Args:\n            taxon_id1: An existing taxon_id as in ncbi_taxonomy.\n            taxon_id2: An existing taxon_id as in ncbi_taxonomy.\n            expectation: A tuple of Class NCBITaxonomy objects.\n        \"\"\"\n        with self.dbc.session_scope() as session:\n            results = Taxonomy.all_common_ancestors(session, taxon_id1, taxon_id2)\n            rows = list(results)\n            result = []\n            for row in rows:\n                row = row.__dict__\n                row.pop(\"_sa_instance_state\")\n                result.append(row)\n            results = tuple(result)\n            assert results == expectation\n\n    @pytest.mark.parametrize(\"taxon_id1, taxon_id2, expectation\", [(1, 9615, raises(NoResultFound))])\n    def test_all_common_ancestors_root(\n        self, taxon_id1: int, taxon_id2: int, expectation: ContextManager\n    ) -&gt; None:\n        \"\"\"Tests :func:`all_common_ancestors()` with leaf taxon_id.\n\n        Args:\n            taxon_id1: A root node taxon_id as in ncbi_taxonomy.\n            taxon_id2: A taxon_id as in ncbi_taxonomy.\n            expectation: NoResultFound() exception.\n        \"\"\"\n        with expectation:\n            with self.dbc.session_scope() as session:\n                result = Taxonomy.all_common_ancestors(session, taxon_id1, taxon_id2)\n                assert result == expectation\n\n    result_dict4 = {\n        \"genbank_hidden_flag\": 0,\n        \"left_index\": 1,\n        \"name\": \"all\",\n        \"name_class\": \"synonym\",\n        \"parent_id\": 0,\n        \"rank\": \"no rank\",\n        \"right_index\": 764,\n        \"root_id\": 1,\n        \"taxon_id\": 1,\n    }\n\n    @pytest.mark.parametrize(\"taxon_id1, taxon_id2, expectation\", [(33154, 131567, result_dict4)])\n    def test_last_common_ancestors(self, taxon_id1: int, taxon_id2: int, expectation: tuple) -&gt; None:\n        \"\"\"Tests :func:`all_common_ancestors()`.\n\n        Args:\n            taxon_id1: An existing taxon_id as in ncbi_taxonomy.\n            taxon_id2: An existing taxon_id as in ncbi_taxonomy.\n            expectation: A Class NCBITaxonomy objects.\n        \"\"\"\n        with self.dbc.session_scope() as session:\n            result = Taxonomy.last_common_ancestor(session, taxon_id1, taxon_id2)\n            result = result.__dict__\n            result.pop(\"_sa_instance_state\")\n            assert result == expectation\n</code></pre>"},{"location":"reference/python/tests/ncbi_taxonomy/test_ncbi_taxonomy/#python.tests.ncbi_taxonomy.test_ncbi_taxonomy.TestNCBITaxonomyUtils.dbc","title":"<code>dbc = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/tests/ncbi_taxonomy/test_ncbi_taxonomy/#python.tests.ncbi_taxonomy.test_ncbi_taxonomy.TestNCBITaxonomyUtils.result_dict","title":"<code>result_dict = {'taxon_id': 9615, 'name': 'beagle dog', 'name_class': 'includes', 'parent_id': 9612, 'rank': 'subspecies', 'genbank_hidden_flag': 1, 'left_index': 595, 'right_index': 596, 'root_id': 1}</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/tests/ncbi_taxonomy/test_ncbi_taxonomy/#python.tests.ncbi_taxonomy.test_ncbi_taxonomy.TestNCBITaxonomyUtils.result_dict2","title":"<code>result_dict2 = {'taxon_id': 9615, 'name': 'Canis lupus familiaris', 'name_class': 'scientific name', 'parent_id': 9612, 'rank': 'subspecies', 'genbank_hidden_flag': 1, 'left_index': 595, 'right_index': 596, 'root_id': 1}</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/tests/ncbi_taxonomy/test_ncbi_taxonomy/#python.tests.ncbi_taxonomy.test_ncbi_taxonomy.TestNCBITaxonomyUtils.result_dict3","title":"<code>result_dict3 = {'taxon_id': 9612, 'name': 'Canis lupus', 'name_class': 'scientific name', 'parent_id': 9611, 'rank': 'species', 'genbank_hidden_flag': 1, 'left_index': 594, 'right_index': 597, 'root_id': 1}</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/tests/ncbi_taxonomy/test_ncbi_taxonomy/#python.tests.ncbi_taxonomy.test_ncbi_taxonomy.TestNCBITaxonomyUtils.result_dict4","title":"<code>result_dict4 = {'genbank_hidden_flag': 0, 'left_index': 1, 'name': 'all', 'name_class': 'synonym', 'parent_id': 0, 'rank': 'no rank', 'right_index': 764, 'root_id': 1, 'taxon_id': 1}</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/tests/ncbi_taxonomy/test_ncbi_taxonomy/#python.tests.ncbi_taxonomy.test_ncbi_taxonomy.TestNCBITaxonomyUtils.result_tuple","title":"<code>result_tuple = ({'genbank_hidden_flag': 0, 'left_index': 356, 'name': 'Hystricognathi', 'name_class': 'scientific name', 'parent_id': 9989, 'rank': 'suborder', 'right_index': 363, 'root_id': 1, 'taxon_id': 33550}, {'genbank_hidden_flag': 0, 'left_index': 364, 'name': 'Sciurognathi', 'name_class': 'scientific name', 'parent_id': 9989, 'rank': 'suborder', 'right_index': 399, 'root_id': 1, 'taxon_id': 33553})</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/tests/ncbi_taxonomy/test_ncbi_taxonomy/#python.tests.ncbi_taxonomy.test_ncbi_taxonomy.TestNCBITaxonomyUtils.result_tuple2","title":"<code>result_tuple2 = ({'genbank_hidden_flag': 0, 'left_index': 1, 'parent_id': 0, 'rank': 'no rank', 'right_index': 764, 'root_id': 1, 'taxon_id': 1}, {'genbank_hidden_flag': 0, 'left_index': 3, 'parent_id': 131567, 'rank': 'superkingdom', 'right_index': 762, 'root_id': 1, 'taxon_id': 2759}, {'genbank_hidden_flag': 1, 'left_index': 4, 'parent_id': 2759, 'rank': 'no rank', 'right_index': 761, 'root_id': 1, 'taxon_id': 33154}, {'genbank_hidden_flag': 1, 'left_index': 2, 'parent_id': 1, 'rank': 'no rank', 'right_index': 763, 'root_id': 1, 'taxon_id': 131567})</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/tests/ncbi_taxonomy/test_ncbi_taxonomy/#python.tests.ncbi_taxonomy.test_ncbi_taxonomy.TestNCBITaxonomyUtils.result_tuple3","title":"<code>result_tuple3 = ({'genbank_hidden_flag': 0, 'left_index': 1, 'name': 'all', 'name_class': 'synonym', 'parent_id': 0, 'rank': 'no rank', 'right_index': 764, 'root_id': 1, 'taxon_id': 1}, {'genbank_hidden_flag': 1, 'left_index': 2, 'name': 'biota', 'name_class': 'synonym', 'parent_id': 1, 'rank': 'no rank', 'right_index': 763, 'root_id': 1, 'taxon_id': 131567}, {'genbank_hidden_flag': 0, 'left_index': 3, 'name': 'Eucarya', 'name_class': 'synonym', 'parent_id': 131567, 'rank': 'superkingdom', 'right_index': 762, 'root_id': 1, 'taxon_id': 2759}, {'genbank_hidden_flag': 1, 'left_index': 4, 'name': '1500', 'name_class': 'ensembl timetree mya', 'parent_id': 2759, 'rank': 'no rank', 'right_index': 761, 'root_id': 1, 'taxon_id': 33154})</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/tests/ncbi_taxonomy/test_ncbi_taxonomy/#python.tests.ncbi_taxonomy.test_ncbi_taxonomy.TestNCBITaxonomyUtils.setup","title":"<code>setup(test_dbs)</code>","text":"<p>Loads the required fixtures and values as class attributes.</p> <p>Parameters:</p> Name Type Description Default <code>db</code> <p>Generator of unit test database (fixture).</p> required Source code in <code>src/python/tests/ncbi_taxonomy/test_ncbi_taxonomy.py</code> <pre><code>@pytest.fixture(scope=\"class\", autouse=True)\ndef setup(self, test_dbs: dict[str, UnitTestDB]) -&gt; None:\n    \"\"\"Loads the required fixtures and values as class attributes.\n\n    Args:\n        db: Generator of unit test database (fixture).\n    \"\"\"\n    type(self).dbc = test_dbs[\"ncbi_db\"].dbc\n</code></pre>"},{"location":"reference/python/tests/ncbi_taxonomy/test_ncbi_taxonomy/#python.tests.ncbi_taxonomy.test_ncbi_taxonomy.TestNCBITaxonomyUtils.test_all_common_ancestors","title":"<code>test_all_common_ancestors(taxon_id1, taxon_id2, expectation)</code>","text":"<p>Tests :func:<code>all_common_ancestors()</code>.</p> <p>Parameters:</p> Name Type Description Default <code>taxon_id1</code> <code>int</code> <p>An existing taxon_id as in ncbi_taxonomy.</p> required <code>taxon_id2</code> <code>int</code> <p>An existing taxon_id as in ncbi_taxonomy.</p> required <code>expectation</code> <code>tuple</code> <p>A tuple of Class NCBITaxonomy objects.</p> required Source code in <code>src/python/tests/ncbi_taxonomy/test_ncbi_taxonomy.py</code> <pre><code>@pytest.mark.parametrize(\"taxon_id1, taxon_id2, expectation\", [(33208, 4751, result_tuple3)])\ndef test_all_common_ancestors(self, taxon_id1: int, taxon_id2: int, expectation: tuple) -&gt; None:\n    \"\"\"Tests :func:`all_common_ancestors()`.\n\n    Args:\n        taxon_id1: An existing taxon_id as in ncbi_taxonomy.\n        taxon_id2: An existing taxon_id as in ncbi_taxonomy.\n        expectation: A tuple of Class NCBITaxonomy objects.\n    \"\"\"\n    with self.dbc.session_scope() as session:\n        results = Taxonomy.all_common_ancestors(session, taxon_id1, taxon_id2)\n        rows = list(results)\n        result = []\n        for row in rows:\n            row = row.__dict__\n            row.pop(\"_sa_instance_state\")\n            result.append(row)\n        results = tuple(result)\n        assert results == expectation\n</code></pre>"},{"location":"reference/python/tests/ncbi_taxonomy/test_ncbi_taxonomy/#python.tests.ncbi_taxonomy.test_ncbi_taxonomy.TestNCBITaxonomyUtils.test_all_common_ancestors_root","title":"<code>test_all_common_ancestors_root(taxon_id1, taxon_id2, expectation)</code>","text":"<p>Tests :func:<code>all_common_ancestors()</code> with leaf taxon_id.</p> <p>Parameters:</p> Name Type Description Default <code>taxon_id1</code> <code>int</code> <p>A root node taxon_id as in ncbi_taxonomy.</p> required <code>taxon_id2</code> <code>int</code> <p>A taxon_id as in ncbi_taxonomy.</p> required <code>expectation</code> <code>ContextManager</code> <p>NoResultFound() exception.</p> required Source code in <code>src/python/tests/ncbi_taxonomy/test_ncbi_taxonomy.py</code> <pre><code>@pytest.mark.parametrize(\"taxon_id1, taxon_id2, expectation\", [(1, 9615, raises(NoResultFound))])\ndef test_all_common_ancestors_root(\n    self, taxon_id1: int, taxon_id2: int, expectation: ContextManager\n) -&gt; None:\n    \"\"\"Tests :func:`all_common_ancestors()` with leaf taxon_id.\n\n    Args:\n        taxon_id1: A root node taxon_id as in ncbi_taxonomy.\n        taxon_id2: A taxon_id as in ncbi_taxonomy.\n        expectation: NoResultFound() exception.\n    \"\"\"\n    with expectation:\n        with self.dbc.session_scope() as session:\n            result = Taxonomy.all_common_ancestors(session, taxon_id1, taxon_id2)\n            assert result == expectation\n</code></pre>"},{"location":"reference/python/tests/ncbi_taxonomy/test_ncbi_taxonomy/#python.tests.ncbi_taxonomy.test_ncbi_taxonomy.TestNCBITaxonomyUtils.test_children","title":"<code>test_children(taxon_id, expectation)</code>","text":"<p>Tests :func:<code>children()</code>.</p> <p>Parameters:</p> Name Type Description Default <code>taxon_id</code> <code>int</code> <p>An existing taxon_id as in ncbi_taxonomy.</p> required <code>expectation</code> <code>tuple</code> <p>A tuple of Class NCBITaxonomy objects.</p> required Source code in <code>src/python/tests/ncbi_taxonomy/test_ncbi_taxonomy.py</code> <pre><code>@pytest.mark.parametrize(\"taxon_id, expectation\", [(9989, result_tuple)])\ndef test_children(self, taxon_id: int, expectation: tuple) -&gt; None:\n    \"\"\"Tests :func:`children()`.\n\n    Args:\n        taxon_id: An existing taxon_id as in ncbi_taxonomy.\n        expectation: A tuple of Class NCBITaxonomy objects.\n    \"\"\"\n    with self.dbc.session_scope() as session:\n        results = Taxonomy.children(session, taxon_id)\n        rows = list(results)\n        for row in rows:\n            row.pop(\"_sa_instance_state\")\n        results = tuple(rows)\n        assert results == expectation\n</code></pre>"},{"location":"reference/python/tests/ncbi_taxonomy/test_ncbi_taxonomy/#python.tests.ncbi_taxonomy.test_ncbi_taxonomy.TestNCBITaxonomyUtils.test_children_none","title":"<code>test_children_none(taxon_id, expectation)</code>","text":"<p>Tests :func:<code>children()</code> with extant leaf taxon_id, no children expected of course.</p> <p>Parameters:</p> Name Type Description Default <code>taxon_id</code> <code>int</code> <p>The root taxon_id not in ncbi_taxonomy.</p> required <code>expectation</code> <code>ContextManager</code> <p>NoResultFound() exception.</p> required Source code in <code>src/python/tests/ncbi_taxonomy/test_ncbi_taxonomy.py</code> <pre><code>@pytest.mark.parametrize(\"taxon_id, expectation\", [(9615, raises(NoResultFound))])\ndef test_children_none(self, taxon_id: int, expectation: ContextManager) -&gt; None:\n    \"\"\"Tests :func:`children()` with extant leaf taxon_id, no children expected of course.\n\n    Args:\n        taxon_id: The root taxon_id not in ncbi_taxonomy.\n        expectation: NoResultFound() exception.\n    \"\"\"\n    with expectation:\n        with self.dbc.session_scope() as session:\n            results = Taxonomy.children(session, taxon_id)\n            assert results == expectation\n</code></pre>"},{"location":"reference/python/tests/ncbi_taxonomy/test_ncbi_taxonomy/#python.tests.ncbi_taxonomy.test_ncbi_taxonomy.TestNCBITaxonomyUtils.test_fetch_ancestors","title":"<code>test_fetch_ancestors(taxon_id, expectation)</code>","text":"<p>Tests :func:<code>fetch_ancestors()</code>.</p> <p>Parameters:</p> Name Type Description Default <code>taxon_id</code> <code>int</code> <p>An existing taxon_id as in ncbi_taxonomy.</p> required <code>expectation</code> <code>tuple</code> <p>A tuple of dictionary from Taxonomy objects.</p> required Source code in <code>src/python/tests/ncbi_taxonomy/test_ncbi_taxonomy.py</code> <pre><code>@pytest.mark.parametrize(\"taxon_id, expectation\", [(33208, result_tuple2)])\ndef test_fetch_ancestors(self, taxon_id: int, expectation: tuple) -&gt; None:\n    \"\"\"Tests :func:`fetch_ancestors()`.\n\n    Args:\n        taxon_id: An existing taxon_id as in ncbi_taxonomy.\n        expectation: A tuple of dictionary from Taxonomy objects.\n    \"\"\"\n    with self.dbc.session_scope() as session:\n        results = Taxonomy.fetch_ancestors(session, taxon_id)\n        rows = list(results)\n        for row in rows:\n            row.pop(\"_sa_instance_state\")\n        results = tuple(rows)\n        assert results == expectation\n</code></pre>"},{"location":"reference/python/tests/ncbi_taxonomy/test_ncbi_taxonomy/#python.tests.ncbi_taxonomy.test_ncbi_taxonomy.TestNCBITaxonomyUtils.test_fetch_ancestors_false_taxon","title":"<code>test_fetch_ancestors_false_taxon(taxon_id, expectation)</code>","text":"<p>Tests :func:<code>fetch_ancestors()</code> with non-existant taxon_id.</p> <p>Parameters:</p> Name Type Description Default <code>taxon_id</code> <code>int</code> <p>False taxon_id not in ncbi_taxonomy.</p> required <code>expectation</code> <code>ContextManager</code> <p>NoResultFound() exception.</p> required Source code in <code>src/python/tests/ncbi_taxonomy/test_ncbi_taxonomy.py</code> <pre><code>@pytest.mark.parametrize(\"taxon_id, expectation\", [(0, raises(NoResultFound))])\ndef test_fetch_ancestors_false_taxon(self, taxon_id: int, expectation: ContextManager) -&gt; None:\n    \"\"\"Tests :func:`fetch_ancestors()` with non-existant taxon_id.\n\n    Args:\n        taxon_id: False taxon_id not in ncbi_taxonomy.\n        expectation: NoResultFound() exception.\n    \"\"\"\n    with expectation:\n        with self.dbc.session_scope() as session:\n            result = Taxonomy.fetch_ancestors(session, taxon_id)\n            assert result == expectation\n</code></pre>"},{"location":"reference/python/tests/ncbi_taxonomy/test_ncbi_taxonomy/#python.tests.ncbi_taxonomy.test_ncbi_taxonomy.TestNCBITaxonomyUtils.test_fetch_ancestors_root","title":"<code>test_fetch_ancestors_root(taxon_id, expectation)</code>","text":"<p>Tests :func:<code>fetch_ancestors()</code> with root taxon_id.</p> <p>Parameters:</p> Name Type Description Default <code>taxon_id</code> <code>int</code> <p>The root taxon_id as in ncbi_taxonomy.</p> required <code>expectation</code> <code>ContextManager</code> <p>NoResultFound() exception.</p> required Source code in <code>src/python/tests/ncbi_taxonomy/test_ncbi_taxonomy.py</code> <pre><code>@pytest.mark.parametrize(\"taxon_id, expectation\", [(1, raises(NoResultFound))])\ndef test_fetch_ancestors_root(self, taxon_id: int, expectation: ContextManager) -&gt; None:\n    \"\"\"Tests :func:`fetch_ancestors()` with root taxon_id.\n\n    Args:\n        taxon_id: The root taxon_id as in ncbi_taxonomy.\n        expectation: NoResultFound() exception.\n    \"\"\"\n    with expectation:\n        with self.dbc.session_scope() as session:\n            result = Taxonomy.fetch_ancestors(session, taxon_id)\n            assert result == expectation\n</code></pre>"},{"location":"reference/python/tests/ncbi_taxonomy/test_ncbi_taxonomy/#python.tests.ncbi_taxonomy.test_ncbi_taxonomy.TestNCBITaxonomyUtils.test_fetch_node_by_id","title":"<code>test_fetch_node_by_id(taxon_id, expectation)</code>","text":"<p>Tests :func:<code>fetch_node_by_id()</code></p> <p>Parameters:</p> Name Type Description Default <code>taxon_id</code> <code>int</code> <p>An existing taxon_id as in ncbi_taxonomy.</p> required <code>expectation</code> <code>NCBITaxonomy</code> <p>NCBITaxonomy object.</p> required Source code in <code>src/python/tests/ncbi_taxonomy/test_ncbi_taxonomy.py</code> <pre><code>@pytest.mark.parametrize(\"taxon_id, expectation\", [(9615, result_dict)])\ndef test_fetch_node_by_id(self, taxon_id: int, expectation: NCBITaxonomy) -&gt; None:\n    \"\"\"Tests :func:`fetch_node_by_id()`\n\n    Args:\n        taxon_id: An existing taxon_id as in ncbi_taxonomy.\n        expectation: NCBITaxonomy object.\n    \"\"\"\n    with self.dbc.session_scope() as session:\n        result = Taxonomy.fetch_node_by_id(session, taxon_id)\n        result = result.__dict__\n        result.pop(\"_sa_instance_state\")\n        assert result == expectation\n</code></pre>"},{"location":"reference/python/tests/ncbi_taxonomy/test_ncbi_taxonomy/#python.tests.ncbi_taxonomy.test_ncbi_taxonomy.TestNCBITaxonomyUtils.test_fetch_node_by_id_false_id","title":"<code>test_fetch_node_by_id_false_id(taxon_id, expectation)</code>","text":"<p>Tests :func:<code>fetch_node_by_id()</code> with a non-existant taxon_id.</p> <p>Parameters:</p> Name Type Description Default <code>taxon_id</code> <code>int</code> <p>A taxon_id that is not in ncbi_taxonomy.</p> required <code>expectation</code> <code>ContextManager</code> <p>NoResultFound() exception.</p> required Source code in <code>src/python/tests/ncbi_taxonomy/test_ncbi_taxonomy.py</code> <pre><code>@pytest.mark.parametrize(\"taxon_id, expectation\", [(9616, raises(NoResultFound))])\ndef test_fetch_node_by_id_false_id(self, taxon_id: int, expectation: ContextManager) -&gt; None:\n    \"\"\"Tests :func:`fetch_node_by_id()` with a non-existant taxon_id.\n\n    Args:\n        taxon_id: A taxon_id that is not in ncbi_taxonomy.\n        expectation: NoResultFound() exception.\n    \"\"\"\n    with expectation:\n        with self.dbc.session_scope() as session:\n            result = Taxonomy.fetch_node_by_id(session, taxon_id)\n            assert result == expectation\n</code></pre>"},{"location":"reference/python/tests/ncbi_taxonomy/test_ncbi_taxonomy/#python.tests.ncbi_taxonomy.test_ncbi_taxonomy.TestNCBITaxonomyUtils.test_fetch_taxon_by_species_name","title":"<code>test_fetch_taxon_by_species_name(name, expectation)</code>","text":"<p>Tests :func:<code>fetch_taxon_by_species_name()</code>.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>int</code> <p>An existing scientific name as in ncbi_taxonomy.</p> required <code>expectation</code> <code>NCBITaxonomy</code> <p>Class NCBITaxonomy object.</p> required Source code in <code>src/python/tests/ncbi_taxonomy/test_ncbi_taxonomy.py</code> <pre><code>@pytest.mark.parametrize(\"name, expectation\", [(\"Canis lupus familiaris\", result_dict2)])\ndef test_fetch_taxon_by_species_name(self, name: int, expectation: NCBITaxonomy) -&gt; None:\n    \"\"\"Tests :func:`fetch_taxon_by_species_name()`.\n\n    Args:\n        name: An existing scientific name as in ncbi_taxonomy.\n        expectation: Class NCBITaxonomy object.\n    \"\"\"\n    with self.dbc.session_scope() as session:\n        result = Taxonomy.fetch_taxon_by_species_name(session, name)\n        result = result.__dict__\n        result.pop(\"_sa_instance_state\")\n        assert result == expectation\n</code></pre>"},{"location":"reference/python/tests/ncbi_taxonomy/test_ncbi_taxonomy/#python.tests.ncbi_taxonomy.test_ncbi_taxonomy.TestNCBITaxonomyUtils.test_fetch_taxon_by_species_name_false_name","title":"<code>test_fetch_taxon_by_species_name_false_name(name, expectation)</code>","text":"<p>Tests :func:<code>fetch_taxon_by_species_name()</code> with a non-existant name.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>int</code> <p>A false scientific name not in ncbi_taxonomy.</p> required <code>expectation</code> <code>ContextManager</code> <p>NoResultFound() exception.</p> required Source code in <code>src/python/tests/ncbi_taxonomy/test_ncbi_taxonomy.py</code> <pre><code>@pytest.mark.parametrize(\"name, expectation\", [(\"Canis loopy familiaris\", raises(NoResultFound))])\ndef test_fetch_taxon_by_species_name_false_name(self, name: int, expectation: ContextManager) -&gt; None:\n    \"\"\"Tests :func:`fetch_taxon_by_species_name()` with a non-existant name.\n\n    Args:\n        name: A false scientific name not in ncbi_taxonomy.\n        expectation: NoResultFound() exception.\n    \"\"\"\n    with expectation:\n        with self.dbc.session_scope() as session:\n            result = Taxonomy.fetch_taxon_by_species_name(session, name)\n            assert result == expectation\n</code></pre>"},{"location":"reference/python/tests/ncbi_taxonomy/test_ncbi_taxonomy/#python.tests.ncbi_taxonomy.test_ncbi_taxonomy.TestNCBITaxonomyUtils.test_is_leaf","title":"<code>test_is_leaf(taxon_id, expectation)</code>","text":"<p>Tests :func:<code>is_leaf()</code>.</p> <p>Parameters:</p> Name Type Description Default <code>taxon_id</code> <code>int</code> <p>leaf taxon_id as in ncbi_taxonomy.</p> required <code>expectation</code> <code>bool</code> <p>True.</p> required Source code in <code>src/python/tests/ncbi_taxonomy/test_ncbi_taxonomy.py</code> <pre><code>@pytest.mark.parametrize(\"taxon_id, expectation\", [(9615, True)])\ndef test_is_leaf(self, taxon_id: int, expectation: bool) -&gt; None:\n    \"\"\"Tests :func:`is_leaf()`.\n\n    Args:\n        taxon_id: leaf taxon_id as in ncbi_taxonomy.\n        expectation: True.\n    \"\"\"\n    with self.dbc.session_scope() as session:\n        result = Taxonomy.is_leaf(session, taxon_id)\n        assert result == expectation\n</code></pre>"},{"location":"reference/python/tests/ncbi_taxonomy/test_ncbi_taxonomy/#python.tests.ncbi_taxonomy.test_ncbi_taxonomy.TestNCBITaxonomyUtils.test_is_leaf_not_leaf","title":"<code>test_is_leaf_not_leaf(taxon_id, expectation)</code>","text":"<p>Tests :func:<code>is_leaf()</code> with root taxon_id - so not a leaf.</p> <p>Parameters:</p> Name Type Description Default <code>taxon_id</code> <code>int</code> <p>The root taxon_id in ncbi_taxonomy.</p> required <code>expectation</code> <code>bool</code> <p>False.</p> required Source code in <code>src/python/tests/ncbi_taxonomy/test_ncbi_taxonomy.py</code> <pre><code>@pytest.mark.parametrize(\"taxon_id, expectation\", [(1, False)])\ndef test_is_leaf_not_leaf(self, taxon_id: int, expectation: bool) -&gt; None:\n    \"\"\"Tests :func:`is_leaf()` with root taxon_id - so not a leaf.\n\n    Args:\n        taxon_id: The root taxon_id in ncbi_taxonomy.\n        expectation: False.\n    \"\"\"\n    with self.dbc.session_scope() as session:\n        result = Taxonomy.is_leaf(session, taxon_id)\n        assert result == expectation\n</code></pre>"},{"location":"reference/python/tests/ncbi_taxonomy/test_ncbi_taxonomy/#python.tests.ncbi_taxonomy.test_ncbi_taxonomy.TestNCBITaxonomyUtils.test_is_root","title":"<code>test_is_root(taxon_id, expectation)</code>","text":"<p>Tests :func:<code>is_root()</code>.</p> <p>Parameters:</p> Name Type Description Default <code>taxon_id</code> <code>int</code> <p>Root taxon_id as in ncbi_taxonomy.</p> required <code>expectation</code> <code>bool</code> <p>True.</p> required Source code in <code>src/python/tests/ncbi_taxonomy/test_ncbi_taxonomy.py</code> <pre><code>@pytest.mark.parametrize(\"taxon_id, expectation\", [(1, True)])\ndef test_is_root(self, taxon_id: int, expectation: bool) -&gt; None:\n    \"\"\"Tests :func:`is_root()`.\n\n    Args:\n        taxon_id: Root taxon_id as in ncbi_taxonomy.\n        expectation: True.\n    \"\"\"\n    with self.dbc.session_scope() as session:\n        result = Taxonomy.is_root(session, taxon_id)\n        assert result == expectation\n</code></pre>"},{"location":"reference/python/tests/ncbi_taxonomy/test_ncbi_taxonomy/#python.tests.ncbi_taxonomy.test_ncbi_taxonomy.TestNCBITaxonomyUtils.test_is_root_not_root","title":"<code>test_is_root_not_root(taxon_id, expectation)</code>","text":"<p>Tests :func:<code>is_root()</code> with extant leaf taxon_id, not a root.</p> <p>Parameters:</p> Name Type Description Default <code>taxon_id</code> <code>int</code> <p>A leaf taxon_id in ncbi_taxonomy.</p> required <code>expectation</code> <code>bool</code> <p>False.</p> required Source code in <code>src/python/tests/ncbi_taxonomy/test_ncbi_taxonomy.py</code> <pre><code>@pytest.mark.parametrize(\"taxon_id, expectation\", [(9615, False)])\ndef test_is_root_not_root(self, taxon_id: int, expectation: bool) -&gt; None:\n    \"\"\"Tests :func:`is_root()` with extant leaf taxon_id, not a root.\n\n    Args:\n        taxon_id: A leaf taxon_id in ncbi_taxonomy.\n        expectation: False.\n    \"\"\"\n    with self.dbc.session_scope() as session:\n        result = Taxonomy.is_root(session, taxon_id)\n        assert result == expectation\n</code></pre>"},{"location":"reference/python/tests/ncbi_taxonomy/test_ncbi_taxonomy/#python.tests.ncbi_taxonomy.test_ncbi_taxonomy.TestNCBITaxonomyUtils.test_last_common_ancestors","title":"<code>test_last_common_ancestors(taxon_id1, taxon_id2, expectation)</code>","text":"<p>Tests :func:<code>all_common_ancestors()</code>.</p> <p>Parameters:</p> Name Type Description Default <code>taxon_id1</code> <code>int</code> <p>An existing taxon_id as in ncbi_taxonomy.</p> required <code>taxon_id2</code> <code>int</code> <p>An existing taxon_id as in ncbi_taxonomy.</p> required <code>expectation</code> <code>tuple</code> <p>A Class NCBITaxonomy objects.</p> required Source code in <code>src/python/tests/ncbi_taxonomy/test_ncbi_taxonomy.py</code> <pre><code>@pytest.mark.parametrize(\"taxon_id1, taxon_id2, expectation\", [(33154, 131567, result_dict4)])\ndef test_last_common_ancestors(self, taxon_id1: int, taxon_id2: int, expectation: tuple) -&gt; None:\n    \"\"\"Tests :func:`all_common_ancestors()`.\n\n    Args:\n        taxon_id1: An existing taxon_id as in ncbi_taxonomy.\n        taxon_id2: An existing taxon_id as in ncbi_taxonomy.\n        expectation: A Class NCBITaxonomy objects.\n    \"\"\"\n    with self.dbc.session_scope() as session:\n        result = Taxonomy.last_common_ancestor(session, taxon_id1, taxon_id2)\n        result = result.__dict__\n        result.pop(\"_sa_instance_state\")\n        assert result == expectation\n</code></pre>"},{"location":"reference/python/tests/ncbi_taxonomy/test_ncbi_taxonomy/#python.tests.ncbi_taxonomy.test_ncbi_taxonomy.TestNCBITaxonomyUtils.test_num_descendants","title":"<code>test_num_descendants(taxon_id, expectation)</code>","text":"<p>Tests :func:<code>num_descendants()</code>.</p> <p>Parameters:</p> Name Type Description Default <code>taxon_id</code> <code>int</code> <p>An internal node taxon_id in ncbi_taxonomy.</p> required <code>expectation</code> <code>int</code> <p>Correct number of descendants.</p> required Source code in <code>src/python/tests/ncbi_taxonomy/test_ncbi_taxonomy.py</code> <pre><code>@pytest.mark.parametrize(\"taxon_id, expectation\", [(9612, 1)])\ndef test_num_descendants(self, taxon_id: int, expectation: int) -&gt; None:\n    \"\"\"Tests :func:`num_descendants()`.\n\n    Args:\n        taxon_id: An internal node taxon_id in ncbi_taxonomy.\n        expectation: Correct number of descendants.\n    \"\"\"\n    with self.dbc.session_scope() as session:\n        result = Taxonomy.num_descendants(session, taxon_id)\n        assert result == expectation\n</code></pre>"},{"location":"reference/python/tests/ncbi_taxonomy/test_ncbi_taxonomy/#python.tests.ncbi_taxonomy.test_ncbi_taxonomy.TestNCBITaxonomyUtils.test_num_descendants_false_taxon","title":"<code>test_num_descendants_false_taxon(taxon_id, expectation)</code>","text":"<p>Tests :func:<code>num_descendants()</code> with leaf taxon_id.</p> <p>Parameters:</p> Name Type Description Default <code>taxon_id</code> <code>int</code> <p>Leaf taxon_id not in ncbi_taxonomy.</p> required <code>expectation</code> <code>ContextManager</code> <p>Correct number of descendants.</p> required Source code in <code>src/python/tests/ncbi_taxonomy/test_ncbi_taxonomy.py</code> <pre><code>@pytest.mark.parametrize(\"taxon_id, expectation\", [(0, raises(NoResultFound))])\ndef test_num_descendants_false_taxon(self, taxon_id: int, expectation: ContextManager) -&gt; None:\n    \"\"\"Tests :func:`num_descendants()` with leaf taxon_id.\n\n    Args:\n        taxon_id: Leaf taxon_id not in ncbi_taxonomy.\n        expectation: Correct number of descendants.\n    \"\"\"\n    with expectation:\n        with self.dbc.session_scope() as session:\n            result = Taxonomy.num_descendants(session, taxon_id)\n            assert result == expectation\n</code></pre>"},{"location":"reference/python/tests/ncbi_taxonomy/test_ncbi_taxonomy/#python.tests.ncbi_taxonomy.test_ncbi_taxonomy.TestNCBITaxonomyUtils.test_num_descendants_large","title":"<code>test_num_descendants_large(taxon_id, expectation)</code>","text":"<p>Tests :func:<code>num_descendants()</code>.</p> <p>Parameters:</p> Name Type Description Default <code>taxon_id</code> <code>int</code> <p>The root node taxon_id in ncbi_taxonomy.</p> required <code>expectation</code> <code>int</code> <p>The total number taxon entries in db - 1.</p> required Source code in <code>src/python/tests/ncbi_taxonomy/test_ncbi_taxonomy.py</code> <pre><code>@pytest.mark.parametrize(\"taxon_id, expectation\", [(1, 381)])\ndef test_num_descendants_large(self, taxon_id: int, expectation: int) -&gt; None:\n    \"\"\"Tests :func:`num_descendants()`.\n\n    Args:\n        taxon_id: The root node taxon_id in ncbi_taxonomy.\n        expectation: The total number taxon entries in db - 1.\n    \"\"\"\n    with self.dbc.session_scope() as session:\n        result = Taxonomy.num_descendants(session, taxon_id)\n        assert result == expectation\n</code></pre>"},{"location":"reference/python/tests/ncbi_taxonomy/test_ncbi_taxonomy/#python.tests.ncbi_taxonomy.test_ncbi_taxonomy.TestNCBITaxonomyUtils.test_num_descendants_leaf_taxon","title":"<code>test_num_descendants_leaf_taxon(taxon_id, expectation)</code>","text":"<p>Tests :func:<code>num_descendants()</code> with leaf taxon_id.</p> <p>Parameters:</p> Name Type Description Default <code>taxon_id</code> <code>int</code> <p>Leaf taxon_id not in ncbi_taxonomy.</p> required <code>expectation</code> <code>int</code> <p>Correct number of descendants.</p> required Source code in <code>src/python/tests/ncbi_taxonomy/test_ncbi_taxonomy.py</code> <pre><code>@pytest.mark.parametrize(\"taxon_id, expectation\", [(9615, 0)])\ndef test_num_descendants_leaf_taxon(self, taxon_id: int, expectation: int) -&gt; None:\n    \"\"\"Tests :func:`num_descendants()` with leaf taxon_id.\n\n    Args:\n        taxon_id: Leaf taxon_id not in ncbi_taxonomy.\n        expectation: Correct number of descendants.\n    \"\"\"\n    with self.dbc.session_scope() as session:\n        result = Taxonomy.num_descendants(session, taxon_id)\n        assert result == expectation\n</code></pre>"},{"location":"reference/python/tests/ncbi_taxonomy/test_ncbi_taxonomy/#python.tests.ncbi_taxonomy.test_ncbi_taxonomy.TestNCBITaxonomyUtils.test_parent","title":"<code>test_parent(taxon_id, expectation)</code>","text":"<p>Tests :func:<code>parent()</code>.</p> <p>Parameters:</p> Name Type Description Default <code>taxon_id</code> <code>int</code> <p>An existing taxon_id as in ncbi_taxonomy.</p> required <code>expectation</code> <code>NCBITaxonomy</code> <p>Class NCBITaxonomy object.</p> required Source code in <code>src/python/tests/ncbi_taxonomy/test_ncbi_taxonomy.py</code> <pre><code>@pytest.mark.parametrize(\"taxon_id, expectation\", [(9615, result_dict3)])\ndef test_parent(self, taxon_id: int, expectation: NCBITaxonomy) -&gt; None:\n    \"\"\"Tests :func:`parent()`.\n\n    Args:\n        taxon_id: An existing taxon_id as in ncbi_taxonomy.\n        expectation: Class NCBITaxonomy object.\n    \"\"\"\n    with self.dbc.session_scope() as session:\n        result = Taxonomy.parent(session, taxon_id)\n        result = result.__dict__\n        result.pop(\"_sa_instance_state\")\n        assert result == expectation\n</code></pre>"},{"location":"reference/python/tests/ncbi_taxonomy/test_ncbi_taxonomy/#python.tests.ncbi_taxonomy.test_ncbi_taxonomy.TestNCBITaxonomyUtils.test_parent_as_root_id","title":"<code>test_parent_as_root_id(taxon_id, expectation)</code>","text":"<p>Tests :func:<code>parent()</code> with root taxon_id, no parent expected of course.</p> <p>Parameters:</p> Name Type Description Default <code>taxon_id</code> <code>int</code> <p>The root taxon_id not in ncbi_taxonomy.</p> required <code>expectation</code> <code>ContextManager</code> <p>NoResultFound() exception.</p> required Source code in <code>src/python/tests/ncbi_taxonomy/test_ncbi_taxonomy.py</code> <pre><code>@pytest.mark.parametrize(\"taxon_id, expectation\", [(1, raises(NoResultFound))])\ndef test_parent_as_root_id(self, taxon_id: int, expectation: ContextManager) -&gt; None:\n    \"\"\"Tests :func:`parent()` with root taxon_id, no parent expected of course.\n\n    Args:\n        taxon_id: The root taxon_id not in ncbi_taxonomy.\n        expectation: NoResultFound() exception.\n    \"\"\"\n    with expectation:\n        with self.dbc.session_scope() as session:\n            result = Taxonomy.parent(session, taxon_id)\n            assert result == expectation\n</code></pre>"},{"location":"reference/python/tests/ncbi_taxonomy/test_ncbi_taxonomy/#python.tests.ncbi_taxonomy.test_ncbi_taxonomy.TestNCBITaxonomyUtils.test_parent_false_id","title":"<code>test_parent_false_id(taxon_id, expectation)</code>","text":"<p>Tests :func:<code>parent()</code> with non-existant taxon_id.</p> <p>Parameters:</p> Name Type Description Default <code>taxon_id</code> <code>int</code> <p>A false taxon_id not in ncbi_taxonomy.</p> required <code>expectation</code> <code>ContextManager</code> <p>NoResultFound() exception.</p> required Source code in <code>src/python/tests/ncbi_taxonomy/test_ncbi_taxonomy.py</code> <pre><code>@pytest.mark.parametrize(\"taxon_id, expectation\", [(9616, raises(NoResultFound))])\ndef test_parent_false_id(self, taxon_id: int, expectation: ContextManager) -&gt; None:\n    \"\"\"Tests :func:`parent()` with non-existant taxon_id.\n\n    Args:\n        taxon_id: A false taxon_id not in ncbi_taxonomy.\n        expectation: NoResultFound() exception.\n    \"\"\"\n    with expectation:\n        with self.dbc.session_scope() as session:\n            result = Taxonomy.parent(session, taxon_id)\n            assert result == expectation\n</code></pre>"},{"location":"reference/python/tests/xrefs/test_xref_source/","title":"test_xref_source","text":""},{"location":"reference/python/tests/xrefs/test_xref_source/#python.tests.xrefs.test_xref_source","title":"<code>python.tests.xrefs.test_xref_source</code>","text":"<p>Unit testing of <code>ensembl.xrefs.xref_source_db_model</code> module.</p>"},{"location":"reference/python/tests/xrefs/test_xref_source/#python.tests.xrefs.test_xref_source.TestCoreModels","title":"<code>TestCoreModels</code>","text":"<p>Tests the <code>ensembl.xrefs.xref_source_db_model</code> ORMs</p> Source code in <code>src/python/tests/xrefs/test_xref_source.py</code> <pre><code>@pytest.mark.parametrize(\"test_dbs\", [[{\"src\": \"core_db\"}]], indirect=True)\nclass TestCoreModels:\n    \"\"\"Tests the `ensembl.xrefs.xref_source_db_model` ORMs\"\"\"\n\n    dbc: UnitTestDB = None\n\n    @pytest.fixture(scope=\"class\", autouse=True)\n    def setup(self, test_dbs: dict[str, UnitTestDB]) -&gt; None:\n        \"\"\"Loads the required fixtures and values as class attributes.\n\n        Args:\n            test_dbs: Generator of unit test databases (fixture).\n        \"\"\"\n        type(self).dbc = test_dbs[\"core_db\"].dbc\n\n    def test_create_db(self) -&gt; None:\n        \"\"\"Test the creation of a database with the xref_source models schema.\"\"\"\n        self.dbc.create_all_tables(Base.metadata)\n        assert set(self.dbc.tables.keys()) == set(Base.metadata.tables.keys())\n</code></pre>"},{"location":"reference/python/tests/xrefs/test_xref_source/#python.tests.xrefs.test_xref_source.TestCoreModels.dbc","title":"<code>dbc = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/tests/xrefs/test_xref_source/#python.tests.xrefs.test_xref_source.TestCoreModels.setup","title":"<code>setup(test_dbs)</code>","text":"<p>Loads the required fixtures and values as class attributes.</p> <p>Parameters:</p> Name Type Description Default <code>test_dbs</code> <code>dict[str, UnitTestDB]</code> <p>Generator of unit test databases (fixture).</p> required Source code in <code>src/python/tests/xrefs/test_xref_source.py</code> <pre><code>@pytest.fixture(scope=\"class\", autouse=True)\ndef setup(self, test_dbs: dict[str, UnitTestDB]) -&gt; None:\n    \"\"\"Loads the required fixtures and values as class attributes.\n\n    Args:\n        test_dbs: Generator of unit test databases (fixture).\n    \"\"\"\n    type(self).dbc = test_dbs[\"core_db\"].dbc\n</code></pre>"},{"location":"reference/python/tests/xrefs/test_xref_source/#python.tests.xrefs.test_xref_source.TestCoreModels.test_create_db","title":"<code>test_create_db()</code>","text":"<p>Test the creation of a database with the xref_source models schema.</p> Source code in <code>src/python/tests/xrefs/test_xref_source.py</code> <pre><code>def test_create_db(self) -&gt; None:\n    \"\"\"Test the creation of a database with the xref_source models schema.\"\"\"\n    self.dbc.create_all_tables(Base.metadata)\n    assert set(self.dbc.tables.keys()) == set(Base.metadata.tables.keys())\n</code></pre>"},{"location":"reference/python/tests/xrefs/test_xref_update/","title":"test_xref_update","text":""},{"location":"reference/python/tests/xrefs/test_xref_update/#python.tests.xrefs.test_xref_update","title":"<code>python.tests.xrefs.test_xref_update</code>","text":"<p>Unit testing of <code>ensembl.xrefs.xref_update_db_model</code> module.</p>"},{"location":"reference/python/tests/xrefs/test_xref_update/#python.tests.xrefs.test_xref_update.TestCoreModels","title":"<code>TestCoreModels</code>","text":"<p>Tests the <code>ensembl.xrefs.xref_update_db_model</code> ORMs</p> Source code in <code>src/python/tests/xrefs/test_xref_update.py</code> <pre><code>@pytest.mark.parametrize(\"test_dbs\", [[{\"src\": \"core_db\"}]], indirect=True)\nclass TestCoreModels:\n    \"\"\"Tests the `ensembl.xrefs.xref_update_db_model` ORMs\"\"\"\n\n    dbc: UnitTestDB = None\n\n    @pytest.fixture(scope=\"class\", autouse=True)\n    def setup(self, test_dbs: dict[str, UnitTestDB]) -&gt; None:\n        \"\"\"Loads the required fixtures and values as class attributes.\n\n        Args:\n            test_dbs: Generator of unit test databases (fixture).\n        \"\"\"\n        type(self).dbc = test_dbs[\"core_db\"].dbc\n\n    def test_create_db(self) -&gt; None:\n        \"\"\"Test the creation of a database with the xref_update models schema.\"\"\"\n        self.dbc.create_all_tables(Base.metadata)\n        assert set(self.dbc.tables.keys()) == set(Base.metadata.tables.keys())\n</code></pre>"},{"location":"reference/python/tests/xrefs/test_xref_update/#python.tests.xrefs.test_xref_update.TestCoreModels.dbc","title":"<code>dbc = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/python/tests/xrefs/test_xref_update/#python.tests.xrefs.test_xref_update.TestCoreModels.setup","title":"<code>setup(test_dbs)</code>","text":"<p>Loads the required fixtures and values as class attributes.</p> <p>Parameters:</p> Name Type Description Default <code>test_dbs</code> <code>dict[str, UnitTestDB]</code> <p>Generator of unit test databases (fixture).</p> required Source code in <code>src/python/tests/xrefs/test_xref_update.py</code> <pre><code>@pytest.fixture(scope=\"class\", autouse=True)\ndef setup(self, test_dbs: dict[str, UnitTestDB]) -&gt; None:\n    \"\"\"Loads the required fixtures and values as class attributes.\n\n    Args:\n        test_dbs: Generator of unit test databases (fixture).\n    \"\"\"\n    type(self).dbc = test_dbs[\"core_db\"].dbc\n</code></pre>"},{"location":"reference/python/tests/xrefs/test_xref_update/#python.tests.xrefs.test_xref_update.TestCoreModels.test_create_db","title":"<code>test_create_db()</code>","text":"<p>Test the creation of a database with the xref_update models schema.</p> Source code in <code>src/python/tests/xrefs/test_xref_update.py</code> <pre><code>def test_create_db(self) -&gt; None:\n    \"\"\"Test the creation of a database with the xref_update models schema.\"\"\"\n    self.dbc.create_all_tables(Base.metadata)\n    assert set(self.dbc.tables.keys()) == set(Base.metadata.tables.keys())\n</code></pre>"},{"location":"coverage/","title":"Coverage report","text":""}]}